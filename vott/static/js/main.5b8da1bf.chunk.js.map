{"version":3,"sources":["providers/storage/assetProviderFactory.ts","common/constants.ts","providers/export sync /^/.//.*/.json$","providers/export sync /^/.//.*/.ui/.json$","providers/export/tensorFlowRecords/tensorFlowRecordsProtoBuf_pb.js","common/appInfo.ts","react/components/common/keyboardBinding/keyboardBinding.tsx","common/environment.ts","serviceWorker.ts","redux/reducers/currentProjectReducer.ts","redux/reducers/index.ts","redux/reducers/applicationReducer.ts","redux/reducers/connectionsReducer.ts","redux/reducers/recentProjectsReducer.ts","redux/reducers/appErrorReducer.ts","redux/store/initialState.ts","providers/storage/bingImageSearch.ts","providers/export/tensorFlowRecords.ts","providers/export/azureCustomVision.ts","providers/export/azureCustomVision/azureCustomVisionService.ts","common/extensions/array.ts","common/extensions/map.ts","index.tsx","registerMixins.ts","registerProviders.ts","redux/store/store.ts","redux/middleware/appInsights.ts","models/applicationState.ts","common/crypto.ts","providers/storage/localFileSystemProxy.ts","common/guard.ts","providers/export/tensorFlowRecords/tensorFlowReader.ts","react/components/common/messageBox/messageBox.tsx","telemetry.ts","providers/export/pascalVOC/pascalVOCTemplates.ts","react/components/common/alert/alert.tsx","history.ts","redux/actions/actionTypes.ts","providers/export/tensorFlowRecords/tensorFlowBuilder.ts","redux/middleware/localStorage.ts","providers/storage/azureBlobStorage.ts","common/htmlFileReader.ts","App.tsx","react/components/common/assetPreview/tfrecordAsset.tsx","common/hostProcess.ts","redux/actions/appErrorActions.ts","react/components/common/errorHandler/errorHandler.tsx","react/components/shell/titleBar.tsx","react/components/shell/statusBar.tsx","react/components/shell/statusBarMetrics.tsx","react/components/shell/helpMenu.tsx","providers/export/pascalVOC.ts","providers/export/vottJson.ts","providers/export/csv.ts","providers/export/cntk.ts","services/projectService.ts","redux/actions/projectActions.ts","redux/actions/applicationActions.ts","react/components/common/condensedList/condensedList.tsx","react/components/common/cloudFilePicker/cloudFilePicker.tsx","react/components/common/confirm/confirm.tsx","react/components/common/filePicker/filePicker.tsx","react/components/pages/homepage/recentProjectItem.tsx","services/importService.ts","react/components/pages/homepage/homePage.tsx","react/components/common/customField/customFieldTemplate.tsx","react/components/common/localFolderPicker/localFolderPicker.tsx","react/components/common/customField/customField.tsx","react/components/pages/activeLearning/activeLearningForm.tsx","react/components/pages/activeLearning/activeLearningPage.tsx","react/components/common/objectField/objectFieldTemplate.tsx","react/components/common/arrayField/arrayFieldTemplate.tsx","react/components/common/protectedInput/protectedInput.tsx","react/components/pages/appSettings/appSettingsForm.tsx","react/components/pages/appSettings/appSettingsPage.tsx","services/connectionService.ts","redux/actions/connectionActions.ts","react/components/common/connectionProviderPicker/connectionProviderPicker.tsx","react/components/pages/connections/connectionForm.tsx","react/components/pages/connections/connectionItem.tsx","react/components/pages/connections/connectionsPage.tsx","react/components/common/assetPreview/imageAsset.tsx","react/components/common/videoPlayer/customVideoPlayerButton.tsx","react/components/common/assetPreview/videoAsset.tsx","react/components/common/assetPreview/assetPreview.tsx","react/components/common/tagInput/tagInputItem.tsx","react/components/common/colorPicker.tsx","react/components/common/tagInput/tagInputToolbar.tsx","react/components/common/tagInput/tagInput.tsx","react/components/pages/editorPage/canvasHelpers.ts","common/clipboard.ts","common/layout.ts","react/components/pages/editorPage/canvas.tsx","react/components/pages/editorPage/editorSideBar.tsx","react/components/pages/editorPage/editorToolbar.tsx","providers/activeLearning/electronProxyHandler.ts","providers/activeLearning/objectDetection.ts","services/activeLearningService.ts","react/components/common/externalPicker/externalPicker.tsx","react/components/pages/editorPage/editorPage.tsx","react/components/common/exportProviderPicker/exportProviderPicker.tsx","react/components/common/slider/slider.tsx","react/components/pages/export/exportForm.tsx","react/components/pages/export/exportPage.tsx","react/components/common/connectionPicker/connectionPicker.tsx","react/components/common/securityTokenPicker/securityTokenPicker.tsx","react/components/pages/projectSettings/projectForm.tsx","react/components/pages/projectSettings/projectMetrics.tsx","react/components/pages/projectSettings/projectSettingsPage.tsx","react/components/shell/mainContentRouter.tsx","services/assetService.ts","react/components/common/conditionalNavLink/conditionalNavLink.tsx","react/components/shell/sidebar.tsx","redux/actions/actionCreators.ts","react/components/toolbar/toolbarItem.tsx","common/strings.ts","common/localization/en-us.ts","common/localization/es-cl.ts","providers/storage/storageProviderFactory.ts","providers/export/tensorFlowRecords/tensorFlowHelpers.ts","providers/export/exportProvider.ts","react/components/common/keyboardManager/keyboardManager.tsx","react/components/common/keyboardManager/keyboardRegistrationManager.ts","registerToolbar.ts","react/components/toolbar/exportProject.tsx","react/components/toolbar/saveProject.tsx","providers/toolbar/toolbarItemFactory.ts","providers/storage sync /^/.//.*/.json$","providers/storage sync /^/.//.*/.ui/.json$","common/utils.ts","providers/export/exportProviderFactory.ts","common/deferred.ts","common/ipcRendererProxy.ts"],"names":["AssetProviderFactory","Object","_home_vsts_work_1_s_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_1__","this","_home_vsts_work_1_s_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_2__","key","value","nameOrOptions","factory","Guard","null","options","name","displayName","platformSupport","HostProcessType","All","getHostProcess","type","providerRegistry","connection","create","providerType","providerOptions","empty","registrationOptions","Error","concat","get","_home_vsts_work_1_s_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","d","__webpack_exports__","constants","projectFileExtension","assetMetadataFileExtension","exportFileExtension","map","./azureCustomVision.json","./azureCustomVision.ui.json","./cntk.json","./cntk.ui.json","./csv.json","./csv.ui.json","./pascalVOC.json","./pascalVOC.ui.json","./tensorFlowRecords.json","./tensorFlowRecords.ui.json","./vottJson.json","./vottJson.ui.json","webpackContext","req","id","webpackContextResolve","e","code","keys","resolve","module","exports","jspb","require","goog","global","Function","exportSymbol","proto","tensorflow","BytesList","opt_data","Message","initialize","repeatedFields_","inherits","DEBUG","COMPILED","GENERATE_TO_OBJECT","prototype","toObject","opt_includeInstance","includeInstance","msg","obj","valueList","getValueList_asB64","$jspbMessageInstance","deserializeBinary","bytes","reader","BinaryReader","deserializeBinaryFromReader","nextField","isEndGroup","getFieldNumber","readBytes","addValue","skipField","serializeBinary","writer","BinaryWriter","serializeBinaryToWriter","getResultBuffer","message","f","getValueList_asU8","length","writeRepeatedBytes","getValueList","getRepeatedField","bytesListAsB64","bytesListAsU8","setValueList","setField","opt_index","addToRepeatedField","clearValueList","FloatList","getRepeatedFloatingPointField","readPackedFloat","writePackedFloat","Int64List","readPackedInt64","writePackedInt64","Feature","oneofGroups_","KindCase","KIND_NOT_SET","BYTES_LIST","FLOAT_LIST","INT64_LIST","getKindCase","computeOneofCase","bytesList","getBytesList","floatList","getFloatList","int64List","getInt64List","readMessage","setBytesList","setFloatList","setInt64List","undefined","writeMessage","getWrapperField","setOneofWrapperField","clearBytesList","hasBytesList","getField","clearFloatList","hasFloatList","clearInt64List","hasInt64List","Features","featureMap","getFeatureMap","Map","readString","getLength","writeString","opt_noLazyCreate","getMapField","clearFeatureMap","clear","FeatureList","featureList","toObjectList","getFeatureList","addFeature","writeRepeatedMessage","getRepeatedWrapperField","setFeatureList","setRepeatedWrapperField","opt_value","addToRepeatedWrapperField","clearFeatureList","FeatureLists","featureListMap","getFeatureListMap","clearFeatureListMap","TFRecordsImageMessage","context","getContext","featureLists","getFeatureLists","setContext","setFeatureLists","setWrapperField","clearContext","hasContext","clearFeatureLists","hasFeatureLists","object","extend","appInfo","KeyboardBinding","_React$Component","_home_vsts_work_1_s_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__","_home_vsts_work_1_s_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_2__","_home_vsts_work_1_s_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_3__","apply","arguments","_home_vsts_work_1_s_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_4__","_home_vsts_work_1_s_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_1__","keyboard","deregisterBinding","registerBinding","props","console","warn","React","Component","contextType","KeyboardContext","Env","process","Boolean","window","location","hostname","match","tagColors","combineReducers","appSettings","state","action","ActionTypes","TOGGLE_DEV_TOOLS_SUCCESS","objectSpread","devToolsEnabled","payload","REFRESH_APP_SUCCESS","SAVE_APP_SETTINGS_SUCCESS","ENSURE_SECURITY_TOKEN_SUCCESS","connections","SAVE_CONNECTION_SUCCESS","toConsumableArray","filter","DELETE_CONNECTION_SUCCESS","LOAD_PROJECT_SUCCESS","sourceConnection","targetConnection","recentProjects","SAVE_PROJECT_SUCCESS","project","DELETE_PROJECT_SUCCESS","updatedProject","currentProject","CLOSE_PROJECT_SUCCESS","LOAD_ASSET_METADATA_SUCCESS","lastVisitedAssetId","asset","SAVE_ASSET_METADATA_SUCCESS","updatedAssets","assets","assetTags","Set","regions","forEach","region","tags","tag","add","newTags","updateTags","find","projectTag","push","color","appError","SHOW_ERROR","CLEAR_ERROR","BingImageSearchAspectRatio","initialState","securityTokens","TFRecordsExportProvider","_ExportProvider","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","createClass","_export2","asyncToGenerator","regenerator_default","a","mark","_callee","allAssets","exportFolderName","wrap","_context","prev","next","getAssetsForExport","sent","_","keyBy","assetMetadata","replace","storageProvider","createContainer","exportPBTXT","exportRecords","stop","_exportRecords","_callee3","_this2","_context3","mapAsync","_ref","_callee2","element","_context2","exportSingleRecord","abrupt","_x3","_x","_x2","_exportSingleRecord","_callee5","_this3","_context5","Promise","_ref2","_callee4","reject","arrayBuffer","imageBuffer","image64","imageInfo","builder","fileName","fileNamePath","_context4","HtmlFileReader","getAssetArray","Uint8Array","btoa","reduce","data","byte","String","fromCharCode","width","size","height","text","label","xmin","ymin","xmax","ymax","difficult","truncated","view","updateImageSizeInfo","updateAssetTagArrays","TFRecordsBuilder","FeatureType","Int64","CryptoJS","SHA256","toString","enc","Base64","Binary","split","pop","addArrayFeature","Float","slice","join","writeTFRecords","build","t0","log","path","_x6","_x7","_x4","_x5","_writeTFRecords","_callee6","buffers","tfRecords","_context6","buildTFRecords","writeBinary","_x8","_x9","_updateImageSizeInfo","_callee7","assetProps","_context7","readAssetAttributesWithBuffer","_x10","_x11","_this4","boundingBox","tagName","index","findIndex","left","top","_exportPBTXT","_callee8","pbtxtFileName","items","_context8","params","interpolate","itemTemplate","writeText","_x12","_x13","ExportProvider","BingImageSearch","_getAssets","query","url","response","q","aspect","aspectRatio","SEARCH_URL","createQueryString","axios","headers","Ocp-Apim-Subscription-Key","apiKey","Accept","item","contentUrl","filePath","AssetService","createAssetFromFilePath","AssetType","Unknown","NewOrExisting","AzureRegion","AzureCustomVisionService","_create","urlParams","description","projectType","domainId","classificationType","baseUrl","post","createRequestConfig","status","_getProjectTags","projectId","_createTag","_createImage","contents","config","images","image","_createRegions","Training-key","AzureCustomVisionProvider","SouthCentralUS","cusomVisionServiceOptions","customVisionService","customVisionTags","assetsToExport","tagMap","results","syncTags","uploadAsset","success","error","completed","r","errors","count","_save","exportFormat","customVisionOptions","customVisionProject","newOrExisting","Existing","assetState","_syncTags","customVisionTagNames","createTagTasks","getProjectTags","newTag","createTag","all","_uploadAsset","blob","newImage","allRegions","getAssetBlob","createImage","customVisionTag","getBoundingBoxValue","newRegion","imageId","tagId","createRegions","forEachAsync","_forEachAsync","batchSize","batch","tasks","_args","expression","_mapAsync","batchResults","_args2","extensions_map_forEachAsync","entries","setUpAppInsights","Array","arrayForEachAsync","mapForEachAsync","StorageProviderFactory","register","strings","providers","local","title","Electron","LocalFileSystemProxy","azureBlob","AzureBlobStorage","bing","ExportProviderFactory","export","vottJson","VottJsonExportProvider","pascalVoc","PascalVOCExportProvider","azureCV","cntk","CntkExportProvider","csv","CsvExportProvider","registerToolbar","store","useLocalStorage","paths","middlewares","thunk","trackReduxAction","storage","createLocalStorage","logger","reduxImmutableStateInvariant","default","createLogger","createStore","rootReducer","mergeInitialState","applyMiddleware","createReduxStore","ReactDOM","render","react_default","createElement","es","App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","ErrorCode","StorageType","ModelPathType","AssetState","RegionType","EditorMode","AppError","_Error","errorCode","_home_vsts_work_1_s_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_1__","_home_vsts_work_1_s_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_2__","_home_vsts_work_1_s_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_3__","_home_vsts_work_1_s_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_wrapNativeSuper__WEBPACK_IMPORTED_MODULE_4__","generateKey","encryptObject","decryptObject","crypto_js__WEBPACK_IMPORTED_MODULE_0__","_guard__WEBPACK_IMPORTED_MODULE_1__","keySize","lib","WordArray","random","secret","secretBytes","parse","iv","json","ciphertext","AES","encrypt","words","Utf8","JSON","stringify","encodedMessage","Hex","cipherParams","CipherParams","decrypt","PROXY_NAME","folderPath","IpcRendererProxy","send","folderName","ext","paramName","trim","predicate","TFRecordsReader","tfrecords","imageMessages","position","lengthBuffer","dataLength","readInt64","lengthCrc","maskCrc","crc32c","expectedLengthCrc","readUInt32LE","dataBuffer","dataCrc","expectedDataCrc","imageMessage","recordPos","feature","textDecode","array","buffer","MessageBox","getMessage","_home_vsts_work_1_s_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_assertThisInitialized__WEBPACK_IMPORTED_MODULE_5__","isOpen","show","isRendered","isButtonSelected","toggle","bind","open","close","onFooterClick","onClosed","react__WEBPACK_IMPORTED_MODULE_6___default","reactstrap__WEBPACK_IMPORTED_MODULE_7__","className","hideFooter","onClick","children","setState","onCancel","prevProps","evt","htmlElement","target","onButtonSelect","appInsights","instrumentationKey","debug","maxBatchSize","isElectron","reactAI","AppVersion","version","extensions","extensionConfig","_home_vsts_work_1_s_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__","extensionId","history","ApplicationInsights","loadAppInsights","trackError","exceptionTelemetry","properties","severityLevel","SeverityLevel","trackException","trackEvent","annotationTemplate","objectTemplate","Alert","messageBox","createRef","onCloseClick","_messageBox_messageBox__WEBPACK_IMPORTED_MODULE_8__","ref","autoFocus","closeButtonColor","closeButtonText","_len","_key","current","onClose","history__WEBPACK_IMPORTED_MODULE_0__","createHashHistory","features","records","Buffer","record","bufferLength","getInt64Buffer","bufferLengthMaskedCRC","getInt32Buffer","bufferDataMaskedCRC","values","stringList","textEncode","byteList","intList","set","result","getState","localStorage","setItem","getItem","_home_vsts_work_1_s_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_2__","storageType","Cloud","_home_vsts_work_1_s_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_3__","_initialize","_home_vsts_work_1_s_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_asyncToGenerator__WEBPACK_IMPORTED_MODULE_1__","_home_vsts_work_1_s_node_modules_babel_preset_react_app_node_modules_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default","containerName","listContainers","indexOf","_readText","blobName","blockBlobURL","downloadResponse","getBlockBlobURL","download","Aborter","none","bodyToString","_readBinary","readText","from","_writeText","content","upload","_deleteFile","delete","_listFiles","marker","containerURL","listBlobsResponse","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_iterator","_step","getContainerURL","listBlobFlatSegment","nextMarker","segment","blobItems","Symbol","iterator","done","endsWith","return","finish","_listContainers","listContainersResponse","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_iterator2","_step2","container","getServiceURL","listContainersSegment","containerItems","_createContainer","statusCode","_deleteContainer","_callee9","_context9","_callee10","files","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_iterator3","_step3","file","_context10","listFiles","getUrl","getFileName","pathParts","accountName","sas","oauthToken","TokenCredential","AnonymousCredential","credential","getCredential","pipeline","StorageURL","newPipeline","accountUrl","getAccountUrl","ServiceURL","serviceURL","ContainerURL","fromServiceURL","BlockBlobURL","fromContainerURL","_bodyToString","_callee11","_length","_context11","blobBody","blobToString","_blobToString","_callee12","fileReader","_context12","FileReader","onloadend","ev","onerror","readAsText","_x14","fileInfo","onload","err","Image","Video","TFRecord","readImageAttributes","readVideoAttributes","readTFRecordAttributes","base64","responseType","VideoFrame","getAssetFrameImage","Response","refresh","video","videoAssetFiles","parent","toLowerCase","onloadedmetadata","currentTime","timestamp","onseeked","canvas","videoHeight","videoWidth","drawImage","toBlob","src","duration","naturalWidth","naturalHeight","getFeature","connect","dispatch","actions","bindActionCreators","appErrorActions","showError","GenericRenderError","platform","react__WEBPACK_IMPORTED_MODULE_5___default","react__WEBPACK_IMPORTED_MODULE_5__","_react_components_common_errorHandler_errorHandler__WEBPACK_IMPORTED_MODULE_16__","onError","onClearError","clearError","_react_components_common_keyboardManager_keyboardManager__WEBPACK_IMPORTED_MODULE_17__","react_router_dom__WEBPACK_IMPORTED_MODULE_7__","_react_components_shell_titleBar__WEBPACK_IMPORTED_MODULE_18__","icon","_react_components_shell_helpMenu__WEBPACK_IMPORTED_MODULE_21__","_react_components_shell_sidebar__WEBPACK_IMPORTED_MODULE_9__","_react_components_shell_mainContentRouter__WEBPACK_IMPORTED_MODULE_10__","_react_components_shell_statusBar__WEBPACK_IMPORTED_MODULE_19__","_react_components_shell_statusBarMetrics__WEBPACK_IMPORTED_MODULE_20__","react_toastify__WEBPACK_IMPORTED_MODULE_8__","TFRecordAsset","_getPrototypeOf2","args","_home_vsts_work_1_s_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_4__","_home_vsts_work_1_s_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5__","tfRecordImage64","hasError","updateImage","base64ImageData","getTFRecordBase64Image","onLoad","onLoaded","onActivated","onDeactivated","_home_vsts_work_1_s_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_6__","react__WEBPACK_IMPORTED_MODULE_7___default","crossOrigin","_componentDidMount","_componentDidUpdate","_getTFRecordBase64Image","t1","PlatformType","isBrowser","os__WEBPACK_IMPORTED_MODULE_0__","os__WEBPACK_IMPORTED_MODULE_0___default","n","hostProcessType","osRelease","os","release","HOST_TYPE","Browser","showErrorAction","clearErrorAction","_actionCreators__WEBPACK_IMPORTED_MODULE_0__","_actionTypes__WEBPACK_IMPORTED_MODULE_1__","createPayloadAction","createAction","ErrorHandler","onWindowError","onUnhandedRejection","addEventListener","removeEventListener","localizedError","getLocalizedError","_alert_alert__WEBPACK_IMPORTED_MODULE_9__","handleError","preventDefault","reason","detail","isReactDnDError","getUnknownErrorMessage","unknown","TitleBar","_home_vsts_work_1_s_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_3__","_home_vsts_work_1_s_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_4__","maximized","fullscreen","menu","onMaximize","isMaximized","onFullScreen","isFullScreen","renderMenu","renderMenuItem","menuItem","visible","rc_menu__WEBPACK_IMPORTED_MODULE_7__","popupOffset","disabled","enabled","onMenuItemClick","checked","getAcceleratorString","syncTitle","currentWindow","setTitle","minimizeWindow","minimize","maximizeWindow","maximize","unmaximizeWindow","unmaximize","closeWindow","onMenuItemSelected","openKeys","selectedKeys","_home_vsts_work_1_s_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_5__","remote","getCurrentWindow","on","Menu","getApplicationMenu","Windows","Web","mode","selectable","triggerSubMenuAction","titleBar","restore","click","accelerator","getAcceleratorFromRole","role","StatusBar","StatusBarMetrics","projectAssets","visitedAssets","Visited","Tagged","taggedAssets","projectSettings","projectMetrics","HelpMenu","getHelpBody","registrations","getRegistrations","KeyEventType","KeyDown","groupKeys","group","getRegistrationRow","allKeys","caseConsolidatedKeys","consolidateKeyCasings","groups","alreadyGrouped","has","otherKey","bindingEquals","lowerRegistrations","lowerKey","keyRegistration","stringifyGroup","_common_keyboardBinding_keyboardBinding__WEBPACK_IMPORTED_MODULE_9__","editorPage","help","accelerators","handler","keyEventType","_common_messageBox_messageBox__WEBPACK_IMPORTED_MODULE_6__","binding1","binding2","_home_vsts_work_1_s_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_3__","_home_vsts_work_1_s_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_5__","_home_vsts_work_1_s_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_6__","imagesInfo","_home_vsts_work_1_s_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_7__","_home_vsts_work_1_s_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_4__","_home_vsts_work_1_s_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_asyncToGenerator__WEBPACK_IMPORTED_MODULE_2__","testSplit","_home_vsts_work_1_s_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_1__","exportImages","exportAnnotations","testTrainSplit","exportImageSets","exportUnassigned","_exportImages","jpegImagesFolderName","exportSingleImage","_exportSingleImage","imageFileName","tagObjects","getAssetTagArray","objects","objectInfo","assetName","_exportAnnotations","annotationsFolderName","imageName","imageFilePath","assetFilePath","objectsXML","substr","lastIndexOf","o","_exportImageSets","exportUnassignedTags","imageSetsFolderName","imageSetsMainFolderName","assetUsage","tagUsage","appliedTags","tagInstances","_ref3","assetList","totalAssets","testCount","testArray","trainArray","testImageSetFileName","trainImageSetFileName","imageSetFileName","Math","ceil","EOL","_x20","_x15","_x16","_x17","_x18","_x19","_home_vsts_work_1_s_node_modules_babel_preset_react_app_node_modules_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_1___default","exportObject","includeImages","dataItems","csvOptions","csvParser","csvData","dataItem","fields","Parser","ExportSplit","createFolderStructure","exportSplit","am","Test","Train","exportAssetFrame","_exportAssetFrame","labelData","boundingBoxData","labelsPath","boundingBoxPath","binaryPath","_createFolderStructure","positiveFolder","negativeFolder","testImagesFolder","defaultActiveLearningSettings","autoDetect","predictTag","modelPathType","Coco","defaultExportOptions","ExportAssetState","ProjectService","securityToken","loadedProject","decryptProject","activeLearningSettings","ensureBackwardsCompatibility","ProjectInvalidSecurityToken","shortid","generate","packageJson","createFromConnection","saveExportSettings","encryptProject","deleteFiles","deleteFile","projectList","p","exportProvider","createFromProject","save","startsWith","loadProject","appState","projectService","projectToken","SecurityTokenNotFound","load","loadProjectAction","saveProject","savedProject","isDuplicate","ProjectDuplicateName","saveProjectAction","deleteProject","decryptedProject","deleteProjectAction","closeProject","loadAssets","_ref4","assetService","getAssets","loadProjectAssetsAction","loadAssetMetadata","_ref5","getAssetMetadata","loadAssetMetadataAction","saveAssetMetadata","newAssetMetadata","_ref6","savedMetadata","saveAssetMetadataAction","updateProjectTag","oldTagName","newTagName","_ref7","assetUpdates","renameTag","_ref8","t","updateProjectTagAction","deleteProjectTag","_ref9","deleteTag","_ref10","deleteProjectTagAction","exportProject","_ref11","ExportFormatNotFound","exportFormatNotFound","exportProjectAction","closeProjectAction","LOAD_PROJECT_ASSETS_SUCCESS","EXPORT_PROJECT_SUCCESS","UPDATE_PROJECT_TAG_SUCCESS","DELETE_PROJECT_TAG_SUCCESS","toggleDevTools","toggleDevToolsAction","reloadApplication","refreshApplicationAction","saveAppSettings","saveAppSettingsAction","ensureSecurityToken","updatedAppSettings","st","ensureSecurityTokenAction","CondensedList","onItemClick","onItemDelete","stopPropagation","onDelete","assertThisInitialized","_this$props","newLinkTo","Link","to","ListItem","CloudFilePicker","getInitialState","ok","back","connectionList","onClickConnection","fileList","onClickFile","closeBtn","reactstrap_es","centered","modalHeader","condensedList","selectedFile","okDisabled","backDisabled","homePage","openCloudProject","selectConnection","selectedConnection","_ok","onSubmit","condensedList_CondensedList","isCloudConnection","getCloudConnections","getCondensedList","_onClickConnection","_fileList","fileItems","i","fileExtension","Confirm","onConfirmClick","onCancelClick","confirmButtonColor","confirmButtonText","cancelButtonColor","cancelButtonText","onConfirm","FilePicker","fileInput","onFileUploaded","onChange","catch","RecentProjectItem","ImportService","projectInfo","originalProject","ProjectInvalidJson","parsedTags","parseTags","generateConnection","videoSettings","frameExtractionRate","framerate","Number","autoSave","v1Project","v2Project","generatedAssetMetadata","frames","frameName","isVideoProject","generateVideoAssets","generateImageAssets","projectPath","normalizeSlashes","frame","getAssetState","createAssetMetadata","createParentVideoAsset","parentVideoAsset","frameInt","createVideoFrameAsset","videoFrameAssets","parentAssetState","parentAssetMetadata","fileNameParts","getAssetType","parentAsset","readAssetAttributes","inputTags","tag_colors","metadata","frameRegions","generatedRegion","UID","Rectangle","points","x","x1","y","y1","y2","x2","addRegions","HomePage","projectActions","applicationActions","cloudPickerOpen","filePicker","deleteConfirm","cloudFilePicker","importConfirm","createNewProject","handleOpenCloudProjectClick","onProjectFileUpload","projectJson","loadSelectedProject","onProjectFileUploadError","ProjectUploadError","toast","info","messages","deleteSuccess","ProjectDeleteError","convertProject","importService","V1ImportError","generateAssets","href","newProject","openLocalProject","filePicker_FilePicker","cloudFilePicker_CloudFilePicker","confirm_Confirm","confirmation","importProject","CustomFieldTemplate","required","rawErrors","schema","uiSchema","classNames","htmlFor","react","errorMessage","idx","LocalFolderPicker","selectLocalFolder","localFileSystem","selectContainer","readOnly","selectFolder","CustomField","Widget","mapProps","widgetProps","CustomWidget","formSchema","addLocValues","ActiveLearningForm","formData","settings","widgets","localFolderPicker","checkbox","Checkbox","onFormChange","changeEvent","updatedSettings","modelPath","modelUrl","onFormSubmit","onFormCancel","react_jsonschema_form_lib_default","showErrorList","liveValidate","noHtml5Validate","FieldTemplate","common","cancel","ActiveLearningPage","activeLearning","saveSuccess","goBack","projectToLoad","activeLearningForm_ActiveLearningForm","ObjectFieldTemplate","ArrayFieldTemplate","canAdd","onAddClick","hasRemove","onDropIndexClick","ProtectedInput","inputElement","showKey","toggleKeyVisibility","copyKey","_this$state","input","_copyKey","clipboard","AppSettingsForm","idSchema","$id","onFormValidate","validate","form","AppSettingsPage","reloadApp","appSettingsForm_AppSettingsForm","commit","devTools","button","reload","ConnectionService","assetProvider","loadConnection","loadConnectionAction","saveConnection","connectionService","saveConnectionAction","deleteConnection","deleteConnectionAction","LOAD_CONNECTION_SUCCESS","ConnectionProviderPicker","storageProviders","assetProviders","allProviders","uniqBy","orderBy","provider","ConnectionForm","connectionProviderPicker","protectedInput","providerName","bindForm","aria-hidden","imageCorsWarning","formatString","blobCorsWarning","azDocLinkText","addError","resetProviderOptions","newFormSchema","newUiSchema","providerSchema","providerUiSchema","ConnectionItem","NavLink","ConnectionPage","connectionActions","componentDidUpdate","prevConnectionId","newConnectionId","onConnectionDelete","confirmDelete","connectionId","Route","exact","instructions","connectionForm_ConnectionForm","ImageAsset","CustomVideoPlayerButton","keyboardBinding","tooltip","VideoAsset","loaded","videoPlayer","timelineElement","movePreviousTaggedFrame","getVideoPlayerState","previousFrame","reverse","childAssets","seekToTime","moveNextTaggedFrame","nextFrame","moveNextExpectedFrame","seekTime","additionalSettings","movePreviousExpectedFrame","playerState","onBeforeAssetChanged","paused","pause","seek","onVideoStateChange","readyState","seeking","raiseActivated","isValidKeyFrame","raiseChildAssetSelected","raiseDeactivated","raiseLoaded","autoPlay","play","addAssetTimelineTags","onChildAssetSelected","rootAsset","childPath","childAsset","NotVisited","keyFrameTime","round","toFixed","videoDuration","assetTimelineTagLines","renderTimeline","querySelector","progressHolderElement","appendChild","renderChildAssetMarker","childPosition","style","player","videoPath","video_react_lib","fluid","autoHide","controlsEnabled","customVideoPlayerButton_CustomVideoPlayerButton","order","previousExpectedFrame","nextExpectedFrame","rates","previousTaggedFrame","nextTaggedFrame","subscribeToStateChange","defaultProps","AssetPreview","renderAsset","imageAsset_ImageAsset","onAssetLoad","videoAsset_VideoAsset","tfrecordAsset","assetError","contentSource","onAssetChanged","TagEditMode","ColorPicker","pickerBackground","onEditColor","hex","GithubPicker","react_color_lib","onChangeComplete","colors","styles","card","background","triangle","CirclePicker","circleSize","TagInputItem","isBeingEdited","isLocked","tagEditMode","onColorClick","ctrlKey","metaKey","altKey","Color","clickedColor","onNameClick","Name","getItemClassName","isSelected","appliedToSelectedRegions","getTagContent","displayIndex","getDisplayIndex","getContentClassName","defaultValue","onKeyDown","handleNameEdit","TagInputToolbar","onToolbarItemClick","itemConfig","getToolbarItems","toolbar","handleAdd","search","handleSearch","lock","handleLock","edit","handleEdit","moveUp","handleArrowUp","moveDown","handleArrowDown","handleDelete","onAddTags","onSearchTags","onLockTag","selectedTag","onEditTag","onReorder","defaultDOMNode","TagInput","showColorPicker","addTags","showTagInputBox","searchTags","showSearchBox","searchQuery","editingTag","editingTagNode","portalElement","tagItemRefs","portalDiv","getTagNode","itemRef","findDOMNode","newEditingTag","lockedTags","onLockedTagsChange","onReOrder","displacement","currentIndex","newIndex","splice","handleColorChange","updateTag","nameChange","some","warnings","existingName","onTagRenamed","emptyName","getColorPickerPortal","createPortal","rc_align_es","align","getAlignConfig","getTarget","colorPicker_ColorPicker","coords","getEditingTagCoords","isNearBottom","innerHeight","alignCorner","verticalOffset","offset","node","getBoundingClientRect","renderTagItems","createTagItemProps","prop","includes","tagInputItem_TagInputItem","assign","setTagItemRef","selectedRegionTagSet","getSelectedRegionTagSet","handleClick","selectedRegions","onAltClick","onCtrlTagClick","inEditMode","alreadySelected","onTagClick","onTagDeleted","getNewSelectedTag","l","lockedTag","previouIndex","min","onSearchKeyDown","event","onAddTagKeyDown","getNextColor","addTag","lastColor","lastIndex","randomIntInRange","tagInputToolbar_TagInputToolbar","placeholder","body","removeChild","CanvasHelpers","existingTag","addIfMissing","updates","_loop","update","RegionData","point","Point2D","regionTypeToType","regionData","regionType","area","projectTags","Tag","TagsDescriptor","pasteMargin","RegionDataType","Rect","Polygon","Point","Polyline","duplicateRegionsAndMove","others","shiftCoordinates","getShiftCoordinates","shiftBoundingBox","shiftPoints","boundingBoxWithin","fromBoundingBox","existsRegionAt","_iteratorNormalCompletion4","_didIteratorError4","_iteratorError4","_step4","_iterator4","otherRegions","defaultTargetX","PasteRegionTooBig","pasteRegionTooBigError","foundRegionAtTarget","tempBoundingBox","Clipboard","createLandscapeBoundingBox","offsetWidth","offsetLeft","offsetTop","offsetHeight","createPortraitBoundingBox","Canvas","currentAsset","selectedAsset","canvasZone","clearConfirm","template","componentDidMount","sz","editor","CanvasTools","Editor","autoResize","onSelectionEnd","onRegionMoveEnd","onRegionDelete","onRegionSelected","AS","setSelectionMode","selectionMode","onWindowResize","prevState","SelectionMode","COPYRECT","refreshCanvasToolsRegions","updateCanvasToolsRegionTags","setContentSource","enable","onSelectedRegionsChanged","getSelectedRegions","disable","clearAllRegions","NONE","removeAllRegions","renderChildren","applyTag","lockedTagsEmpty","regionsEmpty","transformer","toggleTag","removeIfContained","selectedRegion","updateRegions","copyRegions","writeObject","cutRegions","deleteRegions","pasteRegions","regionsToPaste","duplicates","readObject","confirmRemoveAllRegions","RM","getSelectedRegionsBounds","rb","updateTagsById","getTagsDescriptor","forceResize","ids","deleteRegionById","deleteRegionsFromAsset","addRegionsToCanvasTools","addRegionsToAsset","updateAssetRegions","getRegionData","scaledRegionData","scaleRegionToFrameSize","addRegion","deleteRegionsFromCanvasTools","filteredRegions","assetRegion","_iteratorNormalCompletion5","_didIteratorError5","_iteratorError5","_step5","_iterator5","isEmpty","scaleRegionToSourceSize","editorModeToType","editorMode","onAssetMetadataChanged","currentRegions","movedRegionIndex","movedRegion","deletedRegionIndex","multiSelect","selectedRegionsData","_iteratorNormalCompletion6","_didIteratorError6","_iteratorError6","_step6","_iterator6","addAllIfMissing","cloneElement","onAssetLoaded","onAssetError","onAssetActivated","onAssetDeactivated","positionCanvas","addContentSource","onCanvasRendered","HTMLVideoElement","HTMLImageElement","createContentBoundingBox","resize","updatedRegions","_iteratorNormalCompletion7","_didIteratorError7","_iteratorError7","_step7","_iterator7","deleteAllRegions","loadedRegionData","CopyRect","Select","EditorSideBar","scrollToIndex","listRef","getRowHeight","selectAsset","forceUpdateGrid","onAssetClicked","onBeforeAssetSelected","onAssetSelected","rowRenderer","getAssetCssClassNames","renderBadges","assetPreview_AssetPreview","tagged","visited","cssClasses","dist_es","rowCount","rowHeight","overscanRowCount","thumbnailSize","recomputeRowHeights","EditorToolbar","selectedItem","ToolbarItemName","SelectCanvas","onToolbarItemSelected","toolbarItem","groupBy","toolbarItemProps","active","isComponentActive","ToolbarItem","component","selected","componentRegistration","ToolbarItemType","State","ElectronProxyHandler","_load","modelJSON","modelArtifacts","weightSpecs","weightData","modelTopology","weightsManifest","loadWeights","slicedToArray","_loadClasses","_loadWeights","shardName","readBinary","weights","toArrayBuffer","buf","isArray","totalLength","ab","ArrayBuffer","pos","copy","byteOffset","byteLength","ObjectDetection","modelLoaded","model","dispose","modelFolderPath","tf","jsonClasses","loadClasses","executeAsync","_predictImage","xRatio","yRatio","detect","prediction","max","bbox","class","_detect","img","maxNumBoxes","_args5","infer","_infer","batched","scores","boxes","_this$calculateMaxSco","_this$calculateMaxSco2","maxScores","classes","prevBackend","indexTensor","indexes","_args6","fromPixels","expandDims","shape","dataSync","calculateMaxScores","boxes2","nonMaxSuppression","buildDetectedObjects","j","minY","minX","maxY","maxX","getClass","score","classId","classObject","unknownTagName","numBoxes","numClasses","maxes","MIN_VALUE","ActiveLearningService","getAppPath","app","objectDetection","_predictRegions","predictedRegions","ensureModelLoaded","predictImage","matchingRegion","predicted","_ensureModelLoaded","loadModel","_loadModel","appPath","File","FilterOperator","EditorPage","RECT","isValid","showInvalidRegionWarning","activeLearningService","loadingProjectAssets","toolbarItems","ToolbarItemFactory","renameTagConfirm","deleteTagConfirm","onPageClick","onSideBarResize","newWidth","onSideBarResizeComplete","onTagClicked","confirmTagRenamed","confirmTagDeleted","onCtrlTagClicked","locked","getTagFromKeyboardEvent","parseInt","isNaN","handleTagHotKey","handleCtrlTagHotKey","isTaggableAssetType","rootAssetMetadata","assetIndex","getChildAssets","predictRegions","onTagsChanged","onLockedTagsChanged","DrawRectangle","DrawPolygon","CopyRectangle","PreviousAsset","NextAsset","CopyRegions","CutRegions","PasteRegions","RemoveAllRegions","ActiveLearning","POLYGON","goToRootAsset","toastId","updatedAssetMetadata","isModelLoaded","loadingModel","autoClose","errorLoadModel","dismiss","ActiveLearningPredictionError","direction","selectedRootAsset","loadProjectAssets","_callee13","rootProjectAssets","sourceAssets","rootAssets","lastVisited","_context13","updateRootAssets","projectAsset","hotKey","index_esm","defaultSize","minSize","maxSize","paneStyle","display","onDragFinished","editorSideBar_EditorSideBar","editorToolbar_EditorToolbar","canvas_Canvas","tagInput_TagInput","rename","alert_alert","enforceTaggedRegions","ExportProviderPicker","exportProviders","ExternalPicker","bindExternalData","uiOptions","customHeaders","authHeaderValue","rawItems","_items","authHeaderName","method","request","filterPredicate","keySelector","valueSelector","formContext","right","operator","Equals","GreaterThan","LessThan","Slider","rc_slider_es","ExportForm","externalPicker","exportProviderPicker","slider","defaultProvider","providerDefaults","getDefaultFormState","saveSettings","ExportPage","emptyExportFormat","projectToUpdate","exportForm_ExportForm","ConnectionPicker","createConnection","selectedValue","ConnectionPickerWithRouter","withRouter","SecurityTokenPicker","ProjectForm","tagsInput","tagEditorModal","onTagShiftClick","onTagModalOk","dist_lib","onOk","tagNameText","modal","tagColorText","saveText","cancelText","targetConnections","isRegistered","TagsInput","placeHolder","onShiftTagClick","oldTag","ProjectMetrics","loading","hoveredCell","projectAssetsMetadata","forceUpdate","getTaggedAssetCount","m","getAverageTagCount","taggedAssetCount","getAllTagReferences","getVisitedAssetsCount","getRegionsCount","getRegions","getSourceAssetCount","getTagsCounts","tagReferences","tagMetric","assetsMetadata","flatten","getAssetsAndMetadata","renderMetrics","radius","truedAngle","angle","angle0","cos","sin","sourceAssetCount","visitedAssetCount","assetChartSize","innerWidth","assetChartData","animation","bigness","clr","dontRotateLabel","nonTaggedAssets","nonVisitedAssets","labelStyle","fontSize","fontWeight","tagChartData","legend","assetsSectionTitle","totalAssetCount","react_vis_es","stroke","onValueMouseOver","v","onValueMouseOut","margin","bottom","getLabel","getSize","getColor","padAngle","hideRootNode","buildValue","tagsSectionTitle","totalTagCount","totalRegionCount","avgTagCountPerAsset","xType","colorType","tickLabelAngle","assetsMap","projectFormTempKey","ProjectSettingsPage","isPartialProject","isNew","removeItem","projectForm_ProjectForm","projectMetrics_ProjectMetrics","MainContentRouter","Switch","normalizedPath","encodeFileURI","md5Hash","MD5","digest","assetFormat","assetType","format","sort","b","_getAssetMetadata","getRegionsFromTFRecord","t2","t3","_deleteTag","getUpdatedAssets","_renameTag","_getUpdatedAssets","isUpdated","updateTagInAssetMetadata","foundTag","_getRegionsFromTFRecord","objectArray","getTFRecordMetadata","textArray","xminArray","yminArray","xmaxArray","ymaxArray","_getTFRecordMetadata","getArrayFeature","assetProviderInstance","storageProviderInstance","ConditionalNavLink","objectWithoutProperties","Sidebar","ANY_OTHER_ACTION","getTitle","getShortcut","consolidated","unregisterKeyboardHandler","react__WEBPACK_IMPORTED_MODULE_6__","_common_keyboardBinding_keyboardBinding__WEBPACK_IMPORTED_MODULE_8__","LocalizedStrings","en","appName","submit","storageTitle","uiHelp","addConnection","white","gray","red","maroon","yellow","olive","lime","green","aqua","teal","blue","navy","fuschia","purple","details","square","wide","tall","chooseFolder","select","pan","drawRectangle","drawPolygon","copyRectangle","cut","paste","previousAsset","nextAsset","escape","australiaEast","centralIndia","eastUs","eastUs2","japanEast","northCentralUs","northEurope","southCentralUs","southeastAsia","ukSouth","westUs2","westEurope","multiLabel","multiClass","new","existing","classification","preTrained","customFilePath","customWebUrl","profile","projectUploadError","genericRenderError","projectInvalidSecurityToken","projectInvalidJson","projectDeleteError","securityTokenNotFound","canvasError","importError","activeLearningPredictionError","outputJson","interpolateJson","names","vals","construct","_common_guard__WEBPACK_IMPORTED_MODULE_0__","node_int64__WEBPACK_IMPORTED_MODULE_1__","node_int64__WEBPACK_IMPORTED_MODULE_1___default","buffer_reverse__WEBPACK_IMPORTED_MODULE_2__","buffer_reverse__WEBPACK_IMPORTED_MODULE_2___default","table","crc","c","RangeError","pow","metadataBuffer","intArray","dataView","DataView","setUint32","value32","str","utf8","unescape","encodeURIComponent","charCodeAt","arr","decodeURIComponent","num","toNumber","_getAssetsForExport","getProjectAssets","getAllAssets","getAssetsFunc","KeyboardRegistrationManager","binding","keyCodes","eventTypeRegistrations","keyCode","currentBinding","OverloadedKeyBinding","keyEventTypeRegs","getHandler","createContext","KeyboardManager","nonSupportedKeys","inputElementTypes","onKeyboardEvent","isDisabled","invokeHandler","getKeyParts","KeyUp","KeyPress","Provider","keyParts","activeElement","ToolbarItemGroup","ExportProject","_ToolbarItem","infoId","SaveProject","Regions","Action","Navigation","Project","componentRegistry","_home_vsts_work_1_s_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_toConsumableArray__WEBPACK_IMPORTED_MODULE_0__","./azureBlobStorage.json","./azureBlobStorage.ui.json","./bingImageSearch.json","./bingImageSearch.ui.json","./localFileSystemProxy.json","./localFileSystemProxy.ui.json","floor","parts","getOwnPropertyNames","additionalEncodings","encodings","#","?","encodedURI","encodeURI","encrypted","encryptProviderOptions","decrypted","decryptProviderOptions","defaultProviderOptions","Deferred","promise","initialized","ipcRenderer","sender","deferred","pending","outgoingArgs"],"mappings":"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","file":"static/js/main.5b8da1bf.chunk.js","sourcesContent":["import { IAsset, IConnection } from \"../../models/applicationState\";\nimport Guard from \"../../common/guard\";\nimport getHostProcess, { HostProcessType } from \"../../common/hostProcess\";\n\n/**\n * Interface for VoTT Asset Providers\n * @member initialize - Initializes or validates provider based on options\n * @member getAssets - Retrieves assets from provider\n */\nexport interface IAssetProvider {\n    initialize?(): Promise<void>;\n    getAssets(containerName?: string): Promise<IAsset[]>;\n}\n\n/**\n * Options for Asset Providers\n * @member name - Name of Asset Provider\n * @member displayName - Display Name of Asset Provider\n * @member description - Description of Asset Provider\n * @member platformSupport - Platform(s) supported by asset provider (electron, browser)\n * @member factory - Function that instantiates provider\n */\nexport interface IAssetProviderRegistrationOptions {\n    name: string;\n    displayName: string;\n    description?: string;\n    platformSupport?: HostProcessType;\n    factory: (options?: any) => IAssetProvider;\n}\n\n/**\n * @name - Asset Provider Factory\n * @description - Creates instance of Asset Providers based on request provider type\n */\nexport class AssetProviderFactory {\n\n    /**\n     * @returns - Dictionary of registered Asset Providers\n     */\n    public static get providers() {\n        return { ...AssetProviderFactory.providerRegistry };\n    }\n\n    /**\n     * Register an Asset Provider based on options\n     * @param options - Asset Provider options\n     */\n    public static register(options: IAssetProviderRegistrationOptions);\n    /**\n     * Register Asset provider based on name and a factory\n     * @param name - Name of Asset Provider\n     * @param factory - Function that instantiates Asset Provider\n     */\n    public static register(name: string, factory: (options?: any) => IAssetProvider);\n\n    /**\n     * Register Asset provider based on name and a factory\n     * @param name - Name of Asset Provider\n     * @param factory - Function that instantiates Asset Provider\n     */\n    public static register(nameOrOptions: any, factory?: (options?: any) => IAssetProvider) {\n        Guard.null(nameOrOptions);\n\n        let options: IAssetProviderRegistrationOptions = nameOrOptions as IAssetProviderRegistrationOptions;\n\n        if (typeof (nameOrOptions) === \"string\") {\n            Guard.null(factory);\n\n            options = {\n                name: nameOrOptions,\n                displayName: nameOrOptions,\n                factory,\n            };\n        }\n\n        if (!options.platformSupport) {\n            options.platformSupport = HostProcessType.All;\n        }\n\n        if ((options.platformSupport & getHostProcess().type) === 0) {\n            return;\n        }\n\n        AssetProviderFactory.providerRegistry[options.name] = options;\n    }\n\n    /**\n     * Create Asset Provider from provider type and options specified in connection\n     * @param connection - Connection for an Asset Provider\n     */\n    public static createFromConnection(connection: IConnection): IAssetProvider {\n        return this.create(connection.providerType, connection.providerOptions);\n    }\n\n    /**\n     * Create Asset Provider from registered Asset Provider name and options\n     * @param name - Name of Asset Provider\n     * @param options - Options for Asset Provider\n     */\n    public static create(name: string, options?: any): IAssetProvider {\n        Guard.empty(name);\n\n        const registrationOptions = AssetProviderFactory.providerRegistry[name];\n        if (!registrationOptions) {\n            throw new Error(`No asset provider has been registered with name '${name}'`);\n        }\n\n        return registrationOptions.factory(options);\n    }\n\n    private static providerRegistry: { [id: string]: IAssetProviderRegistrationOptions } = {};\n}\n","/**\n * Constants used throughout application\n */\nexport const constants = {\n    projectFileExtension: \".vott\",\n    assetMetadataFileExtension: \"-asset.json\",\n    exportFileExtension: \"-export.json\",\n};\n","var map = {\n\t\"./azureCustomVision.json\": 1181,\n\t\"./azureCustomVision.ui.json\": 556,\n\t\"./cntk.json\": 1182,\n\t\"./cntk.ui.json\": 557,\n\t\"./csv.json\": 1183,\n\t\"./csv.ui.json\": 558,\n\t\"./pascalVOC.json\": 1184,\n\t\"./pascalVOC.ui.json\": 559,\n\t\"./tensorFlowRecords.json\": 1185,\n\t\"./tensorFlowRecords.ui.json\": 560,\n\t\"./vottJson.json\": 1186,\n\t\"./vottJson.ui.json\": 561\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tvar id = map[req];\n\tif(!(id + 1)) { // check for number or string\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn id;\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 1180;","var map = {\n\t\"./azureCustomVision.ui.json\": 556,\n\t\"./cntk.ui.json\": 557,\n\t\"./csv.ui.json\": 558,\n\t\"./pascalVOC.ui.json\": 559,\n\t\"./tensorFlowRecords.ui.json\": 560,\n\t\"./vottJson.ui.json\": 561\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tvar id = map[req];\n\tif(!(id + 1)) { // check for number or string\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn id;\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 1187;","/* eslint-disable */\n\n/**\n * @fileoverview\n * @enhanceable\n * @suppress {messageConventions} JS Compiler reports an error if a variable or\n *     field starts with 'MSG_' and isn't a translatable message.\n * @public\n */\n// GENERATED CODE -- DO NOT EDIT!\n\nvar jspb = require('google-protobuf');\nvar goog = jspb;\nvar global = Function('return this')();\n\ngoog.exportSymbol('proto.tensorflow.BytesList', null, global);\ngoog.exportSymbol('proto.tensorflow.Feature', null, global);\ngoog.exportSymbol('proto.tensorflow.FeatureList', null, global);\ngoog.exportSymbol('proto.tensorflow.FeatureLists', null, global);\ngoog.exportSymbol('proto.tensorflow.Features', null, global);\ngoog.exportSymbol('proto.tensorflow.FloatList', null, global);\ngoog.exportSymbol('proto.tensorflow.Int64List', null, global);\ngoog.exportSymbol('proto.tensorflow.TFRecordsImageMessage', null, global);\n\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.tensorflow.BytesList = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, proto.tensorflow.BytesList.repeatedFields_, null);\n};\ngoog.inherits(proto.tensorflow.BytesList, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  proto.tensorflow.BytesList.displayName = 'proto.tensorflow.BytesList';\n}\n/**\n * List of repeated fields within this message type.\n * @private {!Array<number>}\n * @const\n */\nproto.tensorflow.BytesList.repeatedFields_ = [1];\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto suitable for use in Soy templates.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.\n * @param {boolean=} opt_includeInstance Whether to include the JSPB instance\n *     for transitional soy proto support: http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.tensorflow.BytesList.prototype.toObject = function(opt_includeInstance) {\n  return proto.tensorflow.BytesList.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Whether to include the JSPB\n *     instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.tensorflow.BytesList} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.tensorflow.BytesList.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    valueList: msg.getValueList_asB64()\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.tensorflow.BytesList}\n */\nproto.tensorflow.BytesList.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.tensorflow.BytesList;\n  return proto.tensorflow.BytesList.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.tensorflow.BytesList} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.tensorflow.BytesList}\n */\nproto.tensorflow.BytesList.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {!Uint8Array} */ (reader.readBytes());\n      msg.addValue(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.tensorflow.BytesList.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.tensorflow.BytesList.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.tensorflow.BytesList} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.tensorflow.BytesList.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getValueList_asU8();\n  if (f.length > 0) {\n    writer.writeRepeatedBytes(\n      1,\n      f\n    );\n  }\n};\n\n\n/**\n * repeated bytes value = 1;\n * @return {!(Array<!Uint8Array>|Array<string>)}\n */\nproto.tensorflow.BytesList.prototype.getValueList = function() {\n  return /** @type {!(Array<!Uint8Array>|Array<string>)} */ (jspb.Message.getRepeatedField(this, 1));\n};\n\n\n/**\n * repeated bytes value = 1;\n * This is a type-conversion wrapper around `getValueList()`\n * @return {!Array<string>}\n */\nproto.tensorflow.BytesList.prototype.getValueList_asB64 = function() {\n  return /** @type {!Array<string>} */ (jspb.Message.bytesListAsB64(\n      this.getValueList()));\n};\n\n\n/**\n * repeated bytes value = 1;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getValueList()`\n * @return {!Array<!Uint8Array>}\n */\nproto.tensorflow.BytesList.prototype.getValueList_asU8 = function() {\n  return /** @type {!Array<!Uint8Array>} */ (jspb.Message.bytesListAsU8(\n      this.getValueList()));\n};\n\n\n/** @param {!(Array<!Uint8Array>|Array<string>)} value */\nproto.tensorflow.BytesList.prototype.setValueList = function(value) {\n  jspb.Message.setField(this, 1, value || []);\n};\n\n\n/**\n * @param {!(string|Uint8Array)} value\n * @param {number=} opt_index\n */\nproto.tensorflow.BytesList.prototype.addValue = function(value, opt_index) {\n  jspb.Message.addToRepeatedField(this, 1, value, opt_index);\n};\n\n\nproto.tensorflow.BytesList.prototype.clearValueList = function() {\n  this.setValueList([]);\n};\n\n\n\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.tensorflow.FloatList = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, proto.tensorflow.FloatList.repeatedFields_, null);\n};\ngoog.inherits(proto.tensorflow.FloatList, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  proto.tensorflow.FloatList.displayName = 'proto.tensorflow.FloatList';\n}\n/**\n * List of repeated fields within this message type.\n * @private {!Array<number>}\n * @const\n */\nproto.tensorflow.FloatList.repeatedFields_ = [1];\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto suitable for use in Soy templates.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.\n * @param {boolean=} opt_includeInstance Whether to include the JSPB instance\n *     for transitional soy proto support: http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.tensorflow.FloatList.prototype.toObject = function(opt_includeInstance) {\n  return proto.tensorflow.FloatList.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Whether to include the JSPB\n *     instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.tensorflow.FloatList} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.tensorflow.FloatList.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    valueList: jspb.Message.getRepeatedFloatingPointField(msg, 1)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.tensorflow.FloatList}\n */\nproto.tensorflow.FloatList.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.tensorflow.FloatList;\n  return proto.tensorflow.FloatList.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.tensorflow.FloatList} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.tensorflow.FloatList}\n */\nproto.tensorflow.FloatList.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {!Array<number>} */ (reader.readPackedFloat());\n      msg.setValueList(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.tensorflow.FloatList.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.tensorflow.FloatList.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.tensorflow.FloatList} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.tensorflow.FloatList.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getValueList();\n  if (f.length > 0) {\n    writer.writePackedFloat(\n      1,\n      f\n    );\n  }\n};\n\n\n/**\n * repeated float value = 1;\n * @return {!Array<number>}\n */\nproto.tensorflow.FloatList.prototype.getValueList = function() {\n  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 1));\n};\n\n\n/** @param {!Array<number>} value */\nproto.tensorflow.FloatList.prototype.setValueList = function(value) {\n  jspb.Message.setField(this, 1, value || []);\n};\n\n\n/**\n * @param {!number} value\n * @param {number=} opt_index\n */\nproto.tensorflow.FloatList.prototype.addValue = function(value, opt_index) {\n  jspb.Message.addToRepeatedField(this, 1, value, opt_index);\n};\n\n\nproto.tensorflow.FloatList.prototype.clearValueList = function() {\n  this.setValueList([]);\n};\n\n\n\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.tensorflow.Int64List = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, proto.tensorflow.Int64List.repeatedFields_, null);\n};\ngoog.inherits(proto.tensorflow.Int64List, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  proto.tensorflow.Int64List.displayName = 'proto.tensorflow.Int64List';\n}\n/**\n * List of repeated fields within this message type.\n * @private {!Array<number>}\n * @const\n */\nproto.tensorflow.Int64List.repeatedFields_ = [1];\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto suitable for use in Soy templates.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.\n * @param {boolean=} opt_includeInstance Whether to include the JSPB instance\n *     for transitional soy proto support: http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.tensorflow.Int64List.prototype.toObject = function(opt_includeInstance) {\n  return proto.tensorflow.Int64List.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Whether to include the JSPB\n *     instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.tensorflow.Int64List} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.tensorflow.Int64List.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    valueList: jspb.Message.getRepeatedField(msg, 1)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.tensorflow.Int64List}\n */\nproto.tensorflow.Int64List.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.tensorflow.Int64List;\n  return proto.tensorflow.Int64List.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.tensorflow.Int64List} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.tensorflow.Int64List}\n */\nproto.tensorflow.Int64List.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {!Array<number>} */ (reader.readPackedInt64());\n      msg.setValueList(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.tensorflow.Int64List.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.tensorflow.Int64List.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.tensorflow.Int64List} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.tensorflow.Int64List.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getValueList();\n  if (f.length > 0) {\n    writer.writePackedInt64(\n      1,\n      f\n    );\n  }\n};\n\n\n/**\n * repeated int64 value = 1;\n * @return {!Array<number>}\n */\nproto.tensorflow.Int64List.prototype.getValueList = function() {\n  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 1));\n};\n\n\n/** @param {!Array<number>} value */\nproto.tensorflow.Int64List.prototype.setValueList = function(value) {\n  jspb.Message.setField(this, 1, value || []);\n};\n\n\n/**\n * @param {!number} value\n * @param {number=} opt_index\n */\nproto.tensorflow.Int64List.prototype.addValue = function(value, opt_index) {\n  jspb.Message.addToRepeatedField(this, 1, value, opt_index);\n};\n\n\nproto.tensorflow.Int64List.prototype.clearValueList = function() {\n  this.setValueList([]);\n};\n\n\n\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.tensorflow.Feature = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.tensorflow.Feature.oneofGroups_);\n};\ngoog.inherits(proto.tensorflow.Feature, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  proto.tensorflow.Feature.displayName = 'proto.tensorflow.Feature';\n}\n/**\n * Oneof group definitions for this message. Each group defines the field\n * numbers belonging to that group. When of these fields' value is set, all\n * other fields in the group are cleared. During deserialization, if multiple\n * fields are encountered for a group, only the last value seen will be kept.\n * @private {!Array<!Array<number>>}\n * @const\n */\nproto.tensorflow.Feature.oneofGroups_ = [[1,2,3]];\n\n/**\n * @enum {number}\n */\nproto.tensorflow.Feature.KindCase = {\n  KIND_NOT_SET: 0,\n  BYTES_LIST: 1,\n  FLOAT_LIST: 2,\n  INT64_LIST: 3\n};\n\n/**\n * @return {proto.tensorflow.Feature.KindCase}\n */\nproto.tensorflow.Feature.prototype.getKindCase = function() {\n  return /** @type {proto.tensorflow.Feature.KindCase} */(jspb.Message.computeOneofCase(this, proto.tensorflow.Feature.oneofGroups_[0]));\n};\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto suitable for use in Soy templates.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.\n * @param {boolean=} opt_includeInstance Whether to include the JSPB instance\n *     for transitional soy proto support: http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.tensorflow.Feature.prototype.toObject = function(opt_includeInstance) {\n  return proto.tensorflow.Feature.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Whether to include the JSPB\n *     instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.tensorflow.Feature} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.tensorflow.Feature.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    bytesList: (f = msg.getBytesList()) && proto.tensorflow.BytesList.toObject(includeInstance, f),\n    floatList: (f = msg.getFloatList()) && proto.tensorflow.FloatList.toObject(includeInstance, f),\n    int64List: (f = msg.getInt64List()) && proto.tensorflow.Int64List.toObject(includeInstance, f)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.tensorflow.Feature}\n */\nproto.tensorflow.Feature.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.tensorflow.Feature;\n  return proto.tensorflow.Feature.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.tensorflow.Feature} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.tensorflow.Feature}\n */\nproto.tensorflow.Feature.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = new proto.tensorflow.BytesList;\n      reader.readMessage(value,proto.tensorflow.BytesList.deserializeBinaryFromReader);\n      msg.setBytesList(value);\n      break;\n    case 2:\n      var value = new proto.tensorflow.FloatList;\n      reader.readMessage(value,proto.tensorflow.FloatList.deserializeBinaryFromReader);\n      msg.setFloatList(value);\n      break;\n    case 3:\n      var value = new proto.tensorflow.Int64List;\n      reader.readMessage(value,proto.tensorflow.Int64List.deserializeBinaryFromReader);\n      msg.setInt64List(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.tensorflow.Feature.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.tensorflow.Feature.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.tensorflow.Feature} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.tensorflow.Feature.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getBytesList();\n  if (f != null) {\n    writer.writeMessage(\n      1,\n      f,\n      proto.tensorflow.BytesList.serializeBinaryToWriter\n    );\n  }\n  f = message.getFloatList();\n  if (f != null) {\n    writer.writeMessage(\n      2,\n      f,\n      proto.tensorflow.FloatList.serializeBinaryToWriter\n    );\n  }\n  f = message.getInt64List();\n  if (f != null) {\n    writer.writeMessage(\n      3,\n      f,\n      proto.tensorflow.Int64List.serializeBinaryToWriter\n    );\n  }\n};\n\n\n/**\n * optional BytesList bytes_list = 1;\n * @return {?proto.tensorflow.BytesList}\n */\nproto.tensorflow.Feature.prototype.getBytesList = function() {\n  return /** @type{?proto.tensorflow.BytesList} */ (\n    jspb.Message.getWrapperField(this, proto.tensorflow.BytesList, 1));\n};\n\n\n/** @param {?proto.tensorflow.BytesList|undefined} value */\nproto.tensorflow.Feature.prototype.setBytesList = function(value) {\n  jspb.Message.setOneofWrapperField(this, 1, proto.tensorflow.Feature.oneofGroups_[0], value);\n};\n\n\nproto.tensorflow.Feature.prototype.clearBytesList = function() {\n  this.setBytesList(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {!boolean}\n */\nproto.tensorflow.Feature.prototype.hasBytesList = function() {\n  return jspb.Message.getField(this, 1) != null;\n};\n\n\n/**\n * optional FloatList float_list = 2;\n * @return {?proto.tensorflow.FloatList}\n */\nproto.tensorflow.Feature.prototype.getFloatList = function() {\n  return /** @type{?proto.tensorflow.FloatList} */ (\n    jspb.Message.getWrapperField(this, proto.tensorflow.FloatList, 2));\n};\n\n\n/** @param {?proto.tensorflow.FloatList|undefined} value */\nproto.tensorflow.Feature.prototype.setFloatList = function(value) {\n  jspb.Message.setOneofWrapperField(this, 2, proto.tensorflow.Feature.oneofGroups_[0], value);\n};\n\n\nproto.tensorflow.Feature.prototype.clearFloatList = function() {\n  this.setFloatList(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {!boolean}\n */\nproto.tensorflow.Feature.prototype.hasFloatList = function() {\n  return jspb.Message.getField(this, 2) != null;\n};\n\n\n/**\n * optional Int64List int64_list = 3;\n * @return {?proto.tensorflow.Int64List}\n */\nproto.tensorflow.Feature.prototype.getInt64List = function() {\n  return /** @type{?proto.tensorflow.Int64List} */ (\n    jspb.Message.getWrapperField(this, proto.tensorflow.Int64List, 3));\n};\n\n\n/** @param {?proto.tensorflow.Int64List|undefined} value */\nproto.tensorflow.Feature.prototype.setInt64List = function(value) {\n  jspb.Message.setOneofWrapperField(this, 3, proto.tensorflow.Feature.oneofGroups_[0], value);\n};\n\n\nproto.tensorflow.Feature.prototype.clearInt64List = function() {\n  this.setInt64List(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {!boolean}\n */\nproto.tensorflow.Feature.prototype.hasInt64List = function() {\n  return jspb.Message.getField(this, 3) != null;\n};\n\n\n\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.tensorflow.Features = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.tensorflow.Features, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  proto.tensorflow.Features.displayName = 'proto.tensorflow.Features';\n}\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto suitable for use in Soy templates.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.\n * @param {boolean=} opt_includeInstance Whether to include the JSPB instance\n *     for transitional soy proto support: http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.tensorflow.Features.prototype.toObject = function(opt_includeInstance) {\n  return proto.tensorflow.Features.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Whether to include the JSPB\n *     instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.tensorflow.Features} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.tensorflow.Features.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    featureMap: (f = msg.getFeatureMap()) ? f.toObject(includeInstance, proto.tensorflow.Feature.toObject) : []\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.tensorflow.Features}\n */\nproto.tensorflow.Features.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.tensorflow.Features;\n  return proto.tensorflow.Features.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.tensorflow.Features} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.tensorflow.Features}\n */\nproto.tensorflow.Features.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = msg.getFeatureMap();\n      reader.readMessage(value, function(message, reader) {\n        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.tensorflow.Feature.deserializeBinaryFromReader, \"\");\n         });\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.tensorflow.Features.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.tensorflow.Features.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.tensorflow.Features} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.tensorflow.Features.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getFeatureMap(true);\n  if (f && f.getLength() > 0) {\n    f.serializeBinary(1, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.tensorflow.Feature.serializeBinaryToWriter);\n  }\n};\n\n\n/**\n * map<string, Feature> feature = 1;\n * @param {boolean=} opt_noLazyCreate Do not create the map if\n * empty, instead returning `undefined`\n * @return {!jspb.Map<string,!proto.tensorflow.Feature>}\n */\nproto.tensorflow.Features.prototype.getFeatureMap = function(opt_noLazyCreate) {\n  return /** @type {!jspb.Map<string,!proto.tensorflow.Feature>} */ (\n      jspb.Message.getMapField(this, 1, opt_noLazyCreate,\n      proto.tensorflow.Feature));\n};\n\n\nproto.tensorflow.Features.prototype.clearFeatureMap = function() {\n  this.getFeatureMap().clear();\n};\n\n\n\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.tensorflow.FeatureList = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, proto.tensorflow.FeatureList.repeatedFields_, null);\n};\ngoog.inherits(proto.tensorflow.FeatureList, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  proto.tensorflow.FeatureList.displayName = 'proto.tensorflow.FeatureList';\n}\n/**\n * List of repeated fields within this message type.\n * @private {!Array<number>}\n * @const\n */\nproto.tensorflow.FeatureList.repeatedFields_ = [1];\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto suitable for use in Soy templates.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.\n * @param {boolean=} opt_includeInstance Whether to include the JSPB instance\n *     for transitional soy proto support: http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.tensorflow.FeatureList.prototype.toObject = function(opt_includeInstance) {\n  return proto.tensorflow.FeatureList.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Whether to include the JSPB\n *     instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.tensorflow.FeatureList} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.tensorflow.FeatureList.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    featureList: jspb.Message.toObjectList(msg.getFeatureList(),\n    proto.tensorflow.Feature.toObject, includeInstance)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.tensorflow.FeatureList}\n */\nproto.tensorflow.FeatureList.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.tensorflow.FeatureList;\n  return proto.tensorflow.FeatureList.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.tensorflow.FeatureList} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.tensorflow.FeatureList}\n */\nproto.tensorflow.FeatureList.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = new proto.tensorflow.Feature;\n      reader.readMessage(value,proto.tensorflow.Feature.deserializeBinaryFromReader);\n      msg.addFeature(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.tensorflow.FeatureList.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.tensorflow.FeatureList.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.tensorflow.FeatureList} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.tensorflow.FeatureList.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getFeatureList();\n  if (f.length > 0) {\n    writer.writeRepeatedMessage(\n      1,\n      f,\n      proto.tensorflow.Feature.serializeBinaryToWriter\n    );\n  }\n};\n\n\n/**\n * repeated Feature feature = 1;\n * @return {!Array<!proto.tensorflow.Feature>}\n */\nproto.tensorflow.FeatureList.prototype.getFeatureList = function() {\n  return /** @type{!Array<!proto.tensorflow.Feature>} */ (\n    jspb.Message.getRepeatedWrapperField(this, proto.tensorflow.Feature, 1));\n};\n\n\n/** @param {!Array<!proto.tensorflow.Feature>} value */\nproto.tensorflow.FeatureList.prototype.setFeatureList = function(value) {\n  jspb.Message.setRepeatedWrapperField(this, 1, value);\n};\n\n\n/**\n * @param {!proto.tensorflow.Feature=} opt_value\n * @param {number=} opt_index\n * @return {!proto.tensorflow.Feature}\n */\nproto.tensorflow.FeatureList.prototype.addFeature = function(opt_value, opt_index) {\n  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.tensorflow.Feature, opt_index);\n};\n\n\nproto.tensorflow.FeatureList.prototype.clearFeatureList = function() {\n  this.setFeatureList([]);\n};\n\n\n\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.tensorflow.FeatureLists = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.tensorflow.FeatureLists, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  proto.tensorflow.FeatureLists.displayName = 'proto.tensorflow.FeatureLists';\n}\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto suitable for use in Soy templates.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.\n * @param {boolean=} opt_includeInstance Whether to include the JSPB instance\n *     for transitional soy proto support: http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.tensorflow.FeatureLists.prototype.toObject = function(opt_includeInstance) {\n  return proto.tensorflow.FeatureLists.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Whether to include the JSPB\n *     instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.tensorflow.FeatureLists} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.tensorflow.FeatureLists.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    featureListMap: (f = msg.getFeatureListMap()) ? f.toObject(includeInstance, proto.tensorflow.FeatureList.toObject) : []\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.tensorflow.FeatureLists}\n */\nproto.tensorflow.FeatureLists.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.tensorflow.FeatureLists;\n  return proto.tensorflow.FeatureLists.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.tensorflow.FeatureLists} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.tensorflow.FeatureLists}\n */\nproto.tensorflow.FeatureLists.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = msg.getFeatureListMap();\n      reader.readMessage(value, function(message, reader) {\n        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.tensorflow.FeatureList.deserializeBinaryFromReader, \"\");\n         });\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.tensorflow.FeatureLists.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.tensorflow.FeatureLists.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.tensorflow.FeatureLists} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.tensorflow.FeatureLists.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getFeatureListMap(true);\n  if (f && f.getLength() > 0) {\n    f.serializeBinary(1, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.tensorflow.FeatureList.serializeBinaryToWriter);\n  }\n};\n\n\n/**\n * map<string, FeatureList> feature_list = 1;\n * @param {boolean=} opt_noLazyCreate Do not create the map if\n * empty, instead returning `undefined`\n * @return {!jspb.Map<string,!proto.tensorflow.FeatureList>}\n */\nproto.tensorflow.FeatureLists.prototype.getFeatureListMap = function(opt_noLazyCreate) {\n  return /** @type {!jspb.Map<string,!proto.tensorflow.FeatureList>} */ (\n      jspb.Message.getMapField(this, 1, opt_noLazyCreate,\n      proto.tensorflow.FeatureList));\n};\n\n\nproto.tensorflow.FeatureLists.prototype.clearFeatureListMap = function() {\n  this.getFeatureListMap().clear();\n};\n\n\n\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.tensorflow.TFRecordsImageMessage = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.tensorflow.TFRecordsImageMessage, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  proto.tensorflow.TFRecordsImageMessage.displayName = 'proto.tensorflow.TFRecordsImageMessage';\n}\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto suitable for use in Soy templates.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.\n * @param {boolean=} opt_includeInstance Whether to include the JSPB instance\n *     for transitional soy proto support: http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.tensorflow.TFRecordsImageMessage.prototype.toObject = function(opt_includeInstance) {\n  return proto.tensorflow.TFRecordsImageMessage.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Whether to include the JSPB\n *     instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.tensorflow.TFRecordsImageMessage} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.tensorflow.TFRecordsImageMessage.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    context: (f = msg.getContext()) && proto.tensorflow.Features.toObject(includeInstance, f),\n    featureLists: (f = msg.getFeatureLists()) && proto.tensorflow.FeatureLists.toObject(includeInstance, f)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.tensorflow.TFRecordsImageMessage}\n */\nproto.tensorflow.TFRecordsImageMessage.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.tensorflow.TFRecordsImageMessage;\n  return proto.tensorflow.TFRecordsImageMessage.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.tensorflow.TFRecordsImageMessage} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.tensorflow.TFRecordsImageMessage}\n */\nproto.tensorflow.TFRecordsImageMessage.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = new proto.tensorflow.Features;\n      reader.readMessage(value,proto.tensorflow.Features.deserializeBinaryFromReader);\n      msg.setContext(value);\n      break;\n    case 2:\n      var value = new proto.tensorflow.FeatureLists;\n      reader.readMessage(value,proto.tensorflow.FeatureLists.deserializeBinaryFromReader);\n      msg.setFeatureLists(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.tensorflow.TFRecordsImageMessage.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.tensorflow.TFRecordsImageMessage.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.tensorflow.TFRecordsImageMessage} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.tensorflow.TFRecordsImageMessage.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getContext();\n  if (f != null) {\n    writer.writeMessage(\n      1,\n      f,\n      proto.tensorflow.Features.serializeBinaryToWriter\n    );\n  }\n  f = message.getFeatureLists();\n  if (f != null) {\n    writer.writeMessage(\n      2,\n      f,\n      proto.tensorflow.FeatureLists.serializeBinaryToWriter\n    );\n  }\n};\n\n\n/**\n * optional Features context = 1;\n * @return {?proto.tensorflow.Features}\n */\nproto.tensorflow.TFRecordsImageMessage.prototype.getContext = function() {\n  return /** @type{?proto.tensorflow.Features} */ (\n    jspb.Message.getWrapperField(this, proto.tensorflow.Features, 1));\n};\n\n\n/** @param {?proto.tensorflow.Features|undefined} value */\nproto.tensorflow.TFRecordsImageMessage.prototype.setContext = function(value) {\n  jspb.Message.setWrapperField(this, 1, value);\n};\n\n\nproto.tensorflow.TFRecordsImageMessage.prototype.clearContext = function() {\n  this.setContext(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {!boolean}\n */\nproto.tensorflow.TFRecordsImageMessage.prototype.hasContext = function() {\n  return jspb.Message.getField(this, 1) != null;\n};\n\n\n/**\n * optional FeatureLists feature_lists = 2;\n * @return {?proto.tensorflow.FeatureLists}\n */\nproto.tensorflow.TFRecordsImageMessage.prototype.getFeatureLists = function() {\n  return /** @type{?proto.tensorflow.FeatureLists} */ (\n    jspb.Message.getWrapperField(this, proto.tensorflow.FeatureLists, 2));\n};\n\n\n/** @param {?proto.tensorflow.FeatureLists|undefined} value */\nproto.tensorflow.TFRecordsImageMessage.prototype.setFeatureLists = function(value) {\n  jspb.Message.setWrapperField(this, 2, value);\n};\n\n\nproto.tensorflow.TFRecordsImageMessage.prototype.clearFeatureLists = function() {\n  this.setFeatureLists(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {!boolean}\n */\nproto.tensorflow.TFRecordsImageMessage.prototype.hasFeatureLists = function() {\n  return jspb.Message.getField(this, 2) != null;\n};\n\n\ngoog.object.extend(exports, proto.tensorflow);\n","// tslint:disable-next-line:no-var-requires\nconst packageJson = require(\"../../package.json\");\n\n/**\n * Defines the application information\n */\nexport interface IAppInfo {\n    /** The app name */\n    name: string;\n    /** The app version */\n    version: string;\n    /** The app description */\n    description: string;\n}\n\n/**\n * Gets current application info\n */\nexport const appInfo = packageJson as IAppInfo;\n","import { KeyboardContext, IKeyboardContext, KeyEventType } from \"../keyboardManager/keyboardManager\";\nimport React from \"react\";\n\n/**\n * Properties needed for a keyboard binding\n */\nexport interface IKeyboardBindingProps {\n    /** Keys that the action is bound to */\n    accelerators: string[];\n    /** Friendly name for keyboard binding for display in help menu */\n    displayName: string;\n    /** Action to trigger upon key event */\n    handler: (evt?: KeyboardEvent) => void;\n    /** Type of key event (keypress, keyup, keydown) */\n    keyEventType?: KeyEventType;\n    /** Icon to display in help menu */\n    icon?: string;\n}\n\nexport class KeyboardBinding extends React.Component<IKeyboardBindingProps> {\n    public static contextType = KeyboardContext;\n    public context!: IKeyboardContext;\n    private deregisterBinding: () => void;\n\n    public componentDidMount() {\n        if (this.context && this.context.keyboard) {\n            this.deregisterBinding = this.context.keyboard.registerBinding(this.props);\n        } else {\n            console.warn(\"Keyboard Mananger context cannot be found - Keyboard binding has NOT been set.\");\n        }\n    }\n\n    public componentWillUnmount() {\n        if (this.deregisterBinding) {\n            this.deregisterBinding();\n        }\n    }\n\n    public render() {\n        return null;\n    }\n}\n","export class Env {\n    public static get() {\n        return process.env.NODE_ENV;\n    }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\ninterface IConfig {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n}\n\nexport function register(config?: IConfig) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href,\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit http://bit.ly/CRA-PWA\",\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: IConfig) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See http://bit.ly/CRA-PWA.\",\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: IConfig) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\",\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import _ from \"lodash\";\nimport { ActionTypes } from \"../actions/actionTypes\";\nimport { IProject, ITag } from \"../../models/applicationState\";\nimport { AnyAction } from \"../actions/actionCreators\";\n// tslint:disable-next-line:no-var-requires\nconst tagColors = require(\"../../react/components/common/tagColors.json\");\n\n/**\n * Reducer for project. Actions handled:\n * DELETE_PROJECT_SUCCESS\n * CLOSE_PROJECT_SUCCESS\n * LOAD_PROJECT_SUCCESS\n * SAVE_PROJECT_SUCCESS\n * LOAD_PROJECT_ASSETS_SUCCESS\n * SAVE_ASSET_METADATA_SUCCESS\n * @param state - Current project\n * @param action - Action that was dispatched\n */\nexport const reducer = (state: IProject = null, action: AnyAction): IProject => {\n    switch (action.type) {\n        case ActionTypes.DELETE_PROJECT_SUCCESS:\n        case ActionTypes.CLOSE_PROJECT_SUCCESS:\n            return null;\n        case ActionTypes.LOAD_PROJECT_SUCCESS:\n            return { ...action.payload };\n        case ActionTypes.LOAD_ASSET_METADATA_SUCCESS:\n            if (!state) {\n                return state;\n            }\n\n            return {\n                ...state,\n                lastVisitedAssetId: action.payload.asset.id,\n            };\n        case ActionTypes.SAVE_ASSET_METADATA_SUCCESS:\n            if (!state) {\n                return state;\n            }\n\n            const updatedAssets = { ...state.assets } || {};\n            updatedAssets[action.payload.asset.id] = { ...action.payload.asset };\n\n            const assetTags = new Set();\n            action.payload.regions.forEach((region) => region.tags.forEach((tag) => assetTags.add(tag)));\n\n            const newTags: ITag[] = state.tags ? [...state.tags] : [];\n            let updateTags = false;\n\n            assetTags.forEach((tag) => {\n                if (!state.tags || state.tags.length === 0 ||\n                    !state.tags.find((projectTag) => tag === projectTag.name)) {\n                    newTags.push({\n                        name: tag,\n                        color: tagColors[newTags.length % tagColors.length],\n                    });\n                    updateTags = true;\n                }\n            });\n\n            if (updateTags) {\n                return {\n                    ...state,\n                    tags: newTags,\n                    assets: updatedAssets,\n                };\n            }\n\n            return {\n                ...state,\n                assets: updatedAssets,\n            };\n        case ActionTypes.SAVE_CONNECTION_SUCCESS:\n            if (!state) {\n                return state;\n            }\n\n            return {\n                ...state,\n                sourceConnection: state.sourceConnection.id === action.payload.id\n                    ? { ...action.payload }\n                    : state.sourceConnection,\n                targetConnection: state.targetConnection.id === action.payload.id\n                    ? { ...action.payload }\n                    : state.targetConnection,\n            };\n        default:\n            return state;\n    }\n};\n","import { combineReducers } from \"redux\";\nimport * as appSettings from \"./applicationReducer\";\nimport * as connections from \"./connectionsReducer\";\nimport * as currentProject from \"./currentProjectReducer\";\nimport * as recentProjects from \"./recentProjectsReducer\";\nimport * as appError from \"./appErrorReducer\";\n\n/**\n * All application reducers\n * @member appSettings - Application Settings reducer\n * @member connections - Connections reducer\n * @member recentProjects - Recent Projects reducer\n * @member currentProject - Current Project reducer\n */\nexport default combineReducers({\n    appSettings: appSettings.reducer,\n    connections: connections.reducer,\n    recentProjects: recentProjects.reducer,\n    currentProject: currentProject.reducer,\n    appError: appError.reducer,\n});\n","import { ActionTypes } from \"../actions/actionTypes\";\nimport { IAppSettings } from \"../../models/applicationState\";\nimport { AnyAction } from \"../actions/actionCreators\";\n\n/**\n * Reducer for application settings. Actions handled:\n * TOGGLE_DEV_TOOLS_SUCCESS\n * REFRESH_APP_SUCCESS\n * @param state - Current app settings\n * @param action - Action that was dispatched\n */\nexport const reducer = (state: IAppSettings = null, action: AnyAction): IAppSettings => {\n    switch (action.type) {\n        case ActionTypes.TOGGLE_DEV_TOOLS_SUCCESS:\n            return { ...state, devToolsEnabled: action.payload };\n        case ActionTypes.REFRESH_APP_SUCCESS:\n            return { ...state };\n        case ActionTypes.SAVE_APP_SETTINGS_SUCCESS:\n            return { ...action.payload };\n        case ActionTypes.ENSURE_SECURITY_TOKEN_SUCCESS:\n            return { ...action.payload };\n        default:\n            return state;\n    }\n};\n","import _ from \"lodash\";\nimport { ActionTypes } from \"../actions/actionTypes\";\nimport { IConnection } from \"../../models/applicationState\";\nimport { AnyAction } from \"../actions/actionCreators\";\n\n/**\n * Reducer for application connections. Actions handled:\n * SAVE_CONNECTION_SUCCESS\n * DELETE_CONNECTION_SUCCESS\n * LOAD_PROJECT_SUCCESS\n * @param state - Current array of connections\n * @param action - Action that was dispatched\n */\nexport const reducer = (state: IConnection[] = [], action: AnyAction): IConnection[] => {\n    if (!state) {\n        state = [];\n    }\n\n    switch (action.type) {\n        case ActionTypes.SAVE_CONNECTION_SUCCESS:\n            return [\n                { ...action.payload },\n                ...state.filter((connection) => connection.id !== action.payload.id),\n            ];\n        case ActionTypes.DELETE_CONNECTION_SUCCESS:\n            return [...state.filter((connection) => connection.id !== action.payload.id)];\n        case ActionTypes.LOAD_PROJECT_SUCCESS:\n            const isSourceTargetEqual = action.payload.sourceConnection.id === action.payload.targetConnection.id;\n            if (isSourceTargetEqual) {\n                return [\n                    { ...action.payload.sourceConnection },\n                    ...state.filter((connection) => connection.id !== action.payload.sourceConnection.id),\n                ];\n            }\n\n            return [\n                { ...action.payload.sourceConnection },\n                { ...action.payload.targetConnection },\n                ...state.filter((connection) => {\n                    return connection.id !== action.payload.sourceConnection.id &&\n                        connection.id !== action.payload.targetConnection.id;\n                })];\n        default:\n            return state;\n    }\n};\n","import _ from \"lodash\";\nimport { ActionTypes } from \"../actions/actionTypes\";\nimport { IProject } from \"../../models/applicationState\";\nimport { AnyAction } from \"../actions/actionCreators\";\n\n/**\n * Reducer for recent projects. Actions handled:\n * LOAD_PROJECT_SUCCESS\n * SAVE_PROJECT_SUCCESS\n * DELETE_PROJECT_SUCCESS\n * SAVE_CONNECTION_SUCCESS\n * @param state - Array of recent projects\n * @param action - Action that was dispatched\n */\nexport const reducer = (state: IProject[] = [], action: AnyAction): IProject[] => {\n    if (!state) {\n        state = [];\n    }\n\n    let newState: IProject[] = null;\n\n    switch (action.type) {\n        case ActionTypes.SAVE_PROJECT_SUCCESS:\n            return [\n                { ...action.payload },\n                ...state.filter((project) => project.id !== action.payload.id),\n            ];\n        case ActionTypes.DELETE_PROJECT_SUCCESS:\n            return [...state.filter((project) => project.id !== action.payload.id)];\n        case ActionTypes.SAVE_CONNECTION_SUCCESS:\n            newState = state.map((project) => {\n                const updatedProject = { ...project };\n                if (project.sourceConnection.id === action.payload.id) {\n                    updatedProject.sourceConnection = { ...action.payload };\n                }\n                if (project.targetConnection.id === action.payload.id) {\n                    updatedProject.targetConnection = { ...action.payload };\n                }\n                return updatedProject;\n            });\n            return newState;\n        default:\n            return state;\n    }\n};\n","import { ActionTypes } from \"../actions/actionTypes\";\nimport { AnyAction } from \"../actions/actionCreators\";\nimport { IAppError } from \"../../models/applicationState\";\n\n/**\n * App Error Reducer\n * Actions handled:\n *  SHOW_ERROR\n *  CLEAR_ERROR\n * @param {IAppError} state\n * @param {AnyAction} action\n * @returns {any}\n */\nexport const reducer = (state: IAppError = null, action: AnyAction) => {\n    switch (action.type) {\n        case ActionTypes.SHOW_ERROR:\n            return {...action.payload};\n        case ActionTypes.CLEAR_ERROR:\n            return null;\n        default:\n            return state;\n    }\n};\n","import { IApplicationState } from \"../../models/applicationState\";\n\n/**\n * Initial state of application\n * @member appSettings - Application settings\n * @member connections - Connections\n * @member recentProjects - Recent projects\n * @member currentProject - Current project\n */\nconst initialState: IApplicationState = {\n    appSettings: {\n        devToolsEnabled: false,\n        securityTokens: [],\n    },\n    connections: [],\n    recentProjects: [],\n    currentProject: null,\n    appError: null,\n};\n\n/**\n * Instance of initial application state\n */\nexport default initialState;\n","import axios from \"axios\";\nimport { IAsset, AssetType } from \"../../models/applicationState\";\nimport { IAssetProvider } from \"./assetProviderFactory\";\nimport { AssetService } from \"../../services/assetService\";\nimport Guard from \"../../common/guard\";\nimport { createQueryString } from \"../../common/utils\";\n\n/**\n * Options for Bing Image Search\n * @member apiKey - Bing Search API Key (Cognitive Services)\n * @member query - Query for Bing Search\n * @member aspectRatio - Aspect Ratio for desired images\n */\nexport interface IBingImageSearchOptions {\n    apiKey: string;\n    query: string;\n    aspectRatio: BingImageSearchAspectRatio;\n}\n\n/**\n * Aspect Ratio for Bing Image Search\n */\nexport enum BingImageSearchAspectRatio {\n    Square = \"Square\",\n    Wide = \"Wide\",\n    Tall = \"Tall\",\n    All = \"All\",\n}\n\n/**\n * Asset Provider for Bing Image Search\n */\nexport class BingImageSearch implements IAssetProvider {\n    private static SEARCH_URL = \"https://api.cognitive.microsoft.com/bing/v7.0/images/search\";\n\n    constructor(private options: IBingImageSearchOptions) {\n        Guard.null(options);\n    }\n\n    /**\n     * Retrieves assets from Bing Image Search based on options provided\n     */\n    public async getAssets(): Promise<IAsset[]> {\n        const query = {\n            q: this.options.query,\n            aspect: this.options.aspectRatio,\n        };\n\n        const url = `${BingImageSearch.SEARCH_URL}?${createQueryString(query)}`;\n\n        const response = await axios.get(url, {\n            headers: {\n                \"Ocp-Apim-Subscription-Key\": this.options.apiKey,\n                \"Accept\": \"application/json\",\n            },\n        });\n\n        const items = response.data.value.map((item) => item.contentUrl);\n\n        return items\n            .map((filePath) => AssetService.createAssetFromFilePath(filePath))\n            .filter((asset) => asset.type !== AssetType.Unknown);\n    }\n}\n","import _ from \"lodash\";\nimport CryptoJS from \"crypto-js\";\nimport { ExportProvider } from \"./exportProvider\";\nimport { IProject, IAssetMetadata, IExportProviderOptions } from \"../../models/applicationState\";\nimport Guard from \"../../common/guard\";\nimport HtmlFileReader from \"../../common/htmlFileReader\";\nimport { itemTemplate } from \"./pascalVOC/pascalVOCTemplates\";\nimport { interpolate } from \"../../common/strings\";\nimport { TFRecordsBuilder, FeatureType } from \"./tensorFlowRecords/tensorFlowBuilder\";\n\ninterface IImageInfo {\n    width: number;\n    height: number;\n    text: string[];\n    label: number[];\n    xmin: number[];\n    ymin: number[];\n    xmax: number[];\n    ymax: number[];\n    difficult: number[];\n    truncated: number[];\n    view: string[];\n}\n\n/**\n * @name - TFRecords Json Export Provider\n * @description - Exports a project into a single JSON file that include all configured assets\n */\nexport class TFRecordsExportProvider extends ExportProvider {\n    constructor(project: IProject, options: IExportProviderOptions) {\n        super(project, options);\n        Guard.null(options);\n    }\n\n    /**\n     * Export project to TensorFlow Records\n     */\n    public async export(): Promise<void> {\n        const allAssets = await this.getAssetsForExport();\n        const exportObject: any = { ...this.project };\n        exportObject.assets = _.keyBy(allAssets, (assetMetadata) => assetMetadata.asset.id);\n\n        // Create Export Folder\n        const exportFolderName = `${this.project.name.replace(/\\s/g, \"-\")}-TFRecords-export`;\n        await this.storageProvider.createContainer(exportFolderName);\n\n        await this.exportPBTXT(exportFolderName, this.project);\n        await this.exportRecords(exportFolderName, allAssets);\n    }\n\n    private async exportRecords(exportFolderName: string, allAssets: IAssetMetadata[]) {\n        return await allAssets.mapAsync(async (element) => {\n            return await this.exportSingleRecord(exportFolderName, element);\n        });\n    }\n\n    private async exportSingleRecord(exportFolderName: string, element: IAssetMetadata): Promise<void> {\n        return new Promise<void>(async (resolve, reject) => {\n            try {\n                const arrayBuffer = await HtmlFileReader.getAssetArray(element.asset);\n                const imageBuffer = new Uint8Array(arrayBuffer);\n\n                // Get Base64\n                const image64 = btoa(imageBuffer.reduce((data, byte) => data + String.fromCharCode(byte), \"\"));\n\n                const imageInfo: IImageInfo = {\n                    width: element.asset.size ? element.asset.size.width : 0,\n                    height: element.asset.size ? element.asset.size.height : 0,\n                    text: [],\n                    label: [],\n                    xmin: [],\n                    ymin: [],\n                    xmax: [],\n                    ymax: [],\n                    difficult: [],\n                    truncated: [],\n                    view: [],\n                };\n\n                if (!element.asset.size || element.asset.size.width === 0 || element.asset.size.height === 0) {\n                    await this.updateImageSizeInfo(image64, imageInfo);\n                }\n\n                // Get Array of all Box shaped tag for the Asset\n                this.updateAssetTagArrays(element, imageInfo);\n\n                // Generate TFRecord\n                const builder = new TFRecordsBuilder();\n\n                builder.addFeature(\"image/height\", FeatureType.Int64, imageInfo.height);\n                builder.addFeature(\"image/width\", FeatureType.Int64, imageInfo.width);\n                builder.addFeature(\"image/filename\", FeatureType.String, element.asset.name);\n                builder.addFeature(\"image/source_id\", FeatureType.String, element.asset.name);\n                builder.addFeature(\"image/key/sha256\", FeatureType.String, CryptoJS.SHA256(imageBuffer)\n                    .toString(CryptoJS.enc.Base64));\n                builder.addFeature(\"image/encoded\", FeatureType.Binary, imageBuffer);\n                builder.addFeature(\"image/format\", FeatureType.String, element.asset.name.split(\".\").pop());\n                builder.addArrayFeature(\"image/object/bbox/xmin\", FeatureType.Float, imageInfo.xmin);\n                builder.addArrayFeature(\"image/object/bbox/ymin\", FeatureType.Float, imageInfo.ymin);\n                builder.addArrayFeature(\"image/object/bbox/xmax\", FeatureType.Float, imageInfo.xmax);\n                builder.addArrayFeature(\"image/object/bbox/ymax\", FeatureType.Float, imageInfo.ymax);\n                builder.addArrayFeature(\"image/object/class/text\", FeatureType.String, imageInfo.text);\n                builder.addArrayFeature(\"image/object/class/label\", FeatureType.Int64, imageInfo.label);\n                builder.addArrayFeature(\"image/object/difficult\", FeatureType.Int64, imageInfo.difficult);\n                builder.addArrayFeature(\"image/object/truncated\", FeatureType.Int64, imageInfo.truncated);\n                builder.addArrayFeature(\"image/object/view\", FeatureType.String, imageInfo.view);\n\n                // Save TFRecords\n                const fileName = element.asset.name.split(\".\").slice(0, -1).join(\".\");\n                const fileNamePath = `${exportFolderName}/${fileName}.tfrecord`;\n                await this.writeTFRecords(fileNamePath, [builder.build()]);\n\n                resolve();\n            } catch (error) {\n                // Ignore the error at the moment\n                // TODO: Refactor ExportProvider abstract class export() method\n                //       to return Promise<object> with an object containing\n                //       the number of files succesfully exported out of total\n                console.log(`Error downloading ${element.asset.path} - ${error}`);\n                resolve();\n                // eject(err);\n            }\n        });\n    }\n\n    private async writeTFRecords(fileNamePath: string, buffers: Buffer[]) {\n        // Get TFRecords buffer\n        const tfRecords = TFRecordsBuilder.buildTFRecords(buffers);\n\n        // Write TFRecords\n        await this.storageProvider.writeBinary(fileNamePath, tfRecords);\n    }\n\n    private async updateImageSizeInfo(image64: string, imageInfo: IImageInfo) {\n        if (image64.length > 10) {\n            const assetProps = await HtmlFileReader.readAssetAttributesWithBuffer(image64);\n            if (assetProps) {\n                imageInfo.width = assetProps.width;\n                imageInfo.height = assetProps.height;\n            } else {\n                console.log(\"imageInfo not found\");\n            }\n        }\n    }\n\n    private updateAssetTagArrays(element: IAssetMetadata, imageInfo: IImageInfo) {\n        element.regions.filter((region) => region.boundingBox)\n            .forEach((region) => {\n                region.tags.forEach((tagName) => {\n                    const index = this.project.tags\n                        .findIndex((projectTag) => projectTag.name === tagName);\n\n                    imageInfo.text.push(tagName);\n                    imageInfo.label.push(index);\n                    imageInfo.xmin.push(region.boundingBox.left / imageInfo.width);\n                    imageInfo.ymin.push(region.boundingBox.top / imageInfo.height);\n                    imageInfo.xmax.push((region.boundingBox.left + region.boundingBox.width)\n                        / imageInfo.width);\n                    imageInfo.ymax.push((region.boundingBox.top + region.boundingBox.height)\n                        / imageInfo.height);\n                    imageInfo.difficult.push(0);\n                    imageInfo.truncated.push(0);\n                    imageInfo.view.push(\"Unspecified\");\n                });\n            });\n    }\n\n    private async exportPBTXT(exportFolderName: string, project: IProject) {\n        if (project.tags && project.tags.length > 0) {\n            // Save tf_label_map.pbtxt\n            const pbtxtFileName = `${exportFolderName}/tf_label_map.pbtxt`;\n\n            let id = 1;\n            const items = project.tags.map((element) => {\n                const params = {\n                    id: (id++).toString(),\n                    tag: element.name,\n                };\n\n                return interpolate(itemTemplate, params);\n            });\n\n            await this.storageProvider.writeText(pbtxtFileName, items.join(\"\"));\n        }\n    }\n}\n","import _ from \"lodash\";\nimport { ExportProvider, ExportAssetState, IExportResults } from \"./exportProvider\";\nimport Guard from \"../../common/guard\";\nimport {\n    IProject, IExportFormat, IAssetMetadata,\n    IBoundingBox, ISize, IExportProviderOptions,\n} from \"../../models/applicationState\";\nimport {\n    AzureCustomVisionService, IAzureCustomVisionServiceOptions, IAzureCustomVisionProject,\n    IAzureCustomVisionTag, IAzureCustomVisionRegion,\n} from \"./azureCustomVision/azureCustomVisionService\";\nimport HtmlFileReader from \"../../common/htmlFileReader\";\n\n/**\n * Options for Azure Custom Vision Service\n */\nexport interface IAzureCustomVisionExportOptions extends IExportProviderOptions {\n    assetState: ExportAssetState;\n    newOrExisting: NewOrExisting;\n    region: AzureRegion;\n    apiKey: string;\n    projectId?: string;\n    name?: string;\n    description?: string;\n    projectType?: string;\n    classificationType?: string;\n    domainId?: string;\n}\n\n/**\n * Enum for new or existing Custom Vision projects\n */\nexport interface ITagList {\n    [index: string]: IAzureCustomVisionTag;\n}\n\nexport enum NewOrExisting {\n    New = \"new\",\n    Existing = \"existing\",\n}\n\n/**\n * Azure regions\n */\nexport enum AzureRegion {\n    EastUS = \"eastus\",\n    EastUS2 = \"eastus2\",\n    NorthCentralUS = \"northcentralus\",\n    SouthCentralUS = \"southcentralus\",\n    WestUS2 = \"westus2\",\n    WestEurope = \"westeurope\",\n    NorthEurope = \"northeurope\",\n    SoutheastAsia = \"southeastasia\",\n    AustraliaEast = \"australiaeast\",\n    CentralIndia = \"centralindia\",\n    UKSouth = \"uksouth\",\n    JapanEast = \"japaneast\",\n}\n\n/**\n * @name - Azure Custom Vision Provider\n * @description - Exports a VoTT project into an Azure custom vision project\n */\nexport class AzureCustomVisionProvider extends ExportProvider<IAzureCustomVisionExportOptions> {\n    private customVisionService: AzureCustomVisionService;\n\n    constructor(project: IProject, options: IAzureCustomVisionExportOptions) {\n        super(project, options);\n        Guard.null(options);\n\n        if (!options.region) {\n            options.region = AzureRegion.SouthCentralUS;\n        }\n\n        const cusomVisionServiceOptions: IAzureCustomVisionServiceOptions = {\n            apiKey: options.apiKey,\n            baseUrl: `https://${options.region}.api.cognitive.microsoft.com/customvision/v2.2/Training`,\n        };\n        this.customVisionService = new AzureCustomVisionService(cusomVisionServiceOptions);\n    }\n\n    /**\n     * Exports the configured assets to the Azure Custom Vision service\n     * @returns The upload results\n     */\n    public async export(): Promise<IExportResults> {\n        const customVisionTags = await this.syncTags();\n        const assetsToExport = await this.getAssetsForExport();\n        const tagMap = _.keyBy(customVisionTags, \"name\");\n\n        const results = await assetsToExport.mapAsync(async (asset) => {\n            try {\n                await this.uploadAsset(asset, tagMap);\n                return {\n                    asset,\n                    success: true,\n                };\n            } catch (e) {\n                return {\n                    asset,\n                    success: false,\n                    error: e,\n                };\n            }\n        });\n\n        return {\n            completed: results.filter((r) => r.success),\n            errors: results.filter((r) => !r.success),\n            count: results.length,\n        };\n    }\n\n    /**\n     * Creates a new azure custom vision project if a new project has been configured\n     * @param exportFormat - The export configuration options\n     */\n    public async save(exportFormat: IExportFormat): Promise<IAzureCustomVisionExportOptions> {\n        const customVisionOptions = exportFormat.providerOptions as IAzureCustomVisionExportOptions;\n\n        if (customVisionOptions.newOrExisting === NewOrExisting.Existing) {\n            return Promise.resolve(customVisionOptions);\n        }\n\n        let customVisionProject: IAzureCustomVisionProject = {\n            name: customVisionOptions.name,\n            description: customVisionOptions.description,\n            classificationType: customVisionOptions.classificationType,\n            domainId: customVisionOptions.domainId,\n            projectType: customVisionOptions.projectType,\n        };\n\n        customVisionProject = await this.customVisionService.create(customVisionProject);\n\n        return {\n            assetState: customVisionOptions.assetState,\n            region: customVisionOptions.region,\n            apiKey: customVisionOptions.apiKey,\n            projectId: customVisionProject.id,\n            newOrExisting: NewOrExisting.Existing,\n        };\n    }\n\n    /**\n     * Creates any new tags not already defined within the custom vision project\n     * @returns All tags from the custom vision project\n     */\n    private async syncTags(): Promise<IAzureCustomVisionTag[]> {\n        const customVisionOptions = this.project.exportFormat.providerOptions as IAzureCustomVisionExportOptions;\n        const customVisionTags = await this.customVisionService.getProjectTags(customVisionOptions.projectId);\n        const customVisionTagNames = _.keyBy(customVisionTags, \"name\");\n\n        const createTagTasks = await this.project.tags\n            .filter((projectTag) => {\n                return !customVisionTagNames[projectTag.name];\n            }).map((projectTag) => {\n                const newTag: IAzureCustomVisionTag = {\n                    name: projectTag.name,\n                };\n                return this.customVisionService.createTag(customVisionOptions.projectId, newTag);\n            });\n\n        const newTags = await Promise.all(createTagTasks);\n        return customVisionTags.concat(newTags);\n    }\n\n    /**\n     * Uploads the asset binary to azure custom vision service and configured tagged regions\n     * @param assetMetadata - The asset to upload\n     * @param tags - The global tag list from custom vision service\n     */\n    private async uploadAsset(assetMetadata: IAssetMetadata, tags: ITagList): Promise<void> {\n        const blob = await HtmlFileReader.getAssetBlob(assetMetadata.asset);\n\n        // Upload new image to the custom vision service\n        const newImage = await this.customVisionService.createImage(this.options.projectId, blob);\n\n        if (!newImage) {\n            return Promise.reject(`Error uploading asset binary with id \"${assetMetadata.asset.id}\"`);\n        }\n\n        const allRegions: IAzureCustomVisionRegion[] = [];\n\n        // Generate the regions for Azure Custom Vision\n        assetMetadata.regions.forEach((region) => {\n            if (region.boundingBox) {\n                region.tags.forEach((tagName) => {\n                    const customVisionTag = tags[tagName];\n                    if (customVisionTag) {\n                        const boundingBox = this.getBoundingBoxValue(assetMetadata.asset.size, region.boundingBox);\n                        const newRegion: IAzureCustomVisionRegion = {\n                            imageId: newImage.id,\n                            tagId: customVisionTag.id,\n                            ...boundingBox,\n                        };\n                        allRegions.push(newRegion);\n                    }\n                });\n            }\n        });\n\n        // Associate regions with newly uploaded image\n        // Azure custom vision service API is smart enough to detect that an image already exists with the same binary\n        if (allRegions.length > 0) {\n            await this.customVisionService.createRegions(this.options.projectId, allRegions);\n        }\n    }\n\n    /**\n     * Converts absolute bounding box values to relative bounding box values\n     * @param size The actual size of the asset\n     * @param boundingBox The actual bounding box coordinates\n     */\n    private getBoundingBoxValue(size: ISize, boundingBox: IBoundingBox): IBoundingBox {\n        return {\n            left: boundingBox.left / size.width,\n            top: boundingBox.top / size.height,\n            width: boundingBox.width / size.width,\n            height: boundingBox.height / size.height,\n        };\n    }\n}\n","import axios, { AxiosRequestConfig } from \"axios\";\nimport { createQueryString } from \"../../../common/utils\";\nimport Guard from \"../../../common/guard\";\n\nexport interface IAzureCustomVisionServiceOptions {\n    baseUrl: string;\n    apiKey: string;\n}\n\nexport interface IAzureCustomVisionProject {\n    id?: string;\n    name: string;\n    description?: string;\n    projectType: string;\n    domainId: string;\n    classificationType: string;\n}\n\nexport interface IAzureCustomVisionTag {\n    id?: string;\n    name: string;\n    description?: string;\n    imageCount?: number;\n}\n\nexport interface IAzureCustomVisionImage {\n    id: string;\n    width: number;\n    height: number;\n    imageUri: string;\n    tags: [];\n    regions: [];\n}\n\nexport interface IAzureCustomVisionRegion {\n    imageId: string;\n    tagId: string;\n    left: number;\n    top: number;\n    width: number;\n    height: number;\n}\n\n/**\n * @name Azure Custom Vision Service\n * @description REST API wrapper for Azure Custom Vision service\n */\nexport class AzureCustomVisionService {\n    constructor(private options: IAzureCustomVisionServiceOptions) {\n        Guard.null(options);\n    }\n\n    /**\n     * Creates an Azure Custom Vision project\n     * @param project - The Azure Custom Vision Project settings\n     */\n    public async create(project: IAzureCustomVisionProject): Promise<IAzureCustomVisionProject> {\n        Guard.null(project);\n\n        const urlParams = {\n            name: project.name,\n            description: project.description,\n            projectType: project.projectType,\n            domainId: project.domainId,\n            classificationType: project.classificationType,\n        };\n\n        const url = `${this.options.baseUrl}/projects?${createQueryString(urlParams)}`;\n        const response = await axios.post(url, null, this.createRequestConfig());\n\n        if (response.status !== 200) {\n            throw new Error(\"Error creating new project\");\n        }\n\n        return response.data as IAzureCustomVisionProject;\n    }\n\n    /**\n     * Get the tags of a Azure Custom Vision project\n     * @param projectId The Azure Custom Vision project ID\n     */\n    public async getProjectTags(projectId: string): Promise<IAzureCustomVisionTag[]> {\n        Guard.empty(projectId);\n\n        const url = `${this.options.baseUrl}/projects/${projectId}/tags`;\n        const response = await axios.get(url, this.createRequestConfig());\n\n        if (response.status !== 200) {\n            throw new Error(\"Error retrieving project tags\");\n        }\n\n        return response.data as IAzureCustomVisionTag[];\n    }\n\n    /**\n     * Creates a new Azure Custom Vision Tag\n     * @param projectId The Azure Custom vision project id\n     * @param tag The tag to save\n     */\n    public async createTag(projectId: string, tag: IAzureCustomVisionTag): Promise<IAzureCustomVisionTag> {\n        Guard.empty(projectId);\n        Guard.null(tag);\n\n        const urlParams = {\n            name: tag.name,\n            description: tag.description,\n        };\n\n        const url = `${this.options.baseUrl}/projects/${projectId}/tags?${createQueryString(urlParams)}`;\n        const response = await axios.post(url, null, this.createRequestConfig());\n\n        if (response.status !== 200) {\n            throw new Error(\"Error saving tag\");\n        }\n\n        return response.data as IAzureCustomVisionTag;\n    }\n\n    /**\n     * Uploads a new image to an Azure Custom Vision project\n     * @param projectId The Azure Custom vision project id\n     * @param contents The asset binary contents\n     */\n    public async createImage(projectId: string, contents: File | Blob | ArrayBuffer): Promise<IAzureCustomVisionImage> {\n        Guard.empty(projectId);\n        Guard.null(contents);\n\n        const url = `${this.options.baseUrl}/projects/${projectId}/images`;\n        const config = this.createRequestConfig();\n        config.headers[\"Content-Type\"] = \"application/octet-stream\";\n        const response = await axios.post(url, contents, config);\n\n        if (response.status !== 200) {\n            throw new Error(\"Error saving image\");\n        }\n\n        if (!response.data.images || response.data.images.length === 0) {\n            throw new Error(\"Error uploading image\");\n        }\n\n        return response.data.images[0].image as IAzureCustomVisionImage;\n    }\n\n    /**\n     * Creates a new region with tags and associated it with an image\n     * @param projectId The Azure Custom vision project id\n     * @param regions The regions to create\n     */\n    public async createRegions(projectId: string, regions: IAzureCustomVisionRegion[]): Promise<void> {\n        Guard.empty(projectId);\n        Guard.null(regions);\n\n        const url = `${this.options.baseUrl}/projects/${projectId}/images/regions`;\n        const response = await axios.post(url, { regions }, this.createRequestConfig());\n\n        if (response.status !== 200) {\n            throw new Error(\"Error saving image regions\");\n        }\n    }\n\n    private createRequestConfig(): AxiosRequestConfig {\n        return {\n            headers: {\n                \"Training-key\": this.options.apiKey,\n            },\n        };\n    }\n}\n","import Guard from \"../guard\";\n\n/**\n * Processes items in the array within the specified batch size (default: 5)\n * @param this The array to process\n * @param action The action to perform on each item in the array\n * @param batchSize The batch size for actions to perform in parallel (default: 5)\n */\nexport async function forEachAsync<T>(\n    this: T[],\n    action: (item: T) => Promise<void>,\n    batchSize: number = 5): Promise<void> {\n    Guard.null(this);\n    Guard.null(action);\n    Guard.expression(batchSize, (value) => value > 0);\n\n    const all: T[] = [...this];\n\n    while (all.length > 0) {\n        const batch: T[] = [];\n\n        while (all.length > 0 && batch.length < batchSize) {\n            batch.push(all.pop());\n        }\n\n        const tasks = batch.map((item) => action(item));\n        await Promise.all(tasks);\n    }\n}\n\n/**\n * Maps items in the array in async batches with the specified action\n * @param this The array to process\n * @param action The transformer action to perform on each item in the array\n * @param batchSize The batch size for actions to perform in parallel (default: 5);\n */\nexport async function mapAsync<T, R>(\n    this: T[],\n    action: (item: T) => Promise<R>,\n    batchSize: number = 5): Promise<R[]> {\n    Guard.null(this);\n    Guard.null(action);\n    Guard.expression(batchSize, (value) => value > 0);\n\n    let results: R[] = [];\n    const all: T[] = [...this];\n\n    while (all.length > 0) {\n        const batch: T[] = [];\n\n        while (all.length > 0 && batch.length < batchSize) {\n            batch.push(all.pop());\n        }\n\n        const tasks = batch.map((item) => action(item));\n        const batchResults = await Promise.all(tasks);\n        results = results.concat(batchResults);\n    }\n\n    return results;\n}\n","import Guard from \"../guard\";\n\n/**\n * Processes items in the map within the specified batch size (default: 5)\n * @param this The map to process\n * @param action The action to perform on each item in the map\n * @param batchSize The batch size for actions to perform in parallel (default: 5)\n */\nexport async function forEachAsync<K, V>(\n    this: Map<K, V>,\n    action: (value: V, key: K) => Promise<void>,\n    batchSize: number = 5): Promise<void> {\n    Guard.null(this);\n    Guard.null(action);\n    Guard.expression(batchSize, (value) => value > 0);\n\n    const all: Array<[K, V]> = [...this.entries()];\n\n    while (all.length > 0) {\n        const batch: Array<[K, V]> = [];\n\n        while (all.length > 0 && batch.length < batchSize) {\n            batch.push(all.pop());\n        }\n\n        const tasks = batch.map((item) => action(item[1], item[0]));\n        await Promise.all(tasks);\n    }\n}\n","import React from \"react\";\nimport { Provider } from \"react-redux\";\nimport ReactDOM from \"react-dom\";\nimport \"../node_modules/bootstrap/dist/css/bootstrap.min.css\";\nimport \"../node_modules/@fortawesome/fontawesome-free/css/all.css\";\nimport \"./assets/css/bootstrap-theme-slate.css\";\nimport \"./index.scss\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport createReduxStore from \"./redux/store/store\";\nimport initialState from \"./redux/store/initialState\";\nimport { IApplicationState } from \"./models/applicationState\";\nimport registerProviders from \"./registerProviders\";\nimport registerMixins from \"./registerMixins\";\n\nimport { setUpAppInsights } from \"./telemetry\";\n\nsetUpAppInsights();\n\nregisterMixins();\nregisterProviders();\nconst defaultState: IApplicationState = initialState;\nconst store = createReduxStore(defaultState, true);\n\nReactDOM.render(\n    <Provider store={store}>\n        <App/>\n    </Provider>\n    , document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import { forEachAsync as arrayForEachAsync, mapAsync } from \"./common/extensions/array\";\nimport { forEachAsync as mapForEachAsync } from \"./common/extensions/map\";\n\ndeclare global {\n    // tslint:disable-next-line:interface-name\n    interface Array<T> {\n        /**\n         * Processes items in the array within the specified batch size (default: 5)\n         * @param this The array to process\n         * @param action The action to perform on each item in the array\n         * @param batchSize The batch size for actions to perform in parallel (default: 5)\n         */\n        forEachAsync(action: (item: T) => Promise<void>, batchSize?: number): Promise<void>;\n\n        /**\n         * Maps items in the array in async batches with the specified action\n         * @param this The array to process\n         * @param action The transformer action to perform on each item in the array\n         * @param batchSize The batch size for actions to perform in parallel (default: 5);\n         */\n        mapAsync<R>(action: (item: T) => Promise<R>, batchSize?: number): Promise<R[]>;\n    }\n\n    // tslint:disable-next-line:interface-name\n    interface Map<K, V> {\n        /**\n         * Processes items in the map within the specified batch size (default: 5)\n         * @param this The map to process\n         * @param action The action to perform on each item in the map\n         * @param batchSize The batch size for actions to perform in parallel (default: 5)\n         */\n        forEachAsync(action: (value: V, key: K) => Promise<void>, batchSize?: number): Promise<void>;\n    }\n}\n\nexport default function registerMixins() {\n    if (!Array.prototype.forEachAsync) {\n        Array.prototype.forEachAsync = arrayForEachAsync;\n    }\n\n    if (!Array.prototype.mapAsync) {\n        Array.prototype.mapAsync = mapAsync;\n    }\n\n    if (!Map.prototype.forEachAsync) {\n        Map.prototype.forEachAsync = mapForEachAsync;\n    }\n}\n","import { ExportProviderFactory } from \"./providers/export/exportProviderFactory\";\nimport { PascalVOCExportProvider } from \"./providers/export/pascalVOC\";\nimport { TFRecordsExportProvider } from \"./providers/export/tensorFlowRecords\";\nimport { VottJsonExportProvider } from \"./providers/export/vottJson\";\nimport { CsvExportProvider } from \"./providers/export/csv\";\nimport { AssetProviderFactory } from \"./providers/storage/assetProviderFactory\";\nimport { AzureBlobStorage } from \"./providers/storage/azureBlobStorage\";\nimport { BingImageSearch } from \"./providers/storage/bingImageSearch\";\nimport { LocalFileSystemProxy } from \"./providers/storage/localFileSystemProxy\";\nimport { StorageProviderFactory } from \"./providers/storage/storageProviderFactory\";\nimport registerToolbar from \"./registerToolbar\";\nimport { strings } from \"./common/strings\";\nimport { HostProcessType } from \"./common/hostProcess\";\nimport { AzureCustomVisionProvider } from \"./providers/export/azureCustomVision\";\nimport { CntkExportProvider } from \"./providers/export/cntk\";\n\n/**\n * Registers storage, asset and export providers, as well as all toolbar items\n */\nexport default function registerProviders() {\n    // Storage Providers\n    StorageProviderFactory.register({\n        name: \"localFileSystemProxy\",\n        displayName: strings.connections.providers.local.title,\n        platformSupport: HostProcessType.Electron,\n        factory: (options) => new LocalFileSystemProxy(options),\n    });\n    StorageProviderFactory.register({\n        name: \"azureBlobStorage\",\n        displayName: strings.connections.providers.azureBlob.title,\n        factory: (options) => new AzureBlobStorage(options),\n    });\n\n    // Asset Providers\n    AssetProviderFactory.register({\n        name: \"localFileSystemProxy\",\n        displayName: strings.connections.providers.local.title,\n        platformSupport: HostProcessType.Electron,\n        factory: (options) => new LocalFileSystemProxy(options),\n    });\n    AssetProviderFactory.register({\n        name: \"azureBlobStorage\",\n        displayName: strings.connections.providers.azureBlob.title,\n        factory: (options) => new AzureBlobStorage(options),\n    });\n    AssetProviderFactory.register({\n        name: \"bingImageSearch\",\n        displayName: strings.connections.providers.bing.title,\n        factory: (options) => new BingImageSearch(options),\n    });\n\n    // Export Providers\n    ExportProviderFactory.register({\n        name: \"vottJson\",\n        displayName: strings.export.providers.vottJson.displayName,\n        factory: (project, options) => new VottJsonExportProvider(project, options),\n    });\n    ExportProviderFactory.register({\n        name: \"pascalVOC\",\n        displayName: strings.export.providers.pascalVoc.displayName,\n        factory: (project, options) => new PascalVOCExportProvider(project, options),\n    });\n    ExportProviderFactory.register({\n        name: \"tensorFlowRecords\",\n        displayName: strings.export.providers.tfRecords.displayName,\n        factory: (project, options) => new TFRecordsExportProvider(project, options),\n    });\n    ExportProviderFactory.register({\n        name: \"azureCustomVision\",\n        displayName: strings.export.providers.azureCV.displayName,\n        factory: (project, options) => new AzureCustomVisionProvider(project, options),\n    });\n    ExportProviderFactory.register({\n        name: \"cntk\",\n        displayName: strings.export.providers.cntk.displayName,\n        factory: (project, options) => new CntkExportProvider(project, options),\n    });\n    ExportProviderFactory.register({\n        name: \"csv\",\n        displayName: strings.export.providers.csv.displayName,\n        factory: (project, options) => new CsvExportProvider(project, options),\n    });\n\n    registerToolbar();\n}\n","import { applyMiddleware, createStore, Store } from \"redux\";\nimport thunk from \"redux-thunk\";\nimport rootReducer from \"../reducers\";\nimport { IApplicationState } from \"../../models/applicationState\";\nimport { mergeInitialState } from \"../middleware/localStorage\";\nimport { createAppInsightsLogger } from \"../middleware/appInsights\";\nimport { Env } from \"../../common/environment\";\n\n/**\n * Creates initial redux store from initial application state\n * @param initialState - Initial state of application\n * @param useLocalStorage - Whether or not to use localStorage middleware\n */\nexport default function createReduxStore(\n    initialState?: IApplicationState,\n    useLocalStorage: boolean = false): Store {\n    const paths: string[] = [\"appSettings\", \"connections\", \"recentProjects\"];\n\n    let middlewares = [thunk, createAppInsightsLogger()];\n\n    if (useLocalStorage) {\n        const localStorage = require(\"../middleware/localStorage\");\n        const storage = localStorage.createLocalStorage({paths});\n        middlewares = [\n            ...middlewares,\n            storage,\n        ];\n    }\n\n    if (Env.get() === \"development\") {\n        const logger = require(\"redux-logger\");\n        const reduxImmutableStateInvariant = require(\"redux-immutable-state-invariant\");\n        middlewares = [\n            ...middlewares,\n            reduxImmutableStateInvariant.default(),\n            logger.createLogger(),\n        ];\n    }\n\n    return createStore(\n        rootReducer,\n        useLocalStorage ? mergeInitialState(initialState, paths) : initialState,\n        applyMiddleware(...middlewares),\n    );\n}\n","import { AnyAction, Dispatch, Middleware, MiddlewareAPI } from \"redux\";\nimport { trackReduxAction } from \"../../telemetry\";\n\n/**\n * return a middleware that send custom event to AppInsights tracking redux action\n */\nexport function createAppInsightsLogger(): Middleware {\n    return (store: MiddlewareAPI<Dispatch<AnyAction>>) => (next: Dispatch<AnyAction>) => (action: any) => {\n        trackReduxAction(action);\n        return next(action);\n    };\n}\n","import { ExportAssetState } from \"../providers/export/exportProvider\";\nimport { IAssetPreviewSettings } from \"../react/components/common/assetPreview/assetPreview\";\n\n/**\n * @name - Application State\n * @description - Defines the root level application state\n * @member appSettings - Application wide settings\n * @member connections - Global list of connections available to application\n * @member recentProjects - List of recently used projects\n * @member currentProject - The active project being edited\n * @member appError - error in the app if any\n */\nexport interface IApplicationState {\n    appSettings: IAppSettings;\n    connections: IConnection[];\n    recentProjects: IProject[];\n    currentProject: IProject;\n    appError?: IAppError;\n}\n\n/**\n * @name - Application Error\n * @description - Defines error detail\n * @member title - title of the error to display\n * @member message - message of the error to display\n * @member errorCode - error category\n */\nexport interface IAppError {\n    errorCode: ErrorCode;\n    message: any;\n    title?: string;\n}\n\n/**\n * Enum of supported error codes\n */\nexport enum ErrorCode {\n    // Note that the value of the enum is in camelCase while\n    // the enum key is in Pascal casing\n    Unknown = \"unknown\",\n    GenericRenderError = \"genericRenderError\",\n    CanvasError = \"canvasError\",\n    V1ImportError = \"v1ImportError\",\n    ProjectUploadError = \"projectUploadError\",\n    ProjectDeleteError = \"projectDeleteError\",\n    ProjectInvalidJson = \"projectInvalidJson\",\n    ProjectInvalidSecurityToken = \"projectInvalidSecurityToken\",\n    ProjectDuplicateName = \"projectDuplicateName\",\n    SecurityTokenNotFound = \"securityTokenNotFound\",\n    ExportFormatNotFound = \"exportFormatNotFound\",\n    PasteRegionTooBig = \"pasteRegionTooBig\",\n    OverloadedKeyBinding = \"overloadedKeyBinding\",\n    ActiveLearningPredictionError = \"activeLearningPredictionError\",\n}\n\n/**\n * Base application error\n */\nexport class AppError extends Error implements IAppError {\n    public errorCode: ErrorCode;\n    public message: string;\n    public title?: string;\n\n    constructor(errorCode: ErrorCode, message: string, title: string = null) {\n        super(message);\n        this.errorCode = errorCode;\n        this.message = message;\n        this.title = title;\n    }\n}\n\n/**\n * @name - Provider Options\n * @description - Property map of key values used within a export / asset / storage provider\n */\nexport interface IProviderOptions {\n    [key: string]: any;\n}\n\n/**\n * @name - Application settings\n * @description - Defines the root level configuration options for the application\n * @member devToolsEnabled - Whether dev tools are current open and enabled\n * @member securityTokens - Token used to encrypt sensitive project settings\n */\nexport interface IAppSettings {\n    devToolsEnabled: boolean;\n    securityTokens: ISecurityToken[];\n    thumbnailSize?: ISize;\n}\n\n/**\n * @name - Project\n * @description - Defines the structure of a VoTT project\n * @member id - Unique identifier\n * @member name - User defined name\n * @member securityToken - The Base64 encoded token used to encrypt sensitive project data\n * @member description - User defined description\n * @member tags - User defined list of tags\n * @member sourceConnection - Full source connection details\n * @member targetConnection - Full target connection details\n * @member exportFormat - Full export format definition\n * @member assets - Map of assets within a project\n * @member autoSave - Whether or not the project will automatically save updates to the underlying target\n */\nexport interface IProject {\n    id: string;\n    name: string;\n    version: string;\n    securityToken: string;\n    description?: string;\n    tags: ITag[];\n    sourceConnection: IConnection;\n    targetConnection: IConnection;\n    exportFormat: IExportFormat;\n    videoSettings: IProjectVideoSettings;\n    activeLearningSettings: IActiveLearningSettings;\n    autoSave: boolean;\n    assets?: { [index: string]: IAsset };\n    lastVisitedAssetId?: string;\n}\n\n/**\n * @name - FileInfo\n * @description - Defines the file information and content for V1 projects\n * @member content - The content of a file (JSON string)\n * @member file - The File object point to the V1 project file\n */\nexport interface IFileInfo {\n    content: string | ArrayBuffer;\n    file: File;\n}\n\n/**\n * @name - Tag\n * @description - Defines the structure of a VoTT tag\n * @member name - User defined name\n * @member color - User editable color associated to tag\n */\nexport interface ITag {\n    name: string;\n    color: string;\n}\n\n/**\n * @enum LOCAL - Local storage type\n * @enum CLOUD - Cloud storage type\n * @enum OTHER - Any other storage type\n */\nexport enum StorageType {\n    Local = \"local\",\n    Cloud = \"cloud\",\n    Other = \"other\",\n}\n\n/**\n * @name - Connection\n * @description - Defines a reusable data source definition for projects\n * @member id - Unique identifier for connection\n * @member name - User defined name\n * @member description - User defined short description\n * @member providerType - The underlying storage type (Local File System, Azure Blob Storage, etc)\n * @member providerOptions - Provider specific options used to connect to the data source\n */\nexport interface IConnection {\n    id: string;\n    name: string;\n    description?: string;\n    providerType: string;\n    providerOptions: IProviderOptions | ISecureString;\n}\n\n/**\n * @name - Export Provider Options\n * @description - options defining the type of asset to export\n * @member assetState - export asset with the following state\n */\nexport interface IExportProviderOptions extends IProviderOptions {\n    assetState: ExportAssetState;\n}\n\n/**\n * @name - Export Format\n * @description - Defines the settings for how project data is exported into commonly used format\n * @member id - Unique identifier for export format\n * @member name - Name of export format\n * @member providerType - The export format type (TF Records, YOLO, CSV, etc)\n * @member providerOptions - The provider specific option required to export data\n */\nexport interface IExportFormat {\n    providerType: string;\n    providerOptions: IExportProviderOptions | ISecureString;\n}\n\n/**\n * @name - Video Tagging Settings for the project\n * @description - Defines the video settings within a VoTT project\n * @member frameExtractionRate - Extraction rate for a video (number of frames per second of video)\n */\nexport interface IProjectVideoSettings {\n    frameExtractionRate: number;\n}\n\n/**\n * @name - Model Path Type\n * @description - Defines the mechanism to load the TF.js model for Active Learning\n * @member Coco - Specifies the default/generic pre-trained Coco-SSD model\n * @member File - Specifies to load a custom model from filesystem\n * @member Url - Specifies to load a custom model from a web server\n */\nexport enum ModelPathType {\n    Coco = \"coco\",\n    File = \"file\",\n    Url = \"url\",\n}\n\n/**\n * Properties for additional project settings\n * @member activeLearningSettings - Active Learning settings\n */\nexport interface IAdditionalPageSettings extends IAssetPreviewSettings {\n    activeLearningSettings: IActiveLearningSettings;\n}\n\n/**\n * @name - Active Learning Settings for the project\n * @description - Defines the active learning settings within a VoTT project\n * @member modelPathType - Model loading type [\"coco\", \"file\", \"url\"]\n * @member modelPath - Local filesystem path to the TF.js model\n * @member modelUrl - Web url to the TF.js model\n * @member autoDetect - Flag for automatically call the model while opening a new asset\n * @member predictTag - Flag to predict also the tag name other than the rectangle coordinates only\n */\nexport interface IActiveLearningSettings {\n    modelPathType: ModelPathType;\n    modelPath?: string;\n    modelUrl?: string;\n    autoDetect: boolean;\n    predictTag: boolean;\n}\n\n/**\n * @name - Asset Video Settings\n * @description - Defines the settings for video assets\n * @member shouldAutoPlayVideo - true if the video should auto play when loaded, false otherwise\n * @member posterSource - Source location of the image to display when the video is not playing,\n * null for default (first frame of video)\n */\nexport interface IAssetVideoSettings {\n    shouldAutoPlayVideo: boolean;\n    posterSource: string;\n    shouldShowPlayControls: boolean;\n}\n\n/**\n * @name - Asset\n * @description - Defines an asset within a VoTT project\n * @member id - Unique identifier for asset\n * @member type - Type of asset (Image, Video, etc)\n * @member name - Generated name for asset\n * @member path - Relative path to asset within the underlying data source\n * @member size - Size / dimensions of asset\n * @member format - The asset format (jpg, png, mp4, etc)\n */\nexport interface IAsset {\n    id: string;\n    type: AssetType;\n    state: AssetState;\n    name: string;\n    path: string;\n    size: ISize;\n    format?: string;\n    timestamp?: number;\n    parent?: IAsset;\n    predicted?: boolean;\n}\n\n/**\n * @name - Asset Metadata\n * @description - Format to store asset metadata for each asset within a project\n * @member asset - References an asset within the project\n * @member regions - The list of regions drawn on the asset\n */\nexport interface IAssetMetadata {\n    asset: IAsset;\n    regions: IRegion[];\n    version: string;\n}\n\n/**\n * @name - Size\n * @description - Defines the size and/or diminsion for an asset\n * @member width - The actual width of an asset\n * @member height - The actual height of an asset\n */\nexport interface ISize {\n    width: number;\n    height: number;\n}\n\n/**\n * @name - Region\n * @description - Defines a region within an asset\n * @member id - Unique identifier for this region\n * @member type - Defines the type of region\n * @member tags - Defines a list of tags applied to a region\n * @member points - Defines a list of points that define a region\n */\nexport interface IRegion {\n    id: string;\n    type: RegionType;\n    tags: string[];\n    points?: IPoint[];\n    boundingBox?: IBoundingBox;\n}\n\n/**\n * @name - Bounding Box\n * @description - Defines the tag usage within a bounding box region\n * @member left - Defines the left x boundary for the start of the bounding box\n * @member top - Defines the top y boundary for the start of the boudning box\n * @member width - Defines the width of the bounding box\n * @member height - Defines the height of the bounding box\n */\nexport interface IBoundingBox {\n    left: number;\n    top: number;\n    width: number;\n    height: number;\n}\n\n/**\n * @name - Point\n * @description - Defines a point / coordinate within a region\n * @member x - The x value relative to the asset\n * @member y - The y value relative to the asset\n */\nexport interface IPoint {\n    x: number;\n    y: number;\n}\n\n/**\n * @name - Asset Type\n * @description - Defines the type of asset within a project\n * @member Image - Specifies an asset as an image\n * @member Video - Specifies an asset as a video\n */\nexport enum AssetType {\n    Unknown = 0,\n    Image = 1,\n    Video = 2,\n    VideoFrame = 3,\n    TFRecord = 4,\n}\n\n/**\n * @name - Asset State\n * @description - Defines the state of the asset with regard to the tagging process\n * @member NotVisited - Specifies as asset that has not yet been visited or tagged\n * @member Visited - Specifies an asset has been visited, but not yet tagged\n * @member Tagged - Specifies an asset has been visited and tagged\n */\nexport enum AssetState {\n    NotVisited = 0,\n    Visited = 1,\n    Tagged = 2,\n}\n\n/**\n * @name - Region Type\n * @description - Defines the region type within the asset metadata\n * @member Square - Specifies a region as a square\n * @member Rectangle - Specifies a region as a rectangle\n * @member Polygon - Specifies a region as a multi-point polygon\n */\nexport enum RegionType {\n    Polyline = \"POLYLINE\",\n    Point = \"POINT\",\n    Rectangle = \"RECTANGLE\",\n    Polygon = \"POLYGON\",\n    Square = \"SQUARE\",\n}\n\nexport enum EditorMode {\n    Rectangle = \"RECT\",\n    Polygon = \"POLYGON\",\n    Polyline = \"POLYLINE\",\n    Point = \"POINT\",\n    Select = \"SELECT\",\n    CopyRect = \"COPYRECT\",\n    None = \"NONE\",\n}\n\nexport interface ISecureString {\n    encrypted: string;\n}\n\nexport interface ISecurityToken {\n    name: string;\n    key: string;\n}\n\nexport interface ITFRecordMetadata {\n    width: number;\n    height: number;\n    xminArray: number[];\n    yminArray: number[];\n    xmaxArray: number[];\n    ymaxArray: number[];\n    textArray: string[];\n}\n","import { enc, lib, AES } from \"crypto-js\";\nimport Guard from \"./guard\";\n\n/**\n * Generates a random base64 encoded key to be used for encryption\n * @param keySize The key size to use, defaults to 32bit\n */\nexport function generateKey(keySize: number = 32): string {\n    return lib.WordArray.random(keySize).toString(enc.Base64);\n}\n\n/**\n * Encrypts the specified message with the provided key\n * @param message The message to encrypt\n * @param secret The base64 encoded secret\n */\nexport function encrypt(message: string, secret: string): string {\n    Guard.empty(message);\n    Guard.empty(secret);\n\n    try {\n        const secretBytes = enc.Base64.parse(secret);\n        const iv = lib.WordArray.random(24);\n        const encrypted = AES.encrypt(message, secretBytes, { iv });\n        const json = {\n            ciphertext: encrypted.ciphertext.toString(),\n            iv: iv.toString(),\n        };\n        const words = enc.Utf8.parse(JSON.stringify(json));\n\n        return enc.Base64.stringify(words);\n    } catch (e) {\n        throw new Error(`Error encrypting data - ${e.message}`);\n    }\n}\n\n/**\n * Encryptes a javascript object with the specified key\n * @param message - The javascript object to encrypt\n * @param secret - The secret to encrypt the message\n */\nexport function encryptObject(message: any, secret: string): string {\n    Guard.null(message);\n\n    return encrypt(JSON.stringify(message), secret);\n}\n\n/**\n * Decrypts the specified message with the provided key\n * @param encodedMessage The base64 encoded encrypted data\n * @param secret The base64 encoded secret\n */\nexport function decrypt(encodedMessage: string, secret: string): string {\n    Guard.empty(encodedMessage);\n    Guard.empty(secret);\n\n    try {\n        const secretBytes = enc.Base64.parse(secret);\n        const json = enc.Base64.parse(encodedMessage).toString(enc.Utf8);\n        const params = JSON.parse(json);\n        const iv = enc.Hex.parse(params.iv);\n        const cipherParams = lib.CipherParams.create({\n            ciphertext: enc.Hex.parse(params.ciphertext),\n            iv: enc.Hex.parse(params.iv),\n        });\n        const decrypted = AES.decrypt(cipherParams, secretBytes, { iv });\n\n        return decrypted.toString(enc.Utf8);\n    } catch (e) {\n        throw new Error(`Error decrypting data - ${e.message}`);\n    }\n}\n/**\n * Decryptes a javascript object with the specified key\n * @param message - The encrypted base64 encded message\n * @param secret - The secret to decrypt the message\n */\nexport function decryptObject<T = any>(encodedMessage: string, secret: string): T {\n    const json = decrypt(encodedMessage, secret);\n    return JSON.parse(json) as T;\n}\n","import { IpcRendererProxy } from \"../../common/ipcRendererProxy\";\nimport { IStorageProvider } from \"./storageProviderFactory\";\nimport { IAssetProvider } from \"./assetProviderFactory\";\nimport { IAsset, StorageType } from \"../../models/applicationState\";\n\nconst PROXY_NAME = \"LocalFileSystem\";\n\n/**\n * Options for Local File System\n * @member folderPath - Path to folder being used in provider\n */\nexport interface ILocalFileSystemProxyOptions {\n    folderPath: string;\n}\n\n/**\n * Storage Provider for Local File System. Only available in Electron application\n * Leverages the IpcRendererProxy\n */\nexport class LocalFileSystemProxy implements IStorageProvider, IAssetProvider {\n    /**\n     * @returns - StorageType.Local\n     */\n    public storageType: StorageType.Local;\n    constructor(private options?: ILocalFileSystemProxyOptions) {\n        if (!this.options) {\n            this.options = {\n                folderPath: null,\n            };\n        }\n    }\n\n    /**\n     * Select container for use in provider\n     */\n    public selectContainer(): Promise<string> {\n        return IpcRendererProxy.send(`${PROXY_NAME}:selectContainer`);\n    }\n\n    /**\n     * Read text from file\n     * @param fileName - Name of file from which to read text\n     */\n    public readText(fileName: string): Promise<string> {\n        const filePath = [this.options.folderPath, fileName].join(\"/\");\n        return IpcRendererProxy.send(`${PROXY_NAME}:readText`, [filePath]);\n    }\n\n    /**\n     * Read buffer from file\n     * @param fileName Name of file from which to read buffer\n     */\n    public readBinary(fileName: string): Promise<Buffer> {\n        const filePath = [this.options.folderPath, fileName].join(\"/\");\n        return IpcRendererProxy.send(`${PROXY_NAME}:readBinary`, [filePath]);\n    }\n\n    /**\n     * Delete file\n     * @param fileName Name of file to delete\n     */\n    public deleteFile(fileName: string): Promise<void> {\n        const filePath = [this.options.folderPath, fileName].join(\"/\");\n        return IpcRendererProxy.send(`${PROXY_NAME}:deleteFile`, [filePath]);\n    }\n\n    /**\n     * Write text to file\n     * @param fileName Name of target file\n     * @param contents Contents to be written\n     */\n    public writeText(fileName: string, contents: string): Promise<void> {\n        const filePath = [this.options.folderPath, fileName].join(\"/\");\n        return IpcRendererProxy.send(`${PROXY_NAME}:writeText`, [filePath, contents]);\n    }\n\n    /**\n     * Write buffer to file\n     * @param fileName Name of target file\n     * @param contents Contents to be written\n     */\n    public writeBinary(fileName: string, contents: Buffer): Promise<void> {\n        const filePath = [this.options.folderPath, fileName].join(\"/\");\n        return IpcRendererProxy.send(`${PROXY_NAME}:writeBinary`, [filePath, contents]);\n    }\n\n    /**\n     * List files in directory\n     * @param folderName - Name of folder from which to list files\n     * @param ext - NOT CURRENTLY USED IN IMPLEMENTATION.\n     */\n    public listFiles(folderName?: string, ext?: string): Promise<string[]> {\n        const folderPath = folderName ? [this.options.folderPath, folderName].join(\"/\") : this.options.folderPath;\n        return IpcRendererProxy.send(`${PROXY_NAME}:listFiles`, [folderPath]);\n    }\n\n    /**\n     * List directories inside another directory\n     * @param folderName - Directory from which to list directories\n     */\n    public listContainers(folderName?: string): Promise<string[]> {\n        const folderPath = folderName ? [this.options.folderPath, folderName].join(\"/\") : this.options.folderPath;\n        return IpcRendererProxy.send(`${PROXY_NAME}:listContainers`, [folderPath]);\n    }\n\n    /**\n     * Create local directory\n     * @param folderName - Name of directory to create\n     */\n    public createContainer(folderName: string): Promise<void> {\n        const folderPath = [this.options.folderPath, folderName].join(\"/\");\n        return IpcRendererProxy.send(`${PROXY_NAME}:createContainer`, [folderPath]);\n    }\n\n    /**\n     * Delete directory\n     * @param folderName - Name of directory to delete\n     */\n    public deleteContainer(folderName: string): Promise<void> {\n        const folderPath = [this.options.folderPath, folderName].join(\"/\");\n        return IpcRendererProxy.send(`${PROXY_NAME}:deleteContainer`, [folderPath]);\n    }\n\n    /**\n     * Retrieve assets from directory\n     * @param folderName - Directory containing assets\n     */\n    public getAssets(folderName?: string): Promise<IAsset[]> {\n        const folderPath = [this.options.folderPath, folderName].join(\"/\");\n        return IpcRendererProxy.send(`${PROXY_NAME}:getAssets`, [folderPath]);\n    }\n}\n","export default class Guard {\n    /**\n     * Validates the string express is not null or empty, otherwise throws an exception\n     * @param value - The value to validate\n     * @param paramName - The name of the parameter to validate\n     * @param message - The error message to return on invalid value\n     */\n    public static empty(value: string, paramName?: string, message?: string) {\n        if ((!!value === false || value.trim().length === 0)) {\n            message = message || (`'${paramName || \"value\"}' cannot be null or empty`);\n            throw new Error(message);\n        }\n    }\n\n    /**\n     * Validates the value is not null, otherwise throw an exception\n     * @param value - The value to validate\n     * @param paramName - The name of the parameter to validate\n     * @param message - The error message to return on invalid value\n     */\n    public static null(value: any, paramName?: string, message?: string) {\n        if ((!!value === false)) {\n            message = message || (`'${paramName || \"value\"}' cannot be null or undefined`);\n            throw new Error(message);\n        }\n    }\n\n    /**\n     * Validates the value meets the specified expectation, otherwise throws an exception\n     * @param value - The value to validate\n     * @param predicate - The predicate used for validation\n     * @param paramName - The name of the parameter to validate\n     * @param message - The error message to return on invalid value\n     */\n    public static expression<T>(value: T, predicate: (value: T) => boolean, paramName?: string, message?: string) {\n        if (!!value === false || !predicate(value)) {\n            message = message || (`'${paramName || \"value\"}' is not a valid value`);\n            throw new Error(message);\n        }\n    }\n}\n","import Guard from \"../../../common/guard\";\nimport { TFRecordsImageMessage, Features, Feature, FeatureList,\n    BytesList, Int64List, FloatList } from \"./tensorFlowRecordsProtoBuf_pb\";\nimport { crc32c, maskCrc, textDecode, readInt64 } from \"./tensorFlowHelpers\";\nimport { FeatureType } from \"./tensorFlowBuilder\";\n\n/**\n * @name - TFRecords Read Class\n * @description - Read a TFRecords object\n */\nexport class TFRecordsReader {\n    private imageMessages: TFRecordsImageMessage[];\n\n    constructor(tfrecords: Buffer) {\n        Guard.null(tfrecords);\n\n        this.imageMessages = [];\n        let position = 0;\n\n        while (position < tfrecords.length) {\n            const lengthBuffer = tfrecords.slice(position, position + 8);\n            const dataLength = readInt64(lengthBuffer);\n            const lengthCrc = maskCrc(crc32c(lengthBuffer));\n            position += 8;\n\n            const expectedLengthCrc = tfrecords.readUInt32LE(position);\n            position += 4;\n\n            if (lengthCrc !== expectedLengthCrc) {\n                console.log(\"Wrong Length CRC\");\n                break;\n            }\n\n            const dataBuffer = tfrecords.slice(position, position + dataLength);\n            const dataCrc = maskCrc(crc32c(dataBuffer));\n            position += dataLength;\n\n            const expectedDataCrc = tfrecords.readUInt32LE(position);\n            position += 4;\n\n            if (dataCrc !== expectedDataCrc) {\n                console.log(\"Wrong Data CRC\");\n                break;\n            }\n\n            // Deserialize TFRecord from dataBuffer\n            const imageMessage: TFRecordsImageMessage = TFRecordsImageMessage.deserializeBinary(dataBuffer);\n\n            this.imageMessages.push(imageMessage);\n        }\n    }\n\n    /**\n     * @description - Return the number of TFRecords read\n     */\n    get length(): number {\n        return this.imageMessages.length;\n    }\n\n    /**\n     * @description - Return the TFRecords in a JSON Object Array format\n     */\n    public toArray(): object[] {\n        return this.imageMessages.map((imageMessage) => imageMessage.toObject());\n    }\n\n    /**\n     * @recordPos - Record Position\n     * @key - Feature Key\n     * @type - Feature Type\n     * @description - Get a Int64 | Float | String | Binary value\n     */\n    public getFeature(recordPos: number, key: string, type: FeatureType): string | number | Uint8Array {\n        const message = this.imageMessages[recordPos];\n        const feature = message.getContext().getFeatureMap().get(key);\n\n        switch (type) {\n            case FeatureType.String:\n                return textDecode(feature.getBytesList().array[0][0]);\n            case FeatureType.Binary:\n                return feature.getBytesList().array[0][0];\n            case FeatureType.Int64:\n                return feature.getInt64List().array[0][0];\n            case FeatureType.Float:\n                return feature.getFloatList().array[0][0];\n        }\n    }\n\n    /**\n     * @recordPos - Record Position\n     * @key - Feature Key\n     * @type - Feature Type\n     * @description - Get an array of Int64 | Float | String | Binary value\n     */\n    public getArrayFeature(recordPos: number, key: string, type: FeatureType): string[] | number[] | Uint8Array[] {\n        const message = this.imageMessages[recordPos];\n        const feature = message.getContext().getFeatureMap().get(key);\n\n        switch (type) {\n            case FeatureType.String:\n                return feature.getBytesList().array[0].map((buffer) => textDecode(buffer));\n            case FeatureType.Binary:\n                return feature.getBytesList().array[0];\n            case FeatureType.Int64:\n                return feature.getInt64List().array[0];\n            case FeatureType.Float:\n                return feature.getFloatList().array[0];\n        }\n    }\n}\n","import React, { SyntheticEvent, ReactElement } from \"react\";\nimport { Modal, ModalHeader, ModalBody, ModalFooter } from \"reactstrap\";\n\n/**\n * Accepts any number of parameters and returns a string\n */\nexport type MessageFormatHandler = (...params: any[]) => string;\n\n/**\n * Properties for Message Box component\n * @member title - Title for message box\n * @member message - Message for message box\n * @member params - Array of additional parameters\n * @member onButtonSelect - Function to call when button is selected\n * @member onCancel - Function to call upon cancel\n */\nexport interface IMessageBoxProps {\n    title: string;\n    message: string | ReactElement<any> | MessageFormatHandler;\n    params?: any[];\n    onButtonSelect?: (button: HTMLButtonElement) => void;\n    onCancel?: () => void;\n    show?: boolean;\n    hideFooter?: boolean;\n}\n\n/**\n * State for Message Box\n * @member isOpen - Message box is open\n * @member isRendered - Message box is rendered\n * @member isButtonSelected - Message box button is selected\n */\nexport interface IMessageBoxState {\n    isOpen: boolean;\n    isRendered: boolean;\n    isButtonSelected: boolean;\n}\n\n/**\n * Generic modal that displays a message\n */\nexport default class MessageBox extends React.Component<IMessageBoxProps, IMessageBoxState> {\n    constructor(props, context) {\n        super(props, context);\n\n        this.state = {\n            isOpen: props.show,\n            isRendered: props.show,\n            isButtonSelected: false,\n        };\n\n        this.toggle = this.toggle.bind(this);\n        this.open = this.open.bind(this);\n        this.close = this.close.bind(this);\n        this.onFooterClick = this.onFooterClick.bind(this);\n        this.onClosed = this.onClosed.bind(this);\n    }\n\n    public render() {\n        if (!this.state.isRendered) {\n            return null;\n        }\n\n        return (\n            <Modal className=\"messagebox-modal\"\n                isOpen={this.state.isOpen}\n                onClosed={this.onClosed}>\n                <ModalHeader toggle={this.toggle}>{this.props.title}</ModalHeader>\n                <ModalBody>{this.getMessage(this.props.message)}</ModalBody>\n                {!this.props.hideFooter && <ModalFooter onClick={this.onFooterClick}>\n                    {this.props.children}\n                </ModalFooter>}\n            </Modal>\n        );\n    }\n\n    public open(): void {\n        this.setState({\n            isOpen: true,\n            isRendered: true,\n            isButtonSelected: false,\n        });\n    }\n\n    public close(): void {\n        this.setState({\n            isOpen: false,\n        }, () => {\n            if (!this.state.isButtonSelected && this.props.onCancel) {\n                this.props.onCancel();\n            }\n        });\n    }\n\n    public componentDidUpdate(prevProps: Readonly<IMessageBoxProps>): void {\n        if (prevProps.show !== this.props.show) {\n            this.setState({\n                isOpen: this.props.show,\n                isRendered: this.props.show,\n            });\n        }\n    }\n\n    private getMessage = (message: string | MessageFormatHandler | ReactElement<any>) => {\n        if (typeof message === \"function\") {\n            return message.apply(this, this.props.params);\n        } else {\n            return message;\n        }\n    }\n\n    private onFooterClick(evt: SyntheticEvent) {\n        const htmlElement = evt.target as HTMLButtonElement;\n        if (htmlElement.tagName === \"BUTTON\") {\n            this.setState({\n                isButtonSelected: true,\n            }, () => {\n                this.close();\n                if (this.props.onButtonSelect) {\n                    this.props.onButtonSelect(htmlElement);\n                }\n            });\n        }\n    }\n\n    private toggle() {\n        if (this.state.isOpen) {\n            this.close();\n        } else {\n            this.open();\n        }\n    }\n\n    private onClosed() {\n        this.setState({\n            isRendered: false,\n        });\n    }\n}\n","import { Env } from \"./common/environment\";\nimport { reactAI } from \"react-appinsights\";\nimport history from \"./history\";\nimport { ApplicationInsights, IExceptionTelemetry, SeverityLevel } from \"@microsoft/applicationinsights-web\";\nimport { version } from \"../package.json\";\nimport { isElectron } from \"./common/hostProcess\";\nimport { Action } from \"redux\";\nimport { IAppError } from \"./models/applicationState\";\nimport { config } from \"dotenv\";\n\n// vott-app-insights\nconfig();\nconst instrumentationKey = process.env.REACT_APP_INSTRUMENTATION_KEY;\n\nlet debug = false;\nlet maxBatchSize = 250;\n\nif (Env.get() !== \"production\") {\n    // for development/testing\n    // myho-appinsights\n    debug = true;\n    maxBatchSize = 0;  // send telemetry as soon as it's collected\n}\n\nlet appInsights;\n\n/**\n * create an app insights connection for web version\n * do nothing for electron mode\n */\nexport function setUpAppInsights() {\n    if (isElectron()) {\n        return;\n    }\n\n    reactAI.setContext({\n        AppVersion: version,\n    });\n\n    const config = {\n        instrumentationKey,\n        maxBatchSize,\n        extensions: [reactAI],\n        extensionConfig: {\n            [reactAI.extensionId]: {\n                debug,\n                history,  // required for tracking router changes\n            },\n        },\n    };\n\n    appInsights = new ApplicationInsights({config});\n    appInsights.loadAppInsights();\n}\n\n/**\n * send exception event to AppInsights\n * @param appError object containing the error type and error message\n */\nexport function trackError(appError: IAppError): void {\n    if (isElectron()) {\n        return;\n    }\n\n    const error = new Error(appError.errorCode);\n    const exceptionTelemetry: IExceptionTelemetry = {\n        error,\n        properties: {\n            message: appError.message,\n        },\n        severityLevel: SeverityLevel.Error,\n    };\n\n    appInsights.trackException(exceptionTelemetry);\n}\n\n/**\n * send custom event tracking redux action\n * @param action a redux action\n */\nexport function trackReduxAction(action: Action): void {\n    if (isElectron()) {\n        return;\n    }\n\n    appInsights.trackEvent({\n        name: action.type,\n    });\n}\n","export const itemTemplate = \"\\\nitem {\\n\\\n id: ${id}\\n\\\n name: '${tag}'\\n\\\n}\\n\";\n\nexport const annotationTemplate = \"\\\n<annotation verified=\\\"yes\\\">\\n\\\n    <folder>Annotation</folder>\\n\\\n    <filename>${fileName}</filename>\\n\\\n    <path>${filePath}</path>\\n\\\n    <source>\\n\\\n        <database>Unknown</database>\\n\\\n    </source>\\n\\\n    <size>\\n\\\n        <width>${width}</width>\\n\\\n        <height>${height}</height>\\n\\\n        <depth>3</depth>\\n\\\n    </size\\>\\n\\\n    <segmented>0</segmented>\\n\\\n    ${objects}\\n\\\n</annotation\\>\\n\";\n\nexport const objectTemplate = \"\\\n<object>\\n\\\n    <name>${name}</name>\\n\\\n    <pose>Unspecified</pose>\\n\\\n    <truncated>0</truncated>\\n\\\n    <difficult>0</difficult>\\n\\\n    <bndbox>\\n\\\n        <xmin>${xmin}</xmin>\\n\\\n        <ymin>${ymin}</ymin>\\n\\\n        <xmax>${xmax}</xmax>\\n\\\n        <ymax>${ymax}</ymax>\\n\\\n    </bndbox>\\n\\\n</object>\";\n","import React, { RefObject } from \"react\";\nimport { Button } from \"reactstrap\";\nimport MessageBox, { IMessageBoxProps } from \"../messageBox/messageBox\";\n\n/**\n * Properties for Alert Component\n * @member closeButtonText - Text displayed on 'Close' button. Default 'OK'\n * @member closeButtonColor - Color of 'Close' button. Default 'primary'\n * @member onClose - Function to execute on alert close\n */\nexport interface IAlertProps extends IMessageBoxProps {\n    closeButtonText?: string;\n    closeButtonColor?: string;\n    onClose?: () => void;\n    show?: boolean;\n}\n\n/**\n * State for Alert Component\n * @member params - Arguments passed in the open command\n */\nexport interface IAlertState {\n    params: any[];\n}\n\n/**\n * @name - Alert\n * @description - Generic Alert dialog\n */\nexport default class Alert extends React.Component<IAlertProps, IAlertState> {\n    private messageBox: RefObject<MessageBox>;\n\n    constructor(props, context) {\n        super(props, context);\n\n        this.state = {\n            params: null,\n        };\n\n        this.messageBox = React.createRef<MessageBox>();\n\n        this.open = this.open.bind(this);\n        this.close = this.close.bind(this);\n        this.onCloseClick = this.onCloseClick.bind(this);\n    }\n\n    public render() {\n        return (\n            <MessageBox\n                ref={this.messageBox}\n                title={this.props.title}\n                message={this.props.message}\n                params={this.state.params}\n                show={this.props.show}\n            >\n                <Button\n                    autoFocus={true}\n                    color={this.props.closeButtonColor || \"primary\"}\n                    onClick={this.onCloseClick}\n                >\n                    {this.props.closeButtonText || \"OK\"}\n                </Button>\n            </MessageBox>\n        );\n    }\n\n    /**\n     * Open Alert dialog\n     * @param params - Arguments to be set in state\n     */\n    public open(...params: any[]): void {\n        this.setState({ params }, () => this.messageBox.current.open());\n    }\n\n    /**\n     * Close Alert dialog\n     */\n    public close(): void {\n        this.messageBox.current.close();\n    }\n\n    private onCloseClick() {\n        if (this.props.onClose) {\n            this.props.onClose.apply(null, this.state.params);\n        }\n    }\n}\n","import { createHashHistory } from \"history\";\nexport default createHashHistory();\n","/**\n * Redux Action types\n */\nexport enum ActionTypes {\n    // App\n    TOGGLE_DEV_TOOLS_SUCCESS = \"TOGGLE_DEV_TOOLS_SUCCESS\",\n    OPEN_LOCAL_FOLDER_SUCCESS = \"OPEN_LOCAL_FOLDER_SUCCESS\",\n    REFRESH_APP_SUCCESS = \"REFRESH_APP_SUCCESS\",\n    SAVE_APP_SETTINGS_SUCCESS = \"SAVE_APP_SETTINGS_SUCCESS\",\n    ENSURE_SECURITY_TOKEN_SUCCESS = \"ENSURE_SECURITY_TOKEN_SUCCESS\",\n\n    // Projects\n    LOAD_PROJECT_SUCCESS = \"LOAD_PROJECT_SUCCESS\",\n    SAVE_PROJECT_SUCCESS = \"SAVE_PROJECT_SUCCESS\",\n    DELETE_PROJECT_SUCCESS = \"DELETE_PROJECT_SUCCESS\",\n    CLOSE_PROJECT_SUCCESS = \"CLOSE_PROJECT_SUCCESS\",\n    LOAD_PROJECT_ASSETS_SUCCESS = \"LOAD_PROJECT_ASSETS_SUCCESS\",\n    EXPORT_PROJECT_SUCCESS = \"EXPORT_PROJECT_SUCCESS\",\n    UPDATE_PROJECT_TAG_SUCCESS = \"UPDATE_PROJECT_TAG_SUCCESS\",\n    DELETE_PROJECT_TAG_SUCCESS = \"DELETE_PROJECT_TAG_SUCCESS\",\n\n    // Connections\n    LOAD_CONNECTION_SUCCESS = \"LOAD_CONNECTION_SUCCESS\",\n    SAVE_CONNECTION_SUCCESS = \"SAVE_CONNECTION_SUCCESS\",\n    DELETE_CONNECTION_SUCCESS = \"DELETE_CONNECTION_SUCCESS\",\n\n    // Assets\n    SAVE_ASSET_METADATA_SUCCESS = \"SAVE_ASSET_METADATA_SUCCESS\",\n    LOAD_ASSET_METADATA_SUCCESS = \"LOAD_ASSET_METADATA_SUCCESS\",\n\n    ANY_OTHER_ACTION = \"ANY_OTHER_ACTION_SUCCESS\",\n\n    SHOW_ERROR= \"SHOW_ERROR\",\n    CLEAR_ERROR = \"CLEAR_ERROR\",\n}\n","import { TFRecordsImageMessage, Features, Feature, FeatureList,\n    BytesList, Int64List, FloatList } from \"./tensorFlowRecordsProtoBuf_pb\";\nimport { crc32c, maskCrc, getInt64Buffer, getInt32Buffer, textEncode } from \"./tensorFlowHelpers\";\n\n/**\n * @name - TFRecords Feature Type\n * @description - Defines the type of TFRecords Feature\n * @member String - Specifies a Feature as a string\n * @member Binary - Specifies a Feature as a binary UInt8Array\n * @member Int64 - Specifies a Feature as a Int64\n * @member Float - Specifies a Feature as a Float\n */\nexport enum FeatureType {\n    String = 0,\n    Binary = 1,\n    Int64 = 2,\n    Float = 3,\n}\n\n/**\n * @name - TFRecords Builder Class\n * @description - Create a TFRecords object\n */\nexport class TFRecordsBuilder {\n    /**\n     * @records - An Array of TFRecord Buffer created with releaseTFRecord()\n     * @description - Return a Buffer representation of a TFRecords object\n     */\n    public static buildTFRecords(records: Buffer[]): Buffer {\n        return Buffer.concat(records.map((record) => {\n            const length = record.length;\n\n            // Get TFRecords CRCs for TFRecords Header and Footer\n            const bufferLength = getInt64Buffer(length);\n            const bufferLengthMaskedCRC = getInt32Buffer(maskCrc(crc32c(bufferLength)));\n            const bufferDataMaskedCRC = getInt32Buffer(maskCrc(crc32c(record)));\n\n            // Concatenate all TFRecords Header, Data and Footer buffer\n            return Buffer.concat([bufferLength,\n                                  bufferLengthMaskedCRC,\n                                  record,\n                                  bufferDataMaskedCRC]);\n        }));\n    }\n\n    private features: Features;\n\n    constructor() {\n        this.features = new Features();\n    }\n\n    /**\n     * @key - Feature Key\n     * @type - Feature Type\n     * @value - A Int64 | Float | String | Binary value\n     * @description - Add a Int64 | Float | String | Binary value feature\n     */\n    public addFeature(key: string, type: FeatureType, value: string | number | Uint8Array) {\n        this.addArrayFeature(key, type, [value]);\n    }\n\n    /**\n     * @key - Feature Key\n     * @type - Feature Type\n     * @value - An Array of Int64 | Float | String | Binary values\n     * @description - Add an Array of Int64 | Float | String | Binary values feature\n     */\n    public addArrayFeature<T extends string | number | Uint8Array>(key: string, type: FeatureType, values: T[]) {\n        const feature = new Feature();\n\n        switch (type) {\n            case FeatureType.String:\n                const stringList = new BytesList();\n                values.forEach((value) => {\n                    stringList.addValue(textEncode(value as string));\n                });\n                feature.setBytesList(stringList);\n                break;\n            case FeatureType.Binary:\n                const byteList = new BytesList();\n                values.forEach((value) => {\n                    byteList.addValue(value);\n                });\n                feature.setBytesList(byteList);\n                break;\n            case FeatureType.Int64:\n                const intList = new Int64List();\n                values.forEach((value) => {\n                    intList.addValue(value);\n                });\n                feature.setInt64List(intList);\n                break;\n            case FeatureType.Float:\n                const floatList = new FloatList();\n                values.forEach((value) => {\n                    floatList.addValue(value);\n                });\n                feature.setFloatList(floatList);\n                break;\n            default:\n                break;\n        }\n\n        const featuresMap = this.features.getFeatureMap();\n        featuresMap.set(key, feature);\n    }\n\n    /**\n     * @description - Return a Buffer representation of a single TFRecord\n     */\n    public build(): Buffer {\n        // Get Protocol Buffer TFRecords object with exported image features\n        const imageMessage = new TFRecordsImageMessage();\n        imageMessage.setContext(this.features);\n\n        // Serialize Protocol Buffer in a buffer\n        const bytes = imageMessage.serializeBinary();\n        return new Buffer(bytes);\n    }\n}\n","import { Middleware, Dispatch, AnyAction, MiddlewareAPI } from \"redux\";\n\nexport interface ILocalStorageMiddlewareOptions {\n    paths: string[];\n}\n\nexport function createLocalStorage(config: ILocalStorageMiddlewareOptions): Middleware {\n    return (store: MiddlewareAPI<Dispatch<AnyAction>>) => (next: Dispatch<AnyAction>) => (action: any) => {\n        const result = next(action);\n        const state = store.getState();\n\n        config.paths.forEach((path) => {\n            if (state[path]) {\n                const json = JSON.stringify(state[path]);\n                localStorage.setItem(path, json);\n            }\n        });\n\n        return result;\n    };\n}\n\nexport function mergeInitialState(state: any, paths: string[]) {\n    const initialState = { ...state };\n    paths.forEach((path) => {\n        const json = localStorage.getItem(path);\n        if (json) {\n            initialState[path] = JSON.parse(json);\n        }\n    });\n\n    return initialState;\n}\n","import { IStorageProvider } from \"./storageProviderFactory\";\nimport { IAsset, AssetType, StorageType } from \"../../models/applicationState\";\nimport { AssetService } from \"../../services/assetService\";\nimport {\n    TokenCredential, AnonymousCredential, ContainerURL,\n    StorageURL, ServiceURL, Credential, Aborter, BlockBlobURL,\n} from \"@azure/storage-blob\";\nimport { BlobDeleteResponse } from \"@azure/storage-blob/typings/lib/generated/lib/models\";\n\n/**\n * Options for Azure Cloud Storage\n * @member accountName - Name of Storage Account\n * @member containerName - Name of targeted container\n * @member createContainer - Option for creating container in `initialize()`\n * @member sas - Shared Access Signature (SAS) token for accessing Azure Blob Storage\n * @member oauthToken - Not yet implemented. Optional token for accessing Azure Blob Storage\n */\nexport interface IAzureCloudStorageOptions {\n    accountName: string;\n    containerName: string;\n    createContainer: boolean;\n    sas?: string;\n    oauthToken?: string;\n}\n\n/**\n * Storage Provider for Azure Blob Storage\n */\nexport class AzureBlobStorage implements IStorageProvider {\n\n    /**\n     * Storage type\n     * @returns - StorageType.Cloud\n     */\n    public storageType: StorageType = StorageType.Cloud;\n\n    constructor(private options?: IAzureCloudStorageOptions) { }\n\n    /**\n     * Initialize connection to Blob Storage account & container\n     * If `createContainer` was specified in options, this function\n     * creates the container. Otherwise, validates that container\n     * is contained in list of containers\n     * @throws - Error if container does not exist or not able to\n     * connect to Azure Blob Storage\n     */\n    public async initialize(): Promise<void> {\n        const containerName = this.options.containerName;\n        if (this.options.createContainer) {\n            await this.createContainer(containerName);\n        } else {\n            const containers = await this.listContainers(null);\n            if (containers.indexOf(containerName) === -1) {\n                throw new Error(`Container \"${containerName}\" does not exist`);\n            }\n        }\n    }\n\n    /**\n     * Reads text from specified blob\n     * @param blobName - Name of blob in container\n     */\n    public async readText(blobName: string): Promise<string> {\n        const blockBlobURL = this.getBlockBlobURL(blobName);\n        const downloadResponse = await blockBlobURL.download(Aborter.none, 0);\n\n        return await this.bodyToString(downloadResponse);\n    }\n\n    /**\n     * Reads Buffer from specified blob\n     * @param blobName - Name of blob in container\n     */\n    public async readBinary(blobName: string) {\n        const text = await this.readText(blobName);\n        return Buffer.from(text);\n    }\n\n    /**\n     * Writes text to blob in container\n     * @param blobName - Name of blob in container\n     * @param content - Content to write to blob (string or Buffer)\n     */\n    public async writeText(blobName: string, content: string | Buffer) {\n        const blockBlobURL = this.getBlockBlobURL(blobName);\n        await blockBlobURL.upload(\n            Aborter.none,\n            content,\n            content.length,\n        );\n    }\n\n    /**\n     * Writes buffer to blob in container\n     * @param blobName - Name of blob in container\n     * @param content - Buffer to write to blob\n     */\n    public writeBinary(blobName: string, content: Buffer) {\n        return this.writeText(blobName, content);\n    }\n\n    /**\n     * Deletes file from container\n     * @param blobName - Name of blob in container\n     */\n    public async deleteFile(blobName: string): Promise<void> {\n        await this.getBlockBlobURL(blobName).delete(Aborter.none);\n    }\n\n    /**\n     * Lists files in container\n     * @param path - NOT USED IN CURRENT IMPLEMENTATION. Only uses container\n     * as specified in Azure Cloud Storage Options. Included to satisfy\n     * Storage Provider interface\n     * @param ext - Extension of files to filter on when retrieving files\n     * from container\n     */\n    public async listFiles(path: string, ext?: string): Promise<string[]> {\n        const result: string[] = [];\n        let marker;\n        const containerURL = this.getContainerURL();\n        do {\n            const listBlobsResponse = await containerURL.listBlobFlatSegment(\n                Aborter.none,\n                marker,\n            );\n            marker = listBlobsResponse.nextMarker;\n            for (const blob of listBlobsResponse.segment.blobItems) {\n                if ((ext && blob.name.endsWith(ext)) || !ext) {\n                    result.push(blob.name);\n                }\n            }\n        } while (marker);\n\n        return result;\n    }\n\n    /**\n     * Lists the containers with in the Azure Blob Storage account\n     * @param path - NOT USED IN CURRENT IMPLEMENTATION. Lists containers in storage account.\n     * Path does not really make sense in this scenario. Included to satisfy interface\n     */\n    public async listContainers(path: string) {\n        const result: string[] = [];\n        let marker;\n        do {\n            const listContainersResponse = await this.getServiceURL().listContainersSegment(\n                Aborter.none,\n                marker,\n            );\n            marker = listContainersResponse.nextMarker;\n            for (const container of listContainersResponse.containerItems) {\n                result.push(container.name);\n            }\n        } while (marker);\n\n        return result;\n    }\n\n    /**\n     * Creates container specified in Azure Cloud Storage options\n     * @param containerName - NOT USED IN CURRENT IMPLEMENTATION. Because `containerName`\n     * is a required attribute of the Azure Cloud Storage options used to instantiate the\n     * provider, this function creates that container. Included to satisfy interface\n     */\n    public async createContainer(containerName: string): Promise<void> {\n        const containerURL = this.getContainerURL();\n        try {\n            await containerURL.create(Aborter.none);\n        } catch (e) {\n            if (e.statusCode === 409) {\n                return;\n            }\n\n            throw e;\n        }\n    }\n\n    /**\n     * Deletes container specified in Azure Cloud Storage options\n     * @param containerName - NOT USED IN CURRENT IMPLEMENTATION. Because `containerName`\n     * is a required attribute of the Azure Cloud Storage options used to instantiate the\n     * provider, this function creates that container. Included to satisfy interface\n     */\n    public async deleteContainer(containerName: string): Promise<void> {\n        await this.getContainerURL().delete(Aborter.none);\n    }\n\n    /**\n     * Retrieves assets from Azure Blob Storage container\n     * @param containerName - Container from which to retrieve assets. Defaults to\n     * container specified in Azure Cloud Storage options\n     */\n    public async getAssets(containerName?: string): Promise<IAsset[]> {\n        containerName = (containerName) ? containerName : this.options.containerName;\n        const files = await this.listFiles(containerName);\n        const result: IAsset[] = [];\n        for (const file of files) {\n            const url = this.getUrl(file);\n            const asset = AssetService.createAssetFromFilePath(url, this.getFileName(url));\n            if (asset.type !== AssetType.Unknown) {\n                result.push(asset);\n            }\n        }\n        return result;\n    }\n\n    /**\n     *\n     * @param url - URL for Azure Blob\n     */\n    public getFileName(url: string) {\n        const pathParts = url.split(\"/\");\n        return pathParts[pathParts.length - 1].split(\"?\")[0];\n    }\n\n    /**\n     * @returns - URL for Azure Blob Storage account with SAS token appended if specified\n     */\n    public getAccountUrl(): string {\n        return `https://${this.options.accountName}.blob.core.windows.net` + (this.options.sas || \"\");\n    }\n\n    /**\n     * Gets a Credential object. OAuthToken if specified in options, anonymous\n     * credential otherwise (uses the SAS token)\n     * @returns - Credential object from Azure Storage SDK\n     */\n    private getCredential(): Credential {\n        if (this.options.oauthToken) {\n            return new TokenCredential(this.options.oauthToken);\n        } else {\n            return new AnonymousCredential();\n        }\n    }\n\n    private getServiceURL(): ServiceURL {\n        const credential = this.getCredential();\n        const pipeline = StorageURL.newPipeline(credential);\n        const accountUrl = this.getAccountUrl();\n        const serviceUrl = new ServiceURL(\n            accountUrl,\n            pipeline,\n        );\n        return serviceUrl;\n    }\n\n    private getContainerURL(serviceURL?: ServiceURL, containerName?: string): ContainerURL {\n        return ContainerURL.fromServiceURL(\n            (serviceURL) ? serviceURL : this.getServiceURL(),\n            (containerName) ? containerName : this.options.containerName,\n        );\n    }\n\n    private getBlockBlobURL(blobName: string): BlockBlobURL {\n        const containerURL = this.getContainerURL();\n        return BlockBlobURL.fromContainerURL(\n            containerURL,\n            blobName,\n        );\n    }\n\n    private getUrl(blobName: string): string {\n        return this.getBlockBlobURL(blobName).url;\n    }\n\n    private async bodyToString(\n        response: {\n            readableStreamBody?: NodeJS.ReadableStream;\n            blobBody?: Promise<Blob>;\n        },\n        // tslint:disable-next-line:variable-name\n        _length?: number,\n    ): Promise<string> {\n        const blob = await response.blobBody!;\n        return this.blobToString(blob);\n    }\n\n    private async blobToString(blob: Blob): Promise<string> {\n        const fileReader = new FileReader();\n\n        return new Promise<string>((resolve, reject) => {\n            fileReader.onloadend = (ev: any) => {\n                resolve(ev.target!.result);\n            };\n            fileReader.onerror = reject;\n            fileReader.readAsText(blob);\n        });\n    }\n}\n","import axios, { AxiosRequestConfig } from \"axios\";\nimport { IAsset, AssetType, IFileInfo } from \"../models/applicationState\";\nimport Guard from \"./guard\";\nimport { TFRecordsReader } from \"../providers/export/tensorFlowRecords/tensorFlowReader\";\nimport { FeatureType } from \"../providers/export/tensorFlowRecords/tensorFlowBuilder\";\n\n/**\n * Helper class for reading HTML files\n */\nexport default class HtmlFileReader {\n\n    public static videoAssetFiles = {};\n\n    /**\n     * Reads the file and returns the string value contained\n     * @param file HTML file to read\n     */\n    public static readAsText(file: File): Promise<IFileInfo> {\n        Guard.null(file);\n        let fileInfo: IFileInfo;\n\n        return new Promise<IFileInfo>((resolve, reject) => {\n            const reader = new FileReader();\n            reader.onerror = reject;\n            reader.onload = () => {\n                if (reader.result) {\n                    fileInfo = {\n                        content: reader.result,\n                        file,\n                    };\n                    resolve(fileInfo);\n                } else {\n                    reject();\n                }\n            };\n\n            try {\n                reader.readAsText(file);\n            } catch (err) {\n                reject(err);\n            }\n        });\n    }\n\n    /**\n     * Reads attributes from asset depending on type (video or image)\n     * @param asset Asset to read from\n     */\n    public static async readAssetAttributes(asset: IAsset)\n        : Promise<{ width: number, height: number, duration?: number }> {\n        Guard.null(asset);\n\n        switch (asset.type) {\n            case AssetType.Image:\n                return await this.readImageAttributes(asset.path);\n            case AssetType.Video:\n                return await this.readVideoAttributes(asset.path);\n            case AssetType.TFRecord:\n                return await this.readTFRecordAttributes(asset);\n            default:\n                throw new Error(\"Asset not supported\");\n        }\n    }\n\n    public static async readAssetAttributesWithBuffer(base64: string)\n        : Promise<{ width: number, height: number, duration?: number }> {\n        Guard.null(base64);\n\n        return await this.readImageAttributes(\"data:image;base64,\" + base64);\n    }\n\n    /**\n     * Downloads the binary blob from the asset path\n     * @param asset The asset to download\n     */\n    public static async getAssetBlob(asset: IAsset): Promise<Blob> {\n        Guard.null(asset);\n\n        const config: AxiosRequestConfig = {\n            responseType: \"blob\",\n        };\n\n        let data = null;\n        if (asset.type === AssetType.VideoFrame) {\n            data = await this.getAssetFrameImage(asset);\n        } else {\n            // Download the asset binary from the storage provider\n            const response = await axios.get<Blob>(asset.path, config);\n            if (response.status !== 200) {\n                throw new Error(\"Error downloading asset binary\");\n            }\n            data = await response.data;\n        }\n\n        return data;\n    }\n\n    /**\n     * Downloads the binary array from the asset path\n     * @param asset The asset to download\n     */\n    public static async getAssetArray(asset: IAsset): Promise<ArrayBuffer> {\n        const blob = await this.getAssetBlob(asset);\n        return await new Response(blob).arrayBuffer();\n    }\n\n    /**\n     * Extracts the specified image frame from a video asset\n     * @param asset The asset video frame to retrieve from the parent video\n     */\n    public static async getAssetFrameImage(asset: IAsset): Promise<Blob> {\n        return new Promise<Blob>((resolve, reject) => {\n            const cachingEnabled = false;\n            let refresh = !cachingEnabled;\n            let video: HTMLVideoElement = this.videoAssetFiles[asset.parent.name];\n\n            // Ensure the asset name includes jpg file extension\n            if (!asset.name.toLowerCase().endsWith(\".jpg\")) {\n                asset.name += \".jpg\";\n            }\n\n            if (!video) {\n                video = document.createElement(\"video\");\n                if (cachingEnabled) {\n                    this.videoAssetFiles[asset.parent.name] = video;\n                    refresh = true;\n                }\n            }\n\n            video.onloadedmetadata = () => {\n                video.currentTime = asset.timestamp;\n            };\n            video.onseeked = () => {\n                const canvas = document.createElement(\"canvas\");\n                canvas.height = video.videoHeight;\n                canvas.width = video.videoWidth;\n                const ctx = canvas.getContext(\"2d\");\n                ctx.drawImage(video, 0, 0, canvas.width, canvas.height);\n                canvas.toBlob(resolve);\n            };\n            video.onerror = reject;\n            if (refresh) {\n                video.src = asset.parent.path;\n            } else {\n                video.currentTime = asset.timestamp;\n            }\n        });\n    }\n\n    private static readVideoAttributes(url: string): Promise<{ width: number, height: number, duration: number }> {\n        return new Promise((resolve, reject) => {\n            const video = document.createElement(\"video\") as HTMLVideoElement;\n            video.onloadedmetadata = () => {\n                resolve({\n                    width: video.videoWidth,\n                    height: video.videoHeight,\n                    duration: video.duration,\n                });\n            };\n            video.onerror = reject;\n            video.src = url;\n        });\n    }\n\n    private static readImageAttributes(url: string): Promise<{ width: number, height: number }> {\n        return new Promise((resolve, reject) => {\n            const image = document.createElement(\"img\") as HTMLImageElement;\n            image.onload = () => {\n                resolve({\n                    width: image.naturalWidth,\n                    height: image.naturalHeight,\n                });\n            };\n            image.onerror = reject;\n            image.src = url;\n        });\n    }\n\n    private static async readTFRecordAttributes(asset: IAsset): Promise<{ width: number, height: number }> {\n        // Get from TFRecord Reader\n        const tfrecords = new Buffer(await this.getAssetArray(asset));\n        const reader = new TFRecordsReader(tfrecords);\n        const width = reader.getFeature(0, \"image/width\", FeatureType.Int64) as number;\n        const height = reader.getFeature(0, \"image/height\", FeatureType.Int64) as number;\n\n        return { width, height };\n    }\n}\n","import React, { Fragment } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Router } from \"react-router-dom\";\nimport { ToastContainer } from \"react-toastify\";\nimport Sidebar from \"./react/components/shell/sidebar\";\nimport MainContentRouter from \"./react/components/shell/mainContentRouter\";\nimport { IAppError, IApplicationState, IProject, ErrorCode } from \"./models/applicationState\";\nimport \"./App.scss\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport IAppErrorActions, * as appErrorActions from \"./redux/actions/appErrorActions\";\nimport { bindActionCreators } from \"redux\";\nimport { ErrorHandler } from \"./react/components/common/errorHandler/errorHandler\";\nimport { KeyboardManager } from \"./react/components/common/keyboardManager/keyboardManager\";\nimport { TitleBar } from \"./react/components/shell/titleBar\";\nimport { StatusBar } from \"./react/components/shell/statusBar\";\nimport { StatusBarMetrics } from \"./react/components/shell/statusBarMetrics\";\nimport { HelpMenu } from \"./react/components/shell/helpMenu\";\nimport history from \"./history\";\n\ninterface IAppProps {\n    currentProject?: IProject;\n    appError?: IAppError;\n    actions?: IAppErrorActions;\n}\n\nfunction mapStateToProps(state: IApplicationState) {\n    return {\n        currentProject: state.currentProject,\n        appError: state.appError,\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators(appErrorActions, dispatch),\n    };\n}\n\n/**\n * @name - App\n * @description - Root level component for VoTT Application\n */\n@connect(mapStateToProps, mapDispatchToProps)\nexport default class App extends React.Component<IAppProps> {\n    constructor(props, context) {\n        super(props, context);\n\n        this.state = {\n            currentProject: this.props.currentProject,\n        };\n    }\n\n    public componentDidCatch(error: Error) {\n        this.props.actions.showError({\n            errorCode: ErrorCode.GenericRenderError,\n            title: error.name,\n            message: error.message,\n        });\n    }\n\n    public render() {\n        const platform = global && global.process ? global.process.platform : \"web\";\n\n        return (\n            <Fragment>\n                <ErrorHandler\n                    error={this.props.appError}\n                    onError={this.props.actions.showError}\n                    onClearError={this.props.actions.clearError} />\n                {/* Don't render app contents during a render error */}\n                {(!this.props.appError || this.props.appError.errorCode !== ErrorCode.GenericRenderError) &&\n                    <KeyboardManager>\n                        <Router history={history}>\n                            <div className={`app-shell platform-${platform}`}>\n                                <TitleBar icon=\"fas fa-tags\"\n                                    title={this.props.currentProject ? this.props.currentProject.name : \"\"}>\n                                    <div className=\"app-help-menu-icon\"><HelpMenu/></div>\n                                </TitleBar>\n                                <div className=\"app-main\">\n                                    <Sidebar project={this.props.currentProject} />\n                                    <MainContentRouter />\n                                </div>\n                                <StatusBar>\n                                    <StatusBarMetrics project={this.props.currentProject} />\n                                </StatusBar>\n                                <ToastContainer className=\"vott-toast-container\" />\n                            </div>\n                        </Router >\n                    </KeyboardManager>\n                }\n            </Fragment>\n        );\n    }\n}\n","import React from \"react\";\nimport { IAssetProps } from \"./assetPreview\";\nimport { IAsset } from \"../../../../models/applicationState\";\nimport HtmlFileReader from \"../../../../common/htmlFileReader\";\nimport { TFRecordsReader } from \"../../../../providers/export/tensorFlowRecords/tensorFlowReader\";\nimport { FeatureType } from \"../../../../providers/export/tensorFlowRecords/tensorFlowBuilder\";\n\n/**\n * State for TFRecord Asset Image component\n * @member tfRecordImage64 - base64 representation of the image data\n * @member hasError - Whether or not there was an error loading the image data from the tf record\n */\nexport interface ITFRecordState {\n    tfRecordImage64: string;\n    hasError: boolean;\n}\n\n/**\n * React component that displays an image from a TFRecord asset file\n */\nexport class TFRecordAsset extends React.Component<IAssetProps, ITFRecordState> {\n    public state: ITFRecordState = {\n        tfRecordImage64: \"\",\n        hasError: false,\n    };\n\n    private image: React.RefObject<HTMLImageElement> = React.createRef();\n\n    public render() {\n        return (\n            <img ref={this.image}\n                src={this.state.tfRecordImage64}\n                onLoad={this.onLoad}\n                onError={this.onError}\n                crossOrigin=\"anonymous\" />\n        );\n    }\n\n    public async componentDidMount() {\n        await this.updateImage();\n    }\n\n    public async componentDidUpdate(prevProps: Readonly<IAssetProps>) {\n        if (this.props.asset !== prevProps.asset) {\n            await this.updateImage();\n        }\n    }\n\n    private updateImage = async (): Promise<void> => {\n        try {\n            const base64ImageData = await this.getTFRecordBase64Image(this.props.asset);\n            this.setState({\n                tfRecordImage64: base64ImageData,\n                hasError: !(!!base64ImageData),\n            });\n        } catch (e) {\n            this.setState({\n                hasError: true,\n            });\n\n            this.onError(e);\n        }\n    }\n\n    private onLoad = () => {\n        if (this.props.onLoaded) {\n            this.props.onLoaded(this.image.current);\n        }\n        if (this.props.onActivated) {\n            this.props.onActivated(this.image.current);\n        }\n        if (this.props.onDeactivated) {\n            this.props.onDeactivated(this.image.current);\n        }\n    }\n\n    private onError = (e: React.SyntheticEvent<Element>) => {\n        if (this.props.onError && (this.state.tfRecordImage64 || this.state.hasError)) {\n            this.props.onError(e);\n        }\n    }\n\n    private async getTFRecordBase64Image(asset: IAsset): Promise<string> {\n        const tfrecords = new Buffer(await HtmlFileReader.getAssetArray(asset));\n        const reader = new TFRecordsReader(tfrecords);\n        const buffer = reader.getFeature(0, \"image/encoded\", FeatureType.Binary) as Uint8Array;\n\n        // Get Base64\n        const image64 = btoa(buffer.reduce((data, byte) => data + String.fromCharCode(byte), \"\"));\n        return \"data:image;base64,\" + image64;\n    }\n}\n","import os from \"os\";\n\n/**\n * @name - Host Process\n * @description - Describes the host process\n * @member type - The type of the host process (electron, browser, etc)\n * @member release - The release string of the host process\n */\nexport interface IHostProcess {\n    type: HostProcessType;\n    release: string;\n}\n\n/**\n * @enum ELECTRON - Electron Host Process Type\n * @enum BROWSER - Browser Host Process Type\n */\nexport enum HostProcessType {\n    Electron = 1, // bits: 01\n    Browser = 2,  // bits: 10\n    All = 3,      // bits: 11\n}\n\nexport enum PlatformType {\n    Web = \"web\",\n    Windows = \"win32\",\n    Linux = \"linux\",\n    MacOS = \"darwin\",\n}\n\nfunction getHostProcess(): IHostProcess {\n    const osRelease = os.release().toLowerCase();\n    let hostProcessType: HostProcessType;\n    if (osRelease.indexOf(\"electron\") > -1 || process.env.HOST_TYPE === \"electron\") {\n        hostProcessType = HostProcessType.Electron;\n    } else {\n        hostProcessType = HostProcessType.Browser;\n    }\n\n    return {\n        release: osRelease,\n        type: hostProcessType,\n    };\n}\n\nexport function isElectron(): boolean {\n    return getHostProcess().type === HostProcessType.Electron;\n}\n\nexport function isBrowser(): boolean {\n    return getHostProcess().type === HostProcessType.Browser;\n}\n\nexport default getHostProcess;\n","import { Dispatch, Action } from \"redux\";\nimport { IAppError } from \"../../models/applicationState\";\nimport { createPayloadAction, IPayloadAction, createAction } from \"./actionCreators\";\nimport { ActionTypes } from \"./actionTypes\";\n\n/**\n * Action to display alert when there's an error in the app\n * @member showError\n * @member clearError\n * @interface\n */\nexport default interface IAppErrorActions {\n    showError(appError: IAppError): void;\n    clearError(): void;\n}\n\n/**\n * show alert popup to indicate error\n * @param appError {IAppError} the error to display in alert\n * @returns {(dispatch: Dispatch) => void}\n */\nexport function showError(appError: IAppError): (dispatch: Dispatch) => void {\n    return (dispatch: Dispatch) => {\n        dispatch(showErrorAction(appError));\n    };\n}\n\n/**\n * clear alert popup\n * @returns {(dispatch: Dispatch) => void}\n */\nexport function clearError(): (dispatch: Dispatch) => void {\n    return (dispatch: Dispatch) => {\n        dispatch(clearErrorAction());\n    };\n}\n\n/**\n * Show error action type\n */\nexport interface IShowAppErrorAction extends IPayloadAction<string, IAppError> {\n    type: ActionTypes.SHOW_ERROR;\n}\n\n/**\n * Clear error action type\n */\nexport interface IClearErrorAction extends Action<string> {\n    type: ActionTypes.CLEAR_ERROR;\n}\n\n/**\n * Instance of show error action\n */\nexport const showErrorAction = createPayloadAction<IShowAppErrorAction>(ActionTypes.SHOW_ERROR);\n\n/**\n * Instance of clear error action\n * @type {() => Action<IClearErrorAction[\"type\"]>}\n */\nexport const clearErrorAction = createAction<IClearErrorAction>(ActionTypes.CLEAR_ERROR);\n","import React from \"react\";\nimport { IAppError, ErrorCode, AppError } from \"../../../../models/applicationState\";\nimport { strings } from \"../../../../common/strings\";\nimport Alert from \"../alert/alert\";\nimport { Env } from \"../../../../common/environment\";\nimport { trackError } from \"../../../../telemetry\";\n\n/**\n * Component properties for ErrorHandler component\n */\nexport interface IErrorHandlerProps extends React.Props<ErrorHandler> {\n    error: IAppError;\n    onError: (error: IAppError) => void;\n    onClearError: () => void;\n}\n\n/**\n * Component for catching and handling global application errors\n */\nexport class ErrorHandler extends React.Component<IErrorHandlerProps> {\n    constructor(props, context) {\n        super(props, context);\n\n        this.onWindowError = this.onWindowError.bind(this);\n        this.onUnhandedRejection = this.onUnhandedRejection.bind(this);\n    }\n\n    public componentDidMount() {\n        window.addEventListener(\"error\", this.onWindowError, true);\n        window.addEventListener(\"unhandledrejection\", this.onUnhandedRejection, true);\n    }\n\n    public componentWillMount() {\n        window.removeEventListener(\"error\", this.onWindowError);\n        window.removeEventListener(\"unhandledrejection\", this.onUnhandedRejection);\n    }\n\n    public render() {\n        const showError = !!this.props.error;\n        let localizedError: IAppError = null;\n        if (showError) {\n            localizedError = this.getLocalizedError(this.props.error);\n        }\n\n        if (!showError) {\n            return null;\n        }\n\n        return (\n            <Alert title={localizedError ? localizedError.title : \"\"}\n                message={localizedError ? localizedError.message : \"\"}\n                closeButtonColor=\"secondary\"\n                show={showError}\n                onClose={this.props.onClearError} />\n        );\n    }\n\n    /**\n     * Unhandled errors that bubbled up to top of stack\n     * @param evt Error Event\n     */\n    private onWindowError(evt: ErrorEvent) {\n        this.handleError(evt.error);\n        evt.preventDefault();\n    }\n\n    /**\n     * Handles async / promise based errors\n     * @param evt Unhandled Rejection Event\n     */\n    private onUnhandedRejection(evt: any) {\n        this.handleError(evt.reason || evt.detail);\n        evt.preventDefault();\n    }\n\n    /**\n     * Handles various error format scenarios\n     * @param error The error to handle\n     */\n    private handleError(error: string | Error | AppError) {\n        if (!error) {\n            return;\n        }\n\n        // This is a special case where we don't need to throw an\n        // exception. The error is thrown from within a few layers\n        // of components, so we don't have access to ReactDnD (drag and drop)\n        // directly. The action is performed correctly, so we\n        // don't need to display the error here\n        if (this.isReactDnDError(error)) {\n            return;\n        }\n        let appError: IAppError = null;\n        // Promise rejection with reason\n        if (typeof (error) === \"string\") {\n            // Promise rejection with string base reason\n            appError = {\n                errorCode: ErrorCode.Unknown,\n                message: error || this.getUnknownErrorMessage(error),\n            };\n        } else if (error instanceof AppError) {\n            // Promise rejection with AppError\n            const reason = error as IAppError;\n            appError = {\n                title: reason.title || strings.errors.unknown.title,\n                errorCode: reason.errorCode,\n                message: reason.message || this.getUnknownErrorMessage(error),\n            };\n        } else if (error instanceof Error) {\n            // Promise rejection with other error like object\n            const reason = error as Error;\n            appError = {\n                title: reason.name || strings.errors.unknown.title,\n                errorCode: ErrorCode.Unknown,\n                message: reason.message || this.getUnknownErrorMessage(error),\n            };\n        } else {\n            appError = {\n                title: strings.errors.unknown.title,\n                errorCode: ErrorCode.Unknown,\n                message: this.getUnknownErrorMessage(error),\n            };\n        }\n\n        // appInsights: track error event\n        trackError(appError);\n\n        this.props.onError(appError);\n    }\n\n    private getUnknownErrorMessage(e) {\n        if (Env.get() !== \"production\") {\n            return (<pre>{JSON.stringify(e, null, 2)}</pre>);\n        } else {\n            return strings.errors.unknown.message;\n        }\n    }\n\n    /**\n     * Gets a localized version of the error\n     * @param appError The error thrown by the application\n     */\n    private getLocalizedError(appError: IAppError): IAppError {\n        if (appError.errorCode === ErrorCode.Unknown) {\n            return appError;\n        }\n        const localizedError = strings.errors[appError.errorCode];\n        if (!localizedError) {\n            return appError;\n        }\n        return {\n            errorCode: appError.errorCode,\n            message: localizedError.message,\n            title: localizedError.title,\n        };\n    }\n\n    private isReactDnDError(e) {\n        return e && e.name === \"Invariant Violation\" && e.message === \"Expected to find a valid target.\";\n    }\n}\n","import React, { Fragment } from \"react\";\nimport Menu, { MenuItem, SubMenu, Divider } from \"rc-menu\";\nimport { PlatformType } from \"../../../common/hostProcess\";\nimport \"./titleBar.scss\";\nimport { strings } from \"../../../common/strings\";\nimport { HelpMenu } from \"./helpMenu\";\n\nexport interface ITitleBarProps extends React.Props<TitleBar> {\n    icon?: string | JSX.Element;\n    title?: string;\n}\n\nexport interface ITitleBarState {\n    isElectron: boolean;\n    platform: string;\n    maximized: boolean;\n    fullscreen: boolean;\n    menu: Electron.Menu;\n}\n\nexport class TitleBar extends React.Component<ITitleBarProps, ITitleBarState> {\n    public state: ITitleBarState = {\n        isElectron: false,\n        platform: global && global.process && global.process.platform ? global.process.platform : \"web\",\n        maximized: false,\n        fullscreen: false,\n        menu: null,\n    };\n\n    private menu: Menu = React.createRef();\n    private remote: Electron.Remote;\n    private currentWindow: Electron.BrowserWindow;\n\n    public componentDidMount() {\n        const isElectron: boolean = !!window[\"require\"];\n\n        if (isElectron) {\n            this.remote = (window as any).require(\"electron\").remote as Electron.Remote;\n            this.currentWindow = this.remote.getCurrentWindow();\n\n            this.currentWindow.on(\"maximize\", () => this.onMaximize(true));\n            this.currentWindow.on(\"unmaximize\", () => this.onMaximize(false));\n            this.currentWindow.on(\"enter-full-screen\", () => this.onFullScreen(true));\n            this.currentWindow.on(\"leave-full-screen\", () => this.onFullScreen(false));\n\n            this.setState({\n                isElectron: true,\n                maximized: this.currentWindow.isMaximized(),\n                fullscreen: this.currentWindow.isFullScreen(),\n                menu: this.remote.Menu.getApplicationMenu(),\n            });\n        }\n    }\n\n    public componentDidUpdate(prevProps: Readonly<ITitleBarProps>) {\n        if (this.props.title !== prevProps.title) {\n            this.syncTitle();\n        }\n    }\n\n    public render() {\n        if (this.state.fullscreen) {\n            return null;\n        }\n\n        return (\n            <div className=\"title-bar bg-lighter-3\">\n                {(this.state.platform === PlatformType.Windows || this.state.platform === PlatformType.Web) &&\n                    <div className=\"title-bar-icon\">\n                        {typeof (this.props.icon) === \"string\" && <i className={`${this.props.icon}`}></i>}\n                        {typeof (this.props.icon) !== \"string\" && this.props.icon}\n                    </div>\n                }\n                {this.state.platform === PlatformType.Windows &&\n                    <div className=\"title-bar-menu\">\n                        <Menu ref={this.menu}\n                            mode=\"horizontal\"\n                            selectable={false}\n                            triggerSubMenuAction=\"click\"\n                            onClick={this.onMenuItemSelected}>\n                            {this.renderMenu(this.state.menu)}\n                        </Menu>\n                    </div>\n                }\n                <div className=\"title-bar-main\">{this.props.title || \"Welcome\"} - VoTT</div>\n                <div className=\"title-bar-controls\">\n                    {this.props.children}\n                    {this.state.platform === PlatformType.Windows &&\n                        <ul>\n                            <li title={strings.titleBar.minimize} className=\"btn-window-minimize\"\n                                    onClick={this.minimizeWindow}>\n                                <i className=\"far fa-window-minimize\" />\n                            </li>\n                            {!this.state.maximized &&\n                                <li title={strings.titleBar.maximize} className=\"btn-window-maximize\"\n                                        onClick={this.maximizeWindow}>\n                                    <i className=\"far fa-window-maximize\" />\n                                </li>\n                            }\n                            {this.state.maximized &&\n                                <li title={strings.titleBar.restore} className=\"btn-window-restore\"\n                                        onClick={this.unmaximizeWindow}>\n                                    <i className=\"far fa-window-restore\" />\n                                </li>\n                            }\n                            <li title={strings.titleBar.close} className=\"btn-window-close\"\n                                    onClick={this.closeWindow}>\n                                <i className=\"fas fa-times\" />\n                            </li>\n                        </ul>\n                    }\n                </div>\n            </div>\n        );\n    }\n\n    private onMaximize = (isMaximized: boolean) => {\n        this.setState({\n            maximized: isMaximized,\n        });\n    }\n\n    private onFullScreen = (isFullScreen: boolean) => {\n        this.setState({\n            fullscreen: isFullScreen,\n        });\n    }\n\n    private renderMenu = (menu: Electron.Menu) => {\n        if (!menu) {\n            return null;\n        }\n\n        return menu.items.map(this.renderMenuItem);\n    }\n\n    private renderMenuItem = (menuItem: Electron.MenuItem, index: number) => {\n        if (!menuItem.visible) {\n            return null;\n        }\n\n        const itemType: string = menuItem[\"type\"];\n\n        switch (itemType) {\n            case \"submenu\":\n                return (\n                    <SubMenu title={menuItem.label} key={menuItem.label} popupOffset={[0, 0]}>\n                        {this.renderMenu(menuItem[\"submenu\"])}\n                    </SubMenu>\n                );\n            case \"separator\":\n                return (<Divider key={index} />);\n            case \"checkbox\":\n                return (\n                    <MenuItem key={menuItem.label}\n                        disabled={!menuItem.enabled}\n                        onClick={(e) => this.onMenuItemClick(e, menuItem)}>\n                        <div className=\"menu-item-container\">\n                            {Boolean(menuItem.checked) &&\n                                <div className=\"menu-item-checkbox\">\n                                    <i className=\"fas fa-check\" />\n                                </div>\n                            }\n                            <div className=\"menu-item-label\">{menuItem.label}{menuItem[\"sublabel\"]}</div>\n                            <div className=\"menu-item-accelerator\">{this.getAcceleratorString(menuItem)}</div>\n                        </div>\n                    </MenuItem>);\n            case \"normal\":\n                return (\n                    <MenuItem key={menuItem.label}\n                        disabled={!menuItem.enabled}\n                        onClick={(e) => this.onMenuItemClick(e, menuItem)}>\n                        <div className=\"menu-item-container\">\n                            <div className=\"menu-item-label\">{menuItem.label}{menuItem[\"sublabel\"]}</div>\n                            <div className=\"menu-item-accelerator\">{this.getAcceleratorString(menuItem)}</div>\n                        </div>\n                    </MenuItem>\n                );\n        }\n    }\n\n    private onMenuItemClick(e: any, menuItem: Electron.MenuItem) {\n        if (menuItem.click) {\n            menuItem.click.call(menuItem, menuItem, this.currentWindow);\n        }\n\n        this.setState({ menu: { ...this.state.menu } as Electron.Menu });\n    }\n\n    private syncTitle = (): void => {\n        if (this.state.isElectron) {\n            this.currentWindow.setTitle(`${this.props.title} - VoTT`);\n        }\n    }\n\n    private minimizeWindow = () => {\n        this.currentWindow.minimize();\n    }\n\n    private maximizeWindow = () => {\n        this.currentWindow.maximize();\n    }\n\n    private unmaximizeWindow = () => {\n        this.currentWindow.unmaximize();\n    }\n\n    private closeWindow = () => {\n        this.currentWindow.close();\n    }\n\n    private onMenuItemSelected = (key: string, item: React.Component) => {\n        // Required to auto-close the menu after user selects an item.\n        this.menu.current.store.setState({\n            openKeys: [],\n            selectedKeys: [],\n        });\n    }\n\n    private getAcceleratorString(menuItem: Electron.MenuItem) {\n        const accelerator = menuItem[\"accelerator\"] || this.getAcceleratorFromRole(menuItem[\"role\"]);\n        if (accelerator) {\n            return accelerator.replace(\"CmdOrCtrl\", \"Ctrl\");\n        }\n\n        return null;\n    }\n\n    private getAcceleratorFromRole(role: string) {\n        switch (role) {\n            case \"undo\":\n                return \"CmdOrCtrl+Z\";\n            case \"redo\":\n                return \"CmdOrCtrl+Y\";\n            case \"cut\":\n                return \"CmdOrCtrl+X\";\n            case \"copy\":\n                return \"CmdOrCtrl+C\";\n            case \"paste\":\n                return \"CmdOrCtrl+V\";\n            case \"selectall\":\n                return \"CmdOrCtrl+A\";\n            case \"minimize\":\n                return \"CmdOrCtrl+M\";\n            case \"close\":\n                return \"CmdOrCtrl+W\";\n            case \"quit\":\n                return \"CmdOrCtrl+Q\";\n            case \"reload\":\n                return \"CmdOrCtrl+R\";\n            case \"togglefullscreen\":\n                return \"F11\";\n            case \"toggledevtools\":\n                return \"CmdOrCtrl+Shift+I\";\n            case \"resetzoom\":\n                return \"CmdOrCtrl+0\";\n            case \"zoomin\":\n                return \"CmdOrCtrl+Shift+=\";\n            case \"zoomout\":\n                return \"CmdOrCtrl+-\";\n        }\n    }\n}\n","import React from \"react\";\nimport { appInfo } from \"../../../common/appInfo\";\nimport \"./statusBar.scss\";\n\nexport class StatusBar extends React.Component {\n    public render() {\n        return (\n            <div className=\"status-bar\">\n                <div className=\"status-bar-main\">{this.props.children}</div>\n                <div className=\"status-bar-version\">\n                    <ul>\n                        <li>\n                            <i className=\"fas fa-code-branch\"></i>\n                            <span>{appInfo.version}</span>\n                        </li>\n                    </ul>\n                </div>\n            </div>\n        );\n    }\n}\n","import React from \"react\";\nimport _ from \"lodash\";\nimport { IProject, AssetState } from \"../../../models/applicationState\";\nimport { strings, interpolate } from \"../../../common/strings\";\n\nexport interface IStatusBarMetricsProps {\n    project: IProject;\n}\n\nexport class StatusBarMetrics extends React.Component<IStatusBarMetricsProps> {\n    public render() {\n        const { project } = this.props;\n\n        if (!project) {\n            return null;\n        }\n\n        const projectAssets = _.values(project.assets);\n        const visitedAssets = projectAssets\n            .filter((asset) => asset.state === AssetState.Visited || asset.state === AssetState.Tagged);\n        const taggedAssets = projectAssets\n            .filter((asset) => asset.state === AssetState.Tagged);\n\n        return (\n            <ul>\n                <li title={strings.projectSettings.sourceConnection.title}>\n                    <i className=\"fas fa-upload\"></i>\n                    <span className=\"metric-source-connection-name\">{project.sourceConnection.name}</span>\n                </li>\n                <li title={strings.projectSettings.targetConnection.title}>\n                    <i className=\"fas fa-download\"></i>\n                    <span className=\"metric-target-connection-name\">{project.targetConnection.name}</span>\n                </li>\n                <li title={interpolate(strings.projectMetrics.taggedAssets, { count: taggedAssets.length })}>\n                    <i className=\"fas fa-tag\"></i>\n                    <span className=\"metric-tagged-asset-count\">{taggedAssets.length}</span>\n                </li>\n                <li title={interpolate(strings.projectMetrics.visitedAssets, { count: visitedAssets.length })}>\n                    <i className=\"fas fa-eye\"></i>\n                    <span className=\"metric-visited-asset-count\">{visitedAssets.length}</span>\n                </li>\n            </ul>\n        );\n    }\n}\n","import React from \"react\";\nimport MessageBox from \"../common/messageBox/messageBox\";\nimport { strings } from \"../../../common/strings\";\nimport { KeyboardContext, IKeyboardContext, KeyEventType } from \"../common/keyboardManager/keyboardManager\";\nimport { IKeyboardBindingProps, KeyboardBinding } from \"../common/keyboardBinding/keyboardBinding\";\nimport \"./helpMenu.scss\";\n\nexport interface IHelpMenuProps {\n    onClose?: () => void;\n}\n\nexport interface IHelpMenuState {\n    show: boolean;\n}\n\nexport class HelpMenu extends React.Component<IHelpMenuProps, IHelpMenuState> {\n    public static contextType = KeyboardContext;\n    public context!: IKeyboardContext;\n\n    public state = {\n        show: false,\n    };\n    private icon: string = \"fa-question-circle\";\n\n    public render() {\n        return (\n            <div className={\"help-menu-button\"} onClick={() => this.setState({show: true})}>\n                <i className={`fas ${this.icon}`}/>\n                <KeyboardBinding\n                    displayName={strings.editorPage.help.title}\n                    accelerators={[\"CmdOrCtrl+H\", \"CmdOrCtrl+h\"]}\n                    handler={() => this.setState({show: !this.state.show})}\n                    icon={this.icon}\n                    keyEventType={KeyEventType.KeyDown}\n                />\n                <MessageBox\n                    title={strings.titleBar.help}\n                    message={this.getHelpBody()}\n                    show={this.state.show}\n                    onCancel={this.onClose}\n                    hideFooter={true}\n                />\n            </div>\n        );\n    }\n\n    private onClose = () => {\n        this.setState({show: false});\n        if (this.props.onClose) {\n            this.props.onClose();\n        }\n    }\n\n    private getHelpBody = () => {\n\n        const registrations = this.context.keyboard.getRegistrations()[KeyEventType.KeyDown];\n        if (!registrations) {\n            return;\n        }\n\n        const groupKeys = this.groupKeys(registrations);\n\n        return (\n            <div className=\"help-body container\">\n                {\n                    groupKeys.map((group) => group.length ? this.getRegistrationRow(group, registrations) : null)\n                }\n            </div>\n        );\n    }\n\n    private groupKeys = (registrations: {[key: string]: IKeyboardBindingProps}) => {\n        const allKeys = Object.keys(registrations);\n        const caseConsolidatedKeys = this.consolidateKeyCasings(allKeys);\n\n        const groups = [];\n        const alreadyGrouped = new Set();\n\n        for (const key of caseConsolidatedKeys) {\n            const group = [key];\n            if (!alreadyGrouped.has(key)) {\n                alreadyGrouped.add(key);\n                for (const otherKey of caseConsolidatedKeys) {\n                    if (!alreadyGrouped.has(otherKey) &&\n                            this.bindingEquals(registrations[key], registrations[otherKey])) {\n                        group.push(otherKey);\n                        alreadyGrouped.add(otherKey);\n                    }\n                }\n                groups.push(group);\n            }\n        }\n        return groups;\n    }\n\n    private bindingEquals(binding1: IKeyboardBindingProps, binding2: IKeyboardBindingProps) {\n        return binding1 && binding2\n                && binding1.displayName === binding2.displayName\n                && binding1.handler === binding2.handler;\n    }\n\n    private consolidateKeyCasings = (allKeys: string[]): string[] => {\n        const lowerRegistrations = {};\n        for (const key of allKeys) {\n            const lowerKey = key.toLowerCase();\n            if (!lowerRegistrations[lowerKey]) {\n                lowerRegistrations[lowerKey] = key;\n            }\n        }\n        return Object.keys(lowerRegistrations).map((lowerKey) => lowerRegistrations[lowerKey]);\n    }\n\n    private getRegistrationRow = (group: string[], registrations: {[key: string]: IKeyboardBindingProps}) => {\n        const keyRegistration = registrations[group[0]];\n        if (keyRegistration) {\n            return (\n                <div key={keyRegistration.displayName} className={\"help-key row\"}>\n                    <div className={`col-1 keybinding-icon ${(keyRegistration.icon)\n                        ? `fas ${keyRegistration.icon}` : \"\"}`}/>\n                    <div className=\"col-4 keybinding-accelerator\">{this.stringifyGroup(group)}</div>\n                    <div className=\"col-6 keybinding-name\">{keyRegistration.displayName}</div>\n                </div>\n            );\n        }\n    }\n\n    private stringifyGroup(group: string[]): string {\n        return (group.length < 3) ? group.join(\", \") : `${group[0]} - ${group[group.length - 1]}`;\n    }\n}\n","import _ from \"lodash\";\nimport { ExportProvider } from \"./exportProvider\";\nimport { IProject, IAssetMetadata, ITag, IExportProviderOptions } from \"../../models/applicationState\";\nimport Guard from \"../../common/guard\";\nimport HtmlFileReader from \"../../common/htmlFileReader\";\nimport { itemTemplate, annotationTemplate, objectTemplate } from \"./pascalVOC/pascalVOCTemplates\";\nimport { interpolate } from \"../../common/strings\";\nimport os from \"os\";\n\ninterface IObjectInfo {\n    name: string;\n    xmin: number;\n    ymin: number;\n    xmax: number;\n    ymax: number;\n}\n\ninterface IImageInfo {\n    width: number;\n    height: number;\n    objects: IObjectInfo[];\n}\n\n/**\n * Export options for Pascal VOC Export Provider\n */\nexport interface IPascalVOCExportProviderOptions extends IExportProviderOptions {\n    /** The test / train split ratio for exporting data */\n    testTrainSplit?: number;\n    /** Whether or not to include unassigned tags in exported data */\n    exportUnassigned?: boolean;\n}\n\n/**\n * @name - PascalVOC Export Provider\n * @description - Exports a project into a Pascal VOC\n */\nexport class PascalVOCExportProvider extends ExportProvider<IPascalVOCExportProviderOptions> {\n    private imagesInfo = new Map<string, IImageInfo>();\n\n    constructor(project: IProject, options: IPascalVOCExportProviderOptions) {\n        super(project, options);\n        Guard.null(options);\n    }\n\n    /**\n     * Export project to PascalVOC\n     */\n    public async export(): Promise<void> {\n        const allAssets = await this.getAssetsForExport();\n        const exportObject: any = { ...this.project };\n        exportObject.assets = _.keyBy(allAssets, (assetMetadata) => assetMetadata.asset.id);\n\n        // Create Export Folder\n        const exportFolderName = `${this.project.name.replace(/\\s/g, \"-\")}-PascalVOC-export`;\n        await this.storageProvider.createContainer(exportFolderName);\n\n        await this.exportImages(exportFolderName, allAssets);\n        await this.exportPBTXT(exportFolderName, this.project);\n        await this.exportAnnotations(exportFolderName, allAssets);\n\n        // TestSplit && exportUnassignedTags are optional parameter in the UI Exporter configuration\n        const testSplit = (100 - (this.options.testTrainSplit || 80)) / 100;\n        await this.exportImageSets(\n            exportFolderName,\n            allAssets,\n            this.project.tags,\n            testSplit,\n            this.options.exportUnassigned,\n        );\n    }\n\n    private async exportImages(exportFolderName: string, allAssets: IAssetMetadata[]) {\n        // Create JPEGImages Sub Folder\n        const jpegImagesFolderName = `${exportFolderName}/JPEGImages`;\n        await this.storageProvider.createContainer(jpegImagesFolderName);\n\n        await allAssets.mapAsync(async (assetMetadata) => {\n            await this.exportSingleImage(jpegImagesFolderName, assetMetadata);\n        });\n    }\n\n    private async exportSingleImage(jpegImagesFolderName: string, assetMetadata: IAssetMetadata): Promise<void> {\n        try {\n            const arrayBuffer = await HtmlFileReader.getAssetArray(assetMetadata.asset);\n            const buffer = Buffer.from(arrayBuffer);\n            const imageFileName = `${jpegImagesFolderName}/${assetMetadata.asset.name}`;\n\n            // Write Binary\n            await this.storageProvider.writeBinary(imageFileName, buffer);\n\n            // Get Array of all Box shaped tag for the Asset\n            const tagObjects = this.getAssetTagArray(assetMetadata);\n\n            const imageInfo: IImageInfo = {\n                width: assetMetadata.asset.size ? assetMetadata.asset.size.width : 0,\n                height: assetMetadata.asset.size ? assetMetadata.asset.size.height : 0,\n                objects: tagObjects,\n            };\n\n            this.imagesInfo.set(assetMetadata.asset.name, imageInfo);\n\n            if (!assetMetadata.asset.size ||\n                assetMetadata.asset.size.width === 0 ||\n                assetMetadata.asset.size.height === 0) {\n                await this.updateImageSizeInfo(arrayBuffer, imageFileName, assetMetadata.asset.name);\n            }\n        } catch (err) {\n            // Ignore the error at the moment\n            // TODO: Refactor ExportProvider abstract class export() method\n            //       to return Promise<object> with an object containing\n            //       the number of files successfully exported out of total\n            console.log(`Error downloading asset ${assetMetadata.asset.path} - ${err}`);\n        }\n    }\n\n    private getAssetTagArray(element: IAssetMetadata): IObjectInfo[] {\n        const tagObjects = [];\n        element.regions.forEach((region) => {\n            region.tags.forEach((tagName) => {\n                const objectInfo: IObjectInfo = {\n                    name: tagName,\n                    xmin: region.boundingBox.left,\n                    ymin: region.boundingBox.top,\n                    xmax: region.boundingBox.left + region.boundingBox.width,\n                    ymax: region.boundingBox.top + region.boundingBox.height,\n                };\n\n                tagObjects.push(objectInfo);\n            });\n        });\n\n        return tagObjects;\n    }\n\n    private async updateImageSizeInfo(imageBuffer: ArrayBuffer, imageFileName: string, assetName: string) {\n        // Get Base64\n        const image64 = btoa(new Uint8Array(imageBuffer).\n            reduce((data, byte) => data + String.fromCharCode(byte), \"\"));\n\n        if (image64.length < 10) {\n            // Ignore the error at the moment\n            // TODO: Refactor ExportProvider abstract class export() method\n            //       to return Promise<object> with an object containing\n            //       the number of files successfully exported out of total\n            console.log(`Image not valid ${imageFileName}`);\n        } else {\n            const assetProps = await HtmlFileReader.readAssetAttributesWithBuffer(image64);\n            const imageInfo = this.imagesInfo.get(assetName);\n            if (imageInfo && assetProps) {\n                imageInfo.width = assetProps.width;\n                imageInfo.height = assetProps.height;\n            } else {\n                console.log(`imageInfo for element ${assetName} not found (${assetProps})`);\n            }\n        }\n    }\n\n    private async exportPBTXT(exportFolderName: string, project: IProject) {\n        if (project.tags && project.tags.length > 0) {\n            // Save pascal_label_map.pbtxt\n            const pbtxtFileName = `${exportFolderName}/pascal_label_map.pbtxt`;\n\n            let id = 1;\n            const items = project.tags.map((element) => {\n                const params = {\n                    id: (id++).toString(),\n                    tag: element.name,\n                };\n\n                return interpolate(itemTemplate, params);\n            });\n\n            await this.storageProvider.writeText(pbtxtFileName, items.join(\"\"));\n        }\n    }\n\n    private async exportAnnotations(exportFolderName: string, allAssets: IAssetMetadata[]) {\n        // Create Annotations Sub Folder\n        const annotationsFolderName = `${exportFolderName}/Annotations`;\n        await this.storageProvider.createContainer(annotationsFolderName);\n\n        try {\n            // Save Annotations\n            await this.imagesInfo.forEachAsync(async (imageInfo, imageName) => {\n                const imageFilePath = `${annotationsFolderName}/${imageName}`;\n                const assetFilePath = `${imageFilePath.substr(0, imageFilePath.lastIndexOf(\".\"))\n                    || imageFilePath}.xml`;\n\n                const objectsXML = imageInfo.objects.map((o) => {\n                    const params = {\n                        name: o.name,\n                        xmin: o.xmin.toString(),\n                        ymin: o.ymin.toString(),\n                        xmax: o.xmax.toString(),\n                        ymax: o.ymax.toString(),\n                    };\n\n                    return interpolate(objectTemplate, params);\n                });\n\n                const params = {\n                    fileName: imageName,\n                    filePath: imageFilePath,\n                    width: imageInfo.width.toString(),\n                    height: imageInfo.height.toString(),\n                    objects: objectsXML.join(\"\"),\n                };\n\n                // Save Annotation File\n                await this.storageProvider.writeText(assetFilePath, interpolate(annotationTemplate, params));\n            });\n        } catch (err) {\n            console.log(\"Error writing Pascal VOC annotation file\");\n        }\n    }\n\n    private async exportImageSets(\n        exportFolderName: string,\n        allAssets: IAssetMetadata[],\n        tags: ITag[],\n        testSplit: number,\n        exportUnassignedTags: boolean) {\n        if (!tags) {\n            return;\n        }\n\n        // Create ImageSets Sub Folder (Main ?)\n        const imageSetsFolderName = `${exportFolderName}/ImageSets`;\n        await this.storageProvider.createContainer(imageSetsFolderName);\n\n        const imageSetsMainFolderName = `${exportFolderName}/ImageSets/Main`;\n        await this.storageProvider.createContainer(imageSetsMainFolderName);\n\n        const assetUsage = new Map<string, Set<string>>();\n        const tagUsage = new Map<string, number>();\n\n        // Generate tag usage per asset\n        allAssets.forEach((assetMetadata) => {\n            const appliedTags = new Set<string>();\n            assetUsage.set(assetMetadata.asset.name, appliedTags);\n\n            if (assetMetadata.regions.length > 0) {\n                assetMetadata.regions.forEach((region) => {\n                    tags.forEach((tag) => {\n                        let tagInstances = tagUsage.get(tag.name) || 0;\n                        if (region.tags.filter((tagName) => tagName === tag.name).length > 0) {\n                            appliedTags.add(tag.name);\n                            tagUsage.set(tag.name, tagInstances += 1);\n                        }\n                    });\n                });\n            }\n        });\n\n        // Save ImageSets\n        await tags.forEachAsync(async (tag) => {\n            const tagInstances = tagUsage.get(tag.name) || 0;\n            if (!exportUnassignedTags && tagInstances === 0) {\n                return;\n            }\n\n            const assetList = [];\n            assetUsage.forEach((tags, assetName) => {\n                if (tags.has(tag.name)) {\n                    assetList.push(`${assetName} 1`);\n                } else {\n                    assetList.push(`${assetName} -1`);\n                }\n            });\n\n            if (testSplit > 0 && testSplit <= 1) {\n                // Split in Test and Train sets\n                const totalAssets = assetUsage.size;\n                const testCount = Math.ceil(totalAssets * testSplit);\n\n                const testArray = assetList.slice(0, testCount);\n                const trainArray = assetList.slice(testCount, totalAssets);\n\n                const testImageSetFileName = `${imageSetsMainFolderName}/${tag.name}_val.txt`;\n                await this.storageProvider.writeText(testImageSetFileName, testArray.join(os.EOL));\n\n                const trainImageSetFileName = `${imageSetsMainFolderName}/${tag.name}_train.txt`;\n                await this.storageProvider.writeText(trainImageSetFileName, trainArray.join(os.EOL));\n\n            } else {\n                const imageSetFileName = `${imageSetsMainFolderName}/${tag.name}.txt`;\n                await this.storageProvider.writeText(imageSetFileName, assetList.join(os.EOL));\n            }\n        });\n    }\n}\n","import _ from \"lodash\";\nimport { ExportProvider } from \"./exportProvider\";\nimport { IProject, IExportProviderOptions } from \"../../models/applicationState\";\nimport Guard from \"../../common/guard\";\nimport { constants } from \"../../common/constants\";\nimport HtmlFileReader from \"../../common/htmlFileReader\";\n\n/**\n * VoTT Json Export Provider options\n */\nexport interface IVottJsonExportProviderOptions extends IExportProviderOptions {\n    /** Whether or not to include binary assets in target connection */\n    includeImages: boolean;\n}\n\n/**\n * @name - Vott Json Export Provider\n * @description - Exports a project into a single JSON file that include all configured assets\n */\nexport class VottJsonExportProvider extends ExportProvider<IVottJsonExportProviderOptions> {\n    constructor(project: IProject, options: IVottJsonExportProviderOptions) {\n        super(project, options);\n        Guard.null(options);\n    }\n\n    /**\n     * Export project to VoTT JSON format\n     */\n    public async export(): Promise<void> {\n        const results = await this.getAssetsForExport();\n\n        if (this.options.includeImages) {\n            await results.forEachAsync(async (assetMetadata) => {\n                const arrayBuffer = await HtmlFileReader.getAssetArray(assetMetadata.asset);\n                const assetFilePath = `vott-json-export/${assetMetadata.asset.name}`;\n                await this.storageProvider.writeBinary(assetFilePath, Buffer.from(arrayBuffer));\n            });\n        }\n\n        const exportObject = { ...this.project };\n        exportObject.assets = _.keyBy(results, (assetMetadata) => assetMetadata.asset.id) as any;\n\n        // We don't need these fields in the export JSON\n        delete exportObject.sourceConnection;\n        delete exportObject.targetConnection;\n        delete exportObject.exportFormat;\n\n        const fileName = `vott-json-export/${this.project.name.replace(/\\s/g, \"-\")}${constants.exportFileExtension}`;\n        await this.storageProvider.writeText(fileName, JSON.stringify(exportObject, null, 4));\n    }\n}\n","import _ from \"lodash\";\nimport { ExportProvider } from \"./exportProvider\";\nimport { IProject, IExportProviderOptions } from \"../../models/applicationState\";\nimport Guard from \"../../common/guard\";\nimport HtmlFileReader from \"../../common/htmlFileReader\";\nimport json2csv, { Parser } from \"json2csv\";\n\n/**\n * Options for CSV Export Provider\n */\nexport interface ICsvExportProviderOptions extends IExportProviderOptions {\n    /** Whether or not to include binary assets in target connection */\n    includeImages: boolean;\n}\n\n/**\n * @name - CSV Format Export Provider\n * @description - Exports a project into a single CSV file that include all configured assets\n */\nexport class CsvExportProvider extends ExportProvider<ICsvExportProviderOptions> {\n    constructor(project: IProject, options: ICsvExportProviderOptions) {\n        super(project, options);\n        Guard.null(options);\n    }\n\n    /**\n     * Export project to CSV\n     */\n    public async export(): Promise<void> {\n        const results = await this.getAssetsForExport();\n        const dataItems = [];\n\n        await results.forEachAsync(async (assetMetadata) => {\n            if (this.options.includeImages) {\n                // Write Image\n                const arrayBuffer = await HtmlFileReader.getAssetArray(assetMetadata.asset);\n                const assetFilePath = `vott-csv-export/${assetMetadata.asset.name}`;\n                await this.storageProvider.writeBinary(assetFilePath, Buffer.from(arrayBuffer));\n            }\n\n            // Push CSV Records\n            // The CSV file itself must have the following format::\n            // image,xmin,ymin,xmax,ymax,label\n            // image_1.jpg,26,594,86,617,cat\n            // image_1.jpg,599,528,612,541,car\n            // image_2.jpg,393,477,430,552,dog\n            assetMetadata.regions.forEach((region) => {\n                region.tags.forEach((tag) => {\n                    const dataItem = {\n                        image: assetMetadata.asset.name,\n                        xmin: region.boundingBox.left,\n                        ymin: region.boundingBox.top,\n                        xmax: region.boundingBox.left + region.boundingBox.width,\n                        ymax: region.boundingBox.top + region.boundingBox.height,\n                        label: tag,\n                    };\n                    dataItems.push(dataItem);\n                });\n            });\n        });\n\n        // Configure CSV options\n        const csvOptions: json2csv.Options<{}> = {\n            fields: [\"image\", \"xmin\", \"ymin\", \"xmax\", \"ymax\", \"label\"],\n        };\n        const csvParser = new Parser(csvOptions);\n        const csvData = csvParser.parse(dataItems);\n\n        // Save CSV\n        const fileName = `vott-csv-export/${this.project.name.replace(/\\s/g, \"-\")}-export.csv`;\n        await this.storageProvider.writeText(fileName, csvData);\n    }\n}\n","import os from \"os\";\nimport { ExportProvider, IExportResults } from \"./exportProvider\";\nimport { IAssetMetadata, IExportProviderOptions, IProject } from \"../../models/applicationState\";\nimport HtmlFileReader from \"../../common/htmlFileReader\";\nimport Guard from \"../../common/guard\";\n\nenum ExportSplit {\n    Test,\n    Train,\n}\n\n/**\n * Export options for CNTK export provider\n */\nexport interface ICntkExportProviderOptions extends IExportProviderOptions {\n    /** The test / train split ratio for exporting data */\n    testTrainSplit?: number;\n}\n\n/**\n * CNTK Export provider\n */\nexport class CntkExportProvider extends ExportProvider<ICntkExportProviderOptions> {\n    private exportFolderName: string;\n\n    constructor(project: IProject, options: ICntkExportProviderOptions) {\n        super(project, options);\n        Guard.null(options);\n\n        this.exportFolderName = `${this.project.name.replace(/\\s/g, \"-\")}-CNTK-export`;\n    }\n\n    public async export(): Promise<IExportResults> {\n        await this.createFolderStructure();\n        const assetsToExport = await this.getAssetsForExport();\n        const testSplit = (100 - (this.options.testTrainSplit || 80)) / 100;\n        const testCount = Math.ceil(assetsToExport.length * testSplit);\n        const testArray = assetsToExport.slice(0, testCount);\n\n        const results = await assetsToExport.mapAsync(async (assetMetadata) => {\n            try {\n                const exportSplit = testArray.find((am) => am.asset.id === assetMetadata.asset.id)\n                    ? ExportSplit.Test\n                    : ExportSplit.Train;\n\n                await this.exportAssetFrame(assetMetadata, exportSplit);\n                return {\n                    asset: assetMetadata,\n                    success: true,\n                };\n            } catch (e) {\n                return {\n                    asset: assetMetadata,\n                    success: false,\n                    error: e,\n                };\n            }\n        });\n\n        return {\n            completed: results.filter((r) => r.success),\n            errors: results.filter((r) => !r.success),\n            count: results.length,\n        };\n    }\n\n    private async exportAssetFrame(assetMetadata: IAssetMetadata, exportSplit: ExportSplit) {\n        const labelData = [];\n        const boundingBoxData = [];\n\n        assetMetadata.regions.forEach((region) => {\n            region.tags.forEach((tagName) => {\n                labelData.push(tagName);\n                // tslint:disable-next-line:max-line-length\n                boundingBoxData.push(`${region.boundingBox.left}\\t${region.boundingBox.left + region.boundingBox.width}\\t${region.boundingBox.top}\\t${region.boundingBox.top + region.boundingBox.height}`);\n            });\n        });\n\n        const buffer = await HtmlFileReader.getAssetArray(assetMetadata.asset);\n        const folderName = exportSplit === ExportSplit.Train ? \"positive\" : \"testImages\";\n        const labelsPath = `${this.exportFolderName}/${folderName}/${assetMetadata.asset.name}.bboxes.labels.tsv`;\n        const boundingBoxPath = `${this.exportFolderName}/${folderName}/${assetMetadata.asset.name}.bboxes.tsv`;\n        const binaryPath = `${this.exportFolderName}/${folderName}/${assetMetadata.asset.name}`;\n\n        await Promise.all([\n            this.storageProvider.writeText(labelsPath, labelData.join(os.EOL)),\n            this.storageProvider.writeText(boundingBoxPath, boundingBoxData.join(os.EOL)),\n            this.storageProvider.writeBinary(binaryPath, Buffer.from(buffer)),\n        ]);\n    }\n\n    private async createFolderStructure(): Promise<void> {\n        const positiveFolder = `${this.exportFolderName}/positive`;\n        const negativeFolder = `${this.exportFolderName}/negative`;\n        const testImagesFolder = `${this.exportFolderName}/testImages`;\n\n        await this.storageProvider.createContainer(this.exportFolderName);\n\n        await [positiveFolder, negativeFolder, testImagesFolder]\n            .forEachAsync(async (folderPath) => {\n                await this.storageProvider.createContainer(folderPath);\n            });\n    }\n}\n","import _ from \"lodash\";\nimport shortid from \"shortid\";\nimport { StorageProviderFactory } from \"../providers/storage/storageProviderFactory\";\nimport {\n    IProject, ISecurityToken, AppError,\n    ErrorCode, ModelPathType, IActiveLearningSettings,\n} from \"../models/applicationState\";\nimport Guard from \"../common/guard\";\nimport { constants } from \"../common/constants\";\nimport { ExportProviderFactory } from \"../providers/export/exportProviderFactory\";\nimport { decryptProject, encryptProject } from \"../common/utils\";\nimport packageJson from \"../../package.json\";\nimport { ExportAssetState } from \"../providers/export/exportProvider\";\nimport { IExportFormat } from \"vott-react\";\n\n/**\n * Functions required for a project service\n * @member save - Save a project\n * @member delete - Delete a project\n */\nexport interface IProjectService {\n    load(project: IProject, securityToken: ISecurityToken): Promise<IProject>;\n    save(project: IProject, securityToken: ISecurityToken): Promise<IProject>;\n    delete(project: IProject): Promise<void>;\n    isDuplicate(project: IProject, projectList: IProject[]): boolean;\n}\n\nconst defaultActiveLearningSettings: IActiveLearningSettings = {\n    autoDetect: false,\n    predictTag: true,\n    modelPathType: ModelPathType.Coco,\n};\n\nconst defaultExportOptions: IExportFormat = {\n    providerType: \"vottJson\",\n    providerOptions: {\n        assetState: ExportAssetState.Visited,\n        includeImages: true,\n    },\n};\n\n/**\n * @name - Project Service\n * @description - Functions for dealing with projects\n */\nexport default class ProjectService implements IProjectService {\n    /**\n     * Loads a project\n     * @param project The project JSON to load\n     * @param securityToken The security token used to decrypt sensitive project settings\n     */\n    public load(project: IProject, securityToken: ISecurityToken): Promise<IProject> {\n        Guard.null(project);\n\n        try {\n            const loadedProject = decryptProject(project, securityToken);\n\n            // Ensure tags is always initialized to an array\n            if (!loadedProject.tags) {\n                loadedProject.tags = [];\n            }\n\n            // Initialize active learning settings if they don't exist\n            if (!loadedProject.activeLearningSettings) {\n                loadedProject.activeLearningSettings = defaultActiveLearningSettings;\n            }\n\n            // Initialize export settings if they don't exist\n            if (!loadedProject.exportFormat) {\n                loadedProject.exportFormat = defaultExportOptions;\n            }\n\n            this.ensureBackwardsCompatibility(loadedProject);\n\n            return Promise.resolve({ ...loadedProject });\n        } catch (e) {\n            const error = new AppError(ErrorCode.ProjectInvalidSecurityToken, \"Error decrypting project settings\");\n            return Promise.reject(error);\n        }\n    }\n\n    /**\n     * Save a project\n     * @param project - Project to save\n     * @param securityToken - Security Token to encrypt\n     */\n    public async save(project: IProject, securityToken: ISecurityToken): Promise<IProject> {\n        Guard.null(project);\n\n        if (!project.id) {\n            project.id = shortid.generate();\n        }\n\n        // Ensure tags is always initialized to an array\n        if (!project.tags) {\n            project.tags = [];\n        }\n\n        // Initialize active learning settings if they don't exist\n        if (!project.activeLearningSettings) {\n            project.activeLearningSettings = defaultActiveLearningSettings;\n        }\n\n        // Initialize export settings if they don't exist\n        if (!project.exportFormat) {\n            project.exportFormat = defaultExportOptions;\n        }\n\n        project.version = packageJson.version;\n\n        const storageProvider = StorageProviderFactory.createFromConnection(project.targetConnection);\n        await this.saveExportSettings(project);\n        project = encryptProject(project, securityToken);\n\n        await storageProvider.writeText(\n            `${project.name}${constants.projectFileExtension}`,\n            JSON.stringify(project, null, 4),\n        );\n\n        return project;\n    }\n\n    /**\n     * Delete a project\n     * @param project - Project to delete\n     */\n    public async delete(project: IProject): Promise<void> {\n        Guard.null(project);\n\n        const storageProvider = StorageProviderFactory.createFromConnection(project.targetConnection);\n\n        // Delete all asset metadata files created for project\n        const deleteFiles = _.values(project.assets)\n            .map((asset) => storageProvider.deleteFile(`${asset.id}${constants.assetMetadataFileExtension}`));\n\n        await Promise.all(deleteFiles);\n        await storageProvider.deleteFile(`${project.name}${constants.projectFileExtension}`);\n    }\n\n    /**\n     * Checks whether or not the project would cause a duplicate at the target connection\n     * @param project The project to validate\n     * @param projectList The list of known projects\n     */\n    public isDuplicate(project: IProject, projectList: IProject[]): boolean {\n        const duplicateProjects = projectList.find((p) =>\n            p.id !== project.id &&\n            p.name === project.name &&\n            JSON.stringify(p.targetConnection.providerOptions) ===\n            JSON.stringify(project.targetConnection.providerOptions),\n        );\n        return (duplicateProjects !== undefined);\n    }\n\n    private async saveExportSettings(project: IProject): Promise<void> {\n        if (!project.exportFormat || !project.exportFormat.providerType) {\n            return Promise.resolve();\n        }\n\n        const exportProvider = ExportProviderFactory.createFromProject(project);\n\n        if (!exportProvider.save) {\n            return Promise.resolve();\n        }\n\n        project.exportFormat.providerOptions = await exportProvider.save(project.exportFormat);\n    }\n\n    /**\n     * Ensures backwards compatibility with project\n     * @param project The project to update\n     */\n    private ensureBackwardsCompatibility(project: IProject) {\n        const projectVersion = project.version.toLowerCase();\n\n        if (projectVersion.startsWith(\"2.0.0\")) {\n            // Required for backwards compatibility with v2.0.0 release\n            if (project.exportFormat.providerType === \"tensorFlowPascalVOC\") {\n                project.exportFormat.providerType = \"pascalVOC\";\n            }\n        }\n    }\n}\n","import { Action, Dispatch } from \"redux\";\nimport ProjectService from \"../../services/projectService\";\nimport { ActionTypes } from \"./actionTypes\";\nimport { AssetService } from \"../../services/assetService\";\nimport { ExportProviderFactory } from \"../../providers/export/exportProviderFactory\";\nimport {\n    AppError,\n    ErrorCode,\n    IApplicationState,\n    IAsset,\n    IAssetMetadata,\n    IProject,\n} from \"../../models/applicationState\";\nimport { createAction, createPayloadAction, IPayloadAction } from \"./actionCreators\";\nimport { ExportAssetState, IExportResults } from \"../../providers/export/exportProvider\";\nimport { appInfo } from \"../../common/appInfo\";\nimport { strings } from \"../../common/strings\";\nimport { IExportFormat } from \"vott-react\";\nimport { IVottJsonExportProviderOptions } from \"../../providers/export/vottJson\";\n\n/**\n * Actions to be performed in relation to projects\n */\nexport default interface IProjectActions {\n    loadProject(project: IProject): Promise<IProject>;\n    saveProject(project: IProject): Promise<IProject>;\n    deleteProject(project: IProject): Promise<void>;\n    closeProject(): void;\n    exportProject(project: IProject): Promise<void> | Promise<IExportResults>;\n    loadAssets(project: IProject): Promise<IAsset[]>;\n    loadAssetMetadata(project: IProject, asset: IAsset): Promise<IAssetMetadata>;\n    saveAssetMetadata(project: IProject, assetMetadata: IAssetMetadata): Promise<IAssetMetadata>;\n    updateProjectTag(project: IProject, oldTagName: string, newTagName: string): Promise<IAssetMetadata[]>;\n    deleteProjectTag(project: IProject, tagName): Promise<IAssetMetadata[]>;\n}\n\n/**\n * Dispatches Load Project action and resolves with IProject\n * @param project - Project to load\n */\nexport function loadProject(project: IProject):\n    (dispatch: Dispatch, getState: () => IApplicationState) => Promise<IProject> {\n    return async (dispatch: Dispatch, getState: () => IApplicationState) => {\n        const appState = getState();\n        const projectService = new ProjectService();\n\n        // Lookup security token used to decrypt project settings\n        const projectToken = appState.appSettings.securityTokens\n            .find((securityToken) => securityToken.name === project.securityToken);\n\n        if (!projectToken) {\n            throw new AppError(ErrorCode.SecurityTokenNotFound, \"Security Token Not Found\");\n        }\n        const loadedProject = await projectService.load(project, projectToken);\n\n        dispatch(loadProjectAction(loadedProject));\n        return loadedProject;\n    };\n}\n\n/**\n * Dispatches Save Project action and resolves with IProject\n * @param project - Project to save\n */\nexport function saveProject(project: IProject)\n    : (dispatch: Dispatch, getState: () => IApplicationState) => Promise<IProject> {\n    return async (dispatch: Dispatch, getState: () => IApplicationState) => {\n        const appState = getState();\n        const projectService = new ProjectService();\n\n        if (projectService.isDuplicate(project, appState.recentProjects)) {\n            throw new AppError(ErrorCode.ProjectDuplicateName, `Project with name '${project.name}\n                already exists with the same target connection '${project.targetConnection.name}'`);\n        }\n\n        const projectToken = appState.appSettings.securityTokens\n            .find((securityToken) => securityToken.name === project.securityToken);\n\n        if (!projectToken) {\n            throw new AppError(ErrorCode.SecurityTokenNotFound, \"Security Token Not Found\");\n        }\n\n        const savedProject = await projectService.save(project, projectToken);\n        dispatch(saveProjectAction(savedProject));\n\n        // Reload project after save actions\n        await loadProject(savedProject)(dispatch, getState);\n\n        return savedProject;\n    };\n}\n\n/**\n * Dispatches Delete Project action and resolves with project\n * @param project - Project to delete\n */\nexport function deleteProject(project: IProject)\n    : (dispatch: Dispatch, getState: () => IApplicationState) => Promise<void> {\n    return async (dispatch: Dispatch, getState: () => IApplicationState) => {\n        const appState = getState();\n        const projectService = new ProjectService();\n\n        // Lookup security token used to decrypt project settings\n        const projectToken = appState.appSettings.securityTokens\n            .find((securityToken) => securityToken.name === project.securityToken);\n\n        if (!projectToken) {\n            throw new AppError(ErrorCode.SecurityTokenNotFound, \"Security Token Not Found\");\n        }\n\n        const decryptedProject = await projectService.load(project, projectToken);\n\n        await projectService.delete(decryptedProject);\n        dispatch(deleteProjectAction(decryptedProject));\n    };\n}\n\n/**\n * Dispatches Close Project action\n */\nexport function closeProject(): (dispatch: Dispatch) => void {\n    return (dispatch: Dispatch): void => {\n        dispatch({ type: ActionTypes.CLOSE_PROJECT_SUCCESS });\n    };\n}\n\n/**\n * Gets assets from project, dispatches load assets action and returns assets\n * @param project - Project from which to load assets\n */\nexport function loadAssets(project: IProject): (dispatch: Dispatch) => Promise<IAsset[]> {\n    return async (dispatch: Dispatch) => {\n        const assetService = new AssetService(project);\n        const assets = await assetService.getAssets();\n        dispatch(loadProjectAssetsAction(assets));\n\n        return assets;\n    };\n}\n\n/**\n * Load metadata from asset within project\n * @param project - Project from which to load asset metadata\n * @param asset - Asset from which to load metadata\n */\nexport function loadAssetMetadata(project: IProject, asset: IAsset): (dispatch: Dispatch) => Promise<IAssetMetadata> {\n    return async (dispatch: Dispatch) => {\n        const assetService = new AssetService(project);\n        const assetMetadata = await assetService.getAssetMetadata(asset);\n        dispatch(loadAssetMetadataAction(assetMetadata));\n\n        return { ...assetMetadata };\n    };\n}\n\n/**\n * Save metadata from asset within project\n * @param project - Project from which to save asset metadata\n * @param assetMetadata - Metadata for asset within project\n */\nexport function saveAssetMetadata(\n    project: IProject,\n    assetMetadata: IAssetMetadata): (dispatch: Dispatch) => Promise<IAssetMetadata> {\n    const newAssetMetadata = { ...assetMetadata, version: appInfo.version };\n\n    return async (dispatch: Dispatch) => {\n        const assetService = new AssetService(project);\n        const savedMetadata = await assetService.save(newAssetMetadata);\n        dispatch(saveAssetMetadataAction(savedMetadata));\n\n        return { ...savedMetadata };\n    };\n}\n\n/**\n * Updates a project and all asset references from oldTagName to newTagName\n * @param project The project to update tags\n * @param oldTagName The old tag name\n * @param newTagName The new tag name\n */\nexport function updateProjectTag(project: IProject, oldTagName: string, newTagName: string)\n    : (dispatch: Dispatch, getState: () => IApplicationState) => Promise<IAssetMetadata[]> {\n    return async (dispatch: Dispatch, getState: () => IApplicationState) => {\n        // Find tags to rename\n        const assetService = new AssetService(project);\n        const assetUpdates = await assetService.renameTag(oldTagName, newTagName);\n\n        // Save updated assets\n        await assetUpdates.forEachAsync(async (assetMetadata) => {\n            await saveAssetMetadata(project, assetMetadata)(dispatch);\n        });\n\n        const currentProject = getState().currentProject;\n        const updatedProject = {\n            ...currentProject,\n            tags: project.tags.map((t) => (t.name === oldTagName) ? { ...t, name: newTagName } : t),\n        };\n\n        // Save updated project tags\n        await saveProject(updatedProject)(dispatch, getState);\n        dispatch(updateProjectTagAction(updatedProject));\n\n        return assetUpdates;\n    };\n}\n\n/**\n * Updates a project and all asset references from oldTagName to newTagName\n * @param project The project to delete tags\n * @param tagName The tag to delete\n */\nexport function deleteProjectTag(project: IProject, tagName)\n    : (dispatch: Dispatch, getState: () => IApplicationState) => Promise<IAssetMetadata[]> {\n    return async (dispatch: Dispatch, getState: () => IApplicationState) => {\n        // Find tags to rename\n        const assetService = new AssetService(project);\n        const assetUpdates = await assetService.deleteTag(tagName);\n\n        // Save updated assets\n        await assetUpdates.forEachAsync(async (assetMetadata) => {\n            await saveAssetMetadata(project, assetMetadata)(dispatch);\n        });\n\n        const currentProject = getState().currentProject;\n        const updatedProject = {\n            ...currentProject,\n            tags: project.tags.filter((t) => t.name !== tagName),\n        };\n\n        // Save updated project tags\n        await saveProject(updatedProject)(dispatch, getState);\n        dispatch(deleteProjectTagAction(updatedProject));\n\n        return assetUpdates;\n    };\n}\n\n/**\n * Initialize export provider, get export data and dispatch export project action\n * @param project - Project to export\n */\nexport function exportProject(project: IProject): (dispatch: Dispatch) => Promise<void> | Promise<IExportResults> {\n    return async (dispatch: Dispatch) => {\n        if (!project.exportFormat) {\n            throw new AppError(ErrorCode.ExportFormatNotFound, strings.errors.exportFormatNotFound.message);\n        }\n\n        if (project.exportFormat && project.exportFormat.providerType) {\n            const exportProvider = ExportProviderFactory.create(\n                project.exportFormat.providerType,\n                project,\n                project.exportFormat.providerOptions);\n\n            const results = await exportProvider.export();\n            dispatch(exportProjectAction(project));\n\n            return results as IExportResults;\n        }\n    };\n}\n\n/**\n * Load project action type\n */\nexport interface ILoadProjectAction extends IPayloadAction<string, IProject> {\n    type: ActionTypes.LOAD_PROJECT_SUCCESS;\n}\n\n/**\n * Close project action type\n */\nexport interface ICloseProjectAction extends Action<string> {\n    type: ActionTypes.CLOSE_PROJECT_SUCCESS;\n}\n\n/**\n * Save project action type\n */\nexport interface ISaveProjectAction extends IPayloadAction<string, IProject> {\n    type: ActionTypes.SAVE_PROJECT_SUCCESS;\n}\n\n/**\n * Delete project action type\n */\nexport interface IDeleteProjectAction extends IPayloadAction<string, IProject> {\n    type: ActionTypes.DELETE_PROJECT_SUCCESS;\n}\n\n/**\n * Load project assets action type\n */\nexport interface ILoadProjectAssetsAction extends IPayloadAction<string, IAsset[]> {\n    type: ActionTypes.LOAD_PROJECT_ASSETS_SUCCESS;\n}\n\n/**\n * Load asset metadata action type\n */\nexport interface ILoadAssetMetadataAction extends IPayloadAction<string, IAssetMetadata> {\n    type: ActionTypes.LOAD_ASSET_METADATA_SUCCESS;\n}\n\n/**\n * Save asset metadata action type\n */\nexport interface ISaveAssetMetadataAction extends IPayloadAction<string, IAssetMetadata> {\n    type: ActionTypes.SAVE_ASSET_METADATA_SUCCESS;\n}\n\n/**\n * Export project action type\n */\nexport interface IExportProjectAction extends IPayloadAction<string, IProject> {\n    type: ActionTypes.EXPORT_PROJECT_SUCCESS;\n}\n\n/**\n * Update Project Tag action type\n */\nexport interface IUpdateProjectTagAction extends IPayloadAction<string, IProject> {\n    type: ActionTypes.UPDATE_PROJECT_TAG_SUCCESS;\n}\n\n/**\n * Delete project tag action type\n */\nexport interface IDeleteProjectTagAction extends IPayloadAction<string, IProject> {\n    type: ActionTypes.DELETE_PROJECT_TAG_SUCCESS;\n}\n\n/**\n * Instance of Load Project action\n */\nexport const loadProjectAction = createPayloadAction<ILoadProjectAction>(ActionTypes.LOAD_PROJECT_SUCCESS);\n/**\n * Instance of Close Project action\n */\nexport const closeProjectAction = createAction<ICloseProjectAction>(ActionTypes.CLOSE_PROJECT_SUCCESS);\n/**\n * Instance of Save Project action\n */\nexport const saveProjectAction = createPayloadAction<ISaveProjectAction>(ActionTypes.SAVE_PROJECT_SUCCESS);\n/**\n * Instance of Delete Project action\n */\nexport const deleteProjectAction = createPayloadAction<IDeleteProjectAction>(ActionTypes.DELETE_PROJECT_SUCCESS);\n/**\n * Instance of Load Project Assets action\n */\nexport const loadProjectAssetsAction =\n    createPayloadAction<ILoadProjectAssetsAction>(ActionTypes.LOAD_PROJECT_ASSETS_SUCCESS);\n/**\n * Instance of Load Asset Metadata action\n */\nexport const loadAssetMetadataAction =\n    createPayloadAction<ILoadAssetMetadataAction>(ActionTypes.LOAD_ASSET_METADATA_SUCCESS);\n/**\n * Instance of Save Asset Metadata action\n */\nexport const saveAssetMetadataAction =\n    createPayloadAction<ISaveAssetMetadataAction>(ActionTypes.SAVE_ASSET_METADATA_SUCCESS);\n/**\n * Instance of Export Project action\n */\nexport const exportProjectAction =\n    createPayloadAction<IExportProjectAction>(ActionTypes.EXPORT_PROJECT_SUCCESS);\n/**\n * Instance of Update project tag action\n */\nexport const updateProjectTagAction =\n    createPayloadAction<IUpdateProjectTagAction>(ActionTypes.UPDATE_PROJECT_TAG_SUCCESS);\n/**\n * Instance of Delete project tag action\n */\nexport const deleteProjectTagAction =\n    createPayloadAction<IDeleteProjectTagAction>(ActionTypes.DELETE_PROJECT_TAG_SUCCESS);\n","import { Action, Dispatch } from \"redux\";\nimport { IpcRendererProxy } from \"../../common/ipcRendererProxy\";\nimport { ActionTypes } from \"./actionTypes\";\nimport { createPayloadAction, createAction, IPayloadAction } from \"./actionCreators\";\nimport { IAppSettings } from \"../../models/applicationState\";\nimport { IProject, IApplicationState } from \"../../models/applicationState\";\nimport { generateKey } from \"../../common/crypto\";\n\n/**\n * Actions to make changes to application settings\n * @member toggleDevTools - Open or close dev tools\n * @member reloadApplication - Reload application\n */\nexport default interface IApplicationActions {\n    toggleDevTools(show: boolean): Promise<void>;\n    reloadApplication(): Promise<void>;\n    saveAppSettings(appSettings: IAppSettings): IAppSettings;\n    ensureSecurityToken(project: IProject): IAppSettings;\n}\n\n/**\n * Open or close dev tools\n * @param show - Dev tools is open\n */\nexport function toggleDevTools(show: boolean): (dispatch: Dispatch) => Promise<void> {\n    return (dispatch: Dispatch) => {\n        return IpcRendererProxy.send(\"TOGGLE_DEV_TOOLS\", show)\n            .then(() => {\n                dispatch(toggleDevToolsAction(show));\n            });\n    };\n}\n\n/**\n * Reload application\n */\nexport function reloadApplication(): (dispatch: Dispatch) => Promise<void> {\n    return (dispatch: Dispatch) => {\n        return IpcRendererProxy.send(\"RELOAD_APP\")\n            .then(() => {\n                dispatch(refreshApplicationAction());\n            });\n    };\n}\n\n/**\n * Save app settings\n */\nexport function saveAppSettings(appSettings: IAppSettings): (dispatch: Dispatch) => Promise<IAppSettings> {\n    return (dispatch: Dispatch) => {\n        dispatch(saveAppSettingsAction(appSettings));\n        return Promise.resolve(appSettings);\n    };\n}\n\n/**\n * Ensures that a valid security token is associated with the project, otherwise creates one\n * @param project The project to validate\n */\nexport function ensureSecurityToken(project: IProject):\n    (dispatch: Dispatch, getState: () => IApplicationState) => Promise<IAppSettings> {\n    return async (dispatch: Dispatch, getState: () => IApplicationState) => {\n        const appState = getState();\n        let securityToken = appState.appSettings.securityTokens\n            .find((st) => st.name === project.securityToken);\n\n        if (securityToken) {\n            return appState.appSettings;\n        }\n\n        securityToken = {\n            name: `${project.name} Token`,\n            key: generateKey(),\n        };\n\n        const updatedAppSettings: IAppSettings = {\n            devToolsEnabled: appState.appSettings.devToolsEnabled,\n            securityTokens: [...appState.appSettings.securityTokens, securityToken],\n        };\n\n        await this.saveAppSettings(updatedAppSettings);\n\n        project.securityToken = securityToken.name;\n        dispatch(ensureSecurityTokenAction(updatedAppSettings));\n        return updatedAppSettings;\n    };\n}\n\n/**\n * Toggle Dev Tools Redux Action type\n */\nexport interface IToggleDevToolsAction extends IPayloadAction<string, boolean> {\n    type: ActionTypes.TOGGLE_DEV_TOOLS_SUCCESS;\n}\n\n/**\n * Refresh app action type\n */\nexport interface IRefreshApplicationAction extends Action<string> {\n    type: ActionTypes.REFRESH_APP_SUCCESS;\n}\n\n/**\n * Save app settings action type\n */\nexport interface ISaveAppSettingsAction extends IPayloadAction<string, IAppSettings> {\n    type: ActionTypes.SAVE_APP_SETTINGS_SUCCESS;\n}\n\n/**\n * Ensure project security token action type\n */\nexport interface IEnsureSecurityTokenAction extends IPayloadAction<string, IAppSettings> {\n    type: ActionTypes.ENSURE_SECURITY_TOKEN_SUCCESS;\n}\n\n/**\n * Instance of toggle dev tools action\n */\nexport const toggleDevToolsAction = createPayloadAction<IToggleDevToolsAction>(ActionTypes.TOGGLE_DEV_TOOLS_SUCCESS);\n/**\n * Instance of refresh app action\n */\nexport const refreshApplicationAction = createAction<IRefreshApplicationAction>(ActionTypes.REFRESH_APP_SUCCESS);\n/**\n * Instance of save app settings action\n */\nexport const saveAppSettingsAction = createPayloadAction<ISaveAppSettingsAction>(ActionTypes.SAVE_APP_SETTINGS_SUCCESS);\n/**\n * Instance of Export Project action\n */\nexport const ensureSecurityTokenAction =\n    createPayloadAction<IEnsureSecurityTokenAction>(ActionTypes.ENSURE_SECURITY_TOKEN_SUCCESS);\n","import React, { SyntheticEvent } from \"react\";\nimport \"./condensedList.scss\";\nimport { Link } from \"react-router-dom\";\n\n/**\n * Properties for Condensed List Component\n * @member title - Title of condensed list\n * @member items - Array of items to be rendered\n * @member newLinkTo - Link for list items\n * @member onClick - Function to call on clicking items\n * @member onDelete - Function to call on deleting items\n * @member Component - Component to be rendered for list items\n */\ninterface ICondensedListProps {\n    title: string;\n    Component: any;\n    items: any[];\n    newLinkTo?: string;\n    onClick?: (item) => void;\n    onDelete?: (item) => void;\n}\n\n/**\n * @name - Condensed List\n * @description - Clickable, deletable and linkable list of items\n */\nexport default class CondensedList extends React.Component<ICondensedListProps> {\n    constructor(props, context) {\n        super(props, context);\n\n        this.onItemClick = this.onItemClick.bind(this);\n        this.onItemDelete = this.onItemDelete.bind(this);\n    }\n\n    public render() {\n        const { title, items, newLinkTo, Component } = this.props;\n\n        return (\n            <div className=\"condensed-list\">\n                <h6 className=\"condensed-list-header bg-darker-2 p-2\">\n                    <span>{title}</span>\n                    {newLinkTo &&\n                        <Link to={newLinkTo} className=\"float-right\">\n                            <i className=\"fas fa-plus-square\" />\n                        </Link>\n                    }\n                </h6>\n                <div className=\"condensed-list-body\">\n                    {(!items) &&\n                        <div className=\"p-3 text-center\">\n                            <i className=\"fas fa-circle-notch fa-spin\" />\n                        </div>\n                    }\n                    {(items && items.length === 0) &&\n                        <div className=\"p-3 text-center\">No items found</div>\n                    }\n                    {(items && items.length > 0) &&\n                        <ul className=\"condensed-list-items\">\n                            {items.map((item) => <Component key={item.id}\n                                item={item}\n                                onClick={(e) => this.onItemClick(e, item)}\n                                onDelete={(e) => this.onItemDelete(e, item)} />)}\n                        </ul>\n                    }\n                </div>\n            </div>\n        );\n    }\n\n    private onItemClick = (e, item) => {\n        if (this.props.onClick) {\n            this.props.onClick(item);\n        }\n    }\n\n    private onItemDelete = (e: SyntheticEvent, item) => {\n        e.stopPropagation();\n        e.preventDefault();\n\n        if (this.props.onDelete) {\n            this.props.onDelete(item);\n        }\n    }\n}\n\n/**\n * Generic list item with an onClick function and a name\n * @param param0 - {item: {name: \"\"}, onClick: (item) => void;}\n */\nexport function ListItem({ item, onClick }) {\n    return (\n        <li>\n            <a onClick={onClick}>\n                <span className=\"px-2\">{item.name}</span>\n            </a>\n        </li>\n    );\n}\n","import React from \"react\";\nimport { Button, Modal, ModalBody, ModalFooter, ModalHeader } from \"reactstrap\";\nimport { strings } from \"../../../../common/strings\";\nimport { IConnection, StorageType } from \"../../../../models/applicationState\";\nimport { StorageProviderFactory } from \"../../../../providers/storage/storageProviderFactory\";\nimport CondensedList, { ListItem } from \"../condensedList/condensedList\";\n\n/**\n * Properties for Cloud File Picker\n * @member connections - Array of connections to choose from\n * @member onSubmit - Function to call with contents of selected file\n * @member onCancel - Optional function to call on modal closed\n * @member fileExtension - Filter on files with extension\n */\nexport interface ICloudFilePickerProps {\n    connections: IConnection[];\n    onSubmit: (content: string) => void;\n\n    onCancel?: () => void;\n    fileExtension?: string;\n}\n\n/**\n * State for Cloud File Picker\n * @member isOpen - Cloud File Picker is open\n * @member modalHeader - Header for Picker modal\n * @member condensedList - List of rendered objects for picking\n * @member selectedConnection - Connection selected in picker\n * @member selectedFile - File selected in picker\n * @member okDisabled - Ok button is disabled\n * @member backDisabled - Back button is disabled\n */\nexport interface ICloudFilePickerState {\n    isOpen: boolean;\n    modalHeader: string;\n    condensedList: any;\n    selectedConnection: IConnection;\n    selectedFile: string;\n    okDisabled: boolean;\n    backDisabled: boolean;\n}\n\n/**\n * @name - Cloud File Picker\n * @description - Modal to choose and read file from cloud connections\n */\nexport class CloudFilePicker extends React.Component<ICloudFilePickerProps, ICloudFilePickerState> {\n\n    constructor(props) {\n        super(props);\n\n        this.open = this.open.bind(this);\n        this.close = this.close.bind(this);\n\n        this.getInitialState = this.getInitialState.bind(this);\n        this.ok = this.ok.bind(this);\n        this.back = this.back.bind(this);\n        this.connectionList = this.connectionList.bind(this);\n        this.onClickConnection = this.onClickConnection.bind(this);\n        this.fileList = this.fileList.bind(this);\n        this.onClickFile = this.onClickFile.bind(this);\n\n        this.state = this.getInitialState();\n    }\n\n    public render() {\n        const closeBtn = <button className=\"close\" onClick={this.close}>&times;</button>;\n\n        return(\n            <Modal isOpen={this.state.isOpen} centered={true}>\n                <ModalHeader toggle={this.close} close={closeBtn}>\n                    {this.state.modalHeader}\n                </ModalHeader>\n                <ModalBody>\n                    {this.state.condensedList}\n                </ModalBody>\n                <ModalFooter>\n                    {this.state.selectedFile || \"\"}\n                    <Button\n                        className=\"btn btn-success mr-1\"\n                        onClick={this.ok}\n                        disabled={this.state.okDisabled}>\n                        Ok\n                    </Button>\n                    <Button\n                        onClick={this.back}\n                        disabled={this.state.backDisabled}>\n                        Go Back\n                    </Button>\n                </ModalFooter>\n            </Modal>\n        );\n    }\n\n    /**\n     * Open Cloud File Picker\n     */\n    public open(): void {\n        this.setState({isOpen: true});\n    }\n\n    /**\n     * Close Cloud File Picker\n     */\n    public close(): void {\n        this.setState(this.getInitialState(),\n            () => {\n                if (this.props.onCancel) {\n                    this.props.onCancel();\n                }\n            },\n        );\n    }\n\n    private getInitialState(): ICloudFilePickerState {\n        return {\n            isOpen: false,\n            modalHeader: strings.homePage.openCloudProject.selectConnection,\n            condensedList: this.connectionList(),\n            selectedConnection: null,\n            selectedFile: null,\n            okDisabled: true,\n            backDisabled: true,\n        };\n    }\n\n    private async ok() {\n        if (this.state.selectedConnection && this.state.selectedFile) {\n            const storageProvider = StorageProviderFactory.createFromConnection(this.state.selectedConnection);\n            const content = await storageProvider.readText(this.state.selectedFile);\n            this.props.onSubmit(content);\n        }\n    }\n\n    private back() {\n        this.setState({\n            ...this.getInitialState(),\n            isOpen: true,\n        });\n    }\n\n    private getCondensedList(title: string, items: any[], onClick) {\n        return <CondensedList\n            title={title}\n            items={items}\n            Component={ListItem}\n            onClick={onClick}\n        />;\n    }\n\n    private isCloudConnection(connection: IConnection): boolean {\n        try {\n            const storageProvider = StorageProviderFactory.createFromConnection(connection);\n            return storageProvider.storageType === StorageType.Cloud;\n        } catch (e) {\n            // Catches connections that are not registered as StorageProviders (e.g. Bing Image search)\n            return false;\n        }\n    }\n\n    private getCloudConnections(connections: IConnection[]): IConnection[] {\n        return connections.filter(this.isCloudConnection);\n    }\n\n    private connectionList() {\n        const connections = this.getCloudConnections(this.props.connections);\n        return this.getCondensedList(\"Cloud Connections\", connections, (args) => this.onClickConnection(args));\n    }\n\n    private async onClickConnection(args) {\n        const connection: IConnection = {\n            ...args,\n        };\n        const fileList = await this.fileList(connection);\n        this.setState({\n            selectedConnection: connection,\n            modalHeader: `Select a file from \"${connection.name}\"`,\n            condensedList: fileList,\n            backDisabled: false,\n        });\n    }\n\n    private async fileList(connection: IConnection) {\n        const storageProvider = StorageProviderFactory.createFromConnection(connection);\n        const files = await storageProvider.listFiles(\n            connection.providerOptions[\"containerName\"],\n            this.props.fileExtension);\n        const fileItems = [];\n        for (let i = 0; i < files.length; i++) {\n            fileItems.push({\n                id: `file-${i + 1}`,\n                name: files[i],\n            });\n        }\n        return this.getCondensedList(\n            `${this.props.fileExtension || \"All\"} Files in \"${connection.name}\"`,\n            fileItems,\n            this.onClickFile,\n        );\n    }\n\n    private onClickFile(args) {\n        const fileName = args.name;\n        this.setState({\n            selectedFile: fileName,\n            okDisabled: false,\n        });\n    }\n}\n","import React, { RefObject } from \"react\";\nimport { Button } from \"reactstrap\";\nimport MessageBox, { IMessageBoxProps } from \"../messageBox/messageBox\";\n\n/**\n * Properties for Confirm Component\n * @member confirmButtonText - Text displayed on 'Confirm' button. Default 'Yes'\n * @member cancelButtonText - Text displayed on 'Cancel' button. Default 'No'\n * @member confirmButtonColor - Color of 'Confirm' button. Default 'primary'\n * @member cancelButtonColor - Color of 'Cancel' button. Default 'secondary'\n * @member onConfirm - Function to call on confirm\n * @member onCancel - Function to call on cancel\n */\nexport interface IConfirmProps extends IMessageBoxProps {\n    confirmButtonText?: string;\n    cancelButtonText?: string;\n    confirmButtonColor?: string;\n    cancelButtonColor?: string;\n    onConfirm: (...params: any[]) => void;\n    onCancel?: (...params: any[]) => void;\n}\n\n/**\n * State for Confirm Component\n * @member params - Open ended parameters that are passed on opening modal\n */\nexport interface IConfirmState {\n    params: any[];\n}\n\n/**\n * @name - Confirm\n * @description - Dialog for confirming an action\n */\nexport default class Confirm extends React.Component<IConfirmProps, IConfirmState> {\n    private messageBox: RefObject<MessageBox>;\n\n    constructor(props, context) {\n        super(props, context);\n\n        this.state = {\n            params: null,\n        };\n\n        this.messageBox = React.createRef<MessageBox>();\n\n        this.open = this.open.bind(this);\n        this.close = this.close.bind(this);\n        this.onConfirmClick = this.onConfirmClick.bind(this);\n        this.onCancelClick = this.onCancelClick.bind(this);\n    }\n\n    public render() {\n        return (\n            <MessageBox ref={this.messageBox}\n                title={this.props.title}\n                message={this.props.message}\n                params={this.state.params}\n                onCancel={this.onCancelClick}>\n                <Button\n                    autoFocus={true}\n                    color={this.props.confirmButtonColor || \"primary\"}\n                    onClick={this.onConfirmClick}>{this.props.confirmButtonText || \"Yes\"}\n                </Button>\n                <Button\n                    color={this.props.cancelButtonColor || \"secondary\"}\n                    onClick={this.onCancelClick}>{this.props.cancelButtonText || \"No\"}\n                </Button>\n            </MessageBox>\n        );\n    }\n\n    /**\n     * Open Confirm Dialog\n     * @param params - Array of parameters passed to onConfirm function\n     */\n    public open(...params: any[]): void {\n        this.setState({ params }, () => this.messageBox.current.open());\n    }\n\n    /**\n     * Close Confirm Dialog\n     */\n    public close(): void {\n        this.messageBox.current.close();\n    }\n\n    private onConfirmClick() {\n        this.props.onConfirm.apply(null, this.state.params);\n    }\n\n    private onCancelClick() {\n        if (this.props.onCancel) {\n            this.props.onCancel.apply(null, this.state.params);\n        }\n    }\n}\n","import React, { SyntheticEvent } from \"react\";\nimport shortid from \"shortid\";\nimport HtmlFileReader from \"../../../../common/htmlFileReader\";\nimport { IFileInfo } from \"../../../../models/applicationState\";\n\n/**\n * Properties for File Picker\n * @member onChange - Function to call on change of file selection\n * @member onError - Function to call on file picking error\n */\nexport interface IFilePickerProps {\n    onChange: (sender: SyntheticEvent, fileText: IFileInfo) => void;\n    onError: (sender: SyntheticEvent, error: any) => void;\n}\n\n/**\n * @name - File Picker\n * @description - Pick file from local file system\n */\nexport default class FilePicker extends React.Component<IFilePickerProps> {\n    private fileInput;\n\n    constructor(props, context) {\n        super(props, context);\n\n        this.fileInput = React.createRef();\n        this.onFileUploaded = this.onFileUploaded.bind(this);\n    }\n\n    /**\n     * Call click on current file input\n     */\n    public upload = () => {\n        this.fileInput.current.click();\n    }\n\n    public render() {\n        return (\n            <input id={shortid.generate()} ref={this.fileInput} type=\"file\" onChange={this.onFileUploaded} />\n        );\n    }\n\n    private onFileUploaded = (e) => {\n        if (e.target.files.length === 0) {\n            this.props.onError(e, \"No files were selected\");\n        }\n\n        HtmlFileReader.readAsText(e.target.files[0])\n            .then((fileInfo) => this.props.onChange(e, fileInfo))\n            .catch((err) => this.props.onError(e, err));\n    }\n}\n","import React from \"react\";\n\nexport default function RecentProjectItem({ item, onClick, onDelete }) {\n    return (\n        <li className=\"recent-project-item\">\n            <a onClick={onClick}>\n                <i className=\"fas fa-folder-open\"></i>\n                <span className=\"px-2\">{item.name}</span>\n                <div className=\"float-right delete-btn\" onClick={onDelete}><i className=\"fas fa-trash\"></i></div>\n            </a>\n        </li>\n    );\n}\n","import shortid from \"shortid\";\nimport {\n    IProject, ITag, IConnection, AppError, ErrorCode,\n    IAssetMetadata, IRegion, RegionType, AssetState, IFileInfo,\n    IAsset, AssetType, ModelPathType,\n} from \"../models/applicationState\";\nimport { IV1Project, IV1Region } from \"../models/v1Models\";\nimport packageJson from \"../../package.json\";\nimport { AssetService } from \"./assetService\";\nimport HtmlFileReader from \"../common/htmlFileReader\";\nimport { normalizeSlashes } from \"../common/utils\";\nimport Guard from \"../common/guard\";\n\n/**\n * Functions required for an import service\n * @member convertProject - Converts a v1 project to v2 project\n */\ninterface IImportService {\n    convertProject(project: IFileInfo): Promise<IProject>;\n    generateAssets(v1Project: IFileInfo, v2Project: IProject): Promise<IAssetMetadata[]>;\n}\n\ninterface IV1Frame {\n    name: string | number;\n    regions: IV1Region[];\n}\n\n/**\n * @name - Import Service\n * @description - Functions for importing v1 projects to v2 application\n */\nexport default class ImportService implements IImportService {\n    private assetService: AssetService;\n\n    /**\n     * Converts given v1 project information to v2 format\n     * @param projectInfo The project file information and content\n     */\n    public async convertProject(projectInfo: IFileInfo): Promise<IProject> {\n        Guard.null(projectInfo);\n\n        let originalProject: IV1Project;\n        let connection: IConnection;\n        let parsedTags: ITag[];\n\n        try {\n            originalProject = JSON.parse(projectInfo.content as string);\n        } catch (e) {\n            throw new AppError(ErrorCode.ProjectInvalidJson, \"Error parsing JSON\");\n        }\n\n        parsedTags = this.parseTags(originalProject);\n        connection = this.generateConnection(projectInfo);\n\n        // map v1 values to v2 values\n        return {\n            id: shortid.generate(),\n            name: projectInfo.file.name.split(\".\")[0],\n            version: packageJson.version,\n            securityToken: `${projectInfo.file.name.split(\".\")[0]} Token`,\n            description: \"Converted V1 Project\",\n            tags: parsedTags,\n            sourceConnection: connection,\n            targetConnection: connection,\n            exportFormat: null,\n            videoSettings: {\n                frameExtractionRate: originalProject.framerate ? Number(originalProject.framerate) : 15,\n            },\n            activeLearningSettings: null,\n            autoSave: true,\n        };\n    }\n\n    /**\n     * Generate assets based on V1 Project frames and regions\n     * @param v1Project Original v1 Project Content and File Information\n     * @param v2Project Partially converted v2 project file\n     */\n    public async generateAssets(v1Project: IFileInfo, v2Project: IProject): Promise<IAssetMetadata[]> {\n        Guard.null(v1Project);\n        Guard.null(v2Project);\n\n        let originalProject: IV1Project;\n        let generatedAssetMetadata: IAssetMetadata[] = [];\n        this.assetService = new AssetService(v2Project);\n\n        originalProject = JSON.parse(v1Project.content as string);\n\n        const frames: IV1Frame[] = Object.keys(originalProject.frames).map((frameName) => {\n            return {\n                name: frameName,\n                regions: originalProject.frames[frameName],\n            };\n        });\n\n        if (this.isVideoProject(v1Project)) {\n            generatedAssetMetadata = await this.generateVideoAssets(v1Project, frames);\n        } else {\n            generatedAssetMetadata = await this.generateImageAssets(v1Project, frames);\n        }\n\n        return generatedAssetMetadata;\n    }\n\n    /**\n     * Generate assets for V1 Image Project frames and regions\n     * @param v1Project - v1 Project content and file information\n     * @param frames - Array of frames in v1 project\n     */\n    private async generateImageAssets(v1Project: IFileInfo, frames: IV1Frame[]): Promise<IAssetMetadata[]> {\n        const projectPath = normalizeSlashes(v1Project.file.path.replace(/\\.[^/.]+$/, \"\"));\n\n        return await frames.mapAsync(async (frame) => {\n            const filePath = `${projectPath}/${frame.name}`;\n            const asset = AssetService.createAssetFromFilePath(filePath);\n            const assetState = this.getAssetState(frame);\n\n            return await this.createAssetMetadata(asset, assetState, frame.regions);\n        });\n    }\n\n    /**\n     * Generate assets for V1 Video Project frames and regions\n     * @param v1Project - v1 Project content and file information\n     * @param frames - Array of frames in v1 project\n     */\n    private async generateVideoAssets(v1Project: IFileInfo, frames: IV1Frame[]): Promise<IAssetMetadata[]> {\n        const parentVideoAsset = await this.createParentVideoAsset(v1Project);\n        const originalProject = JSON.parse(v1Project.content as string);\n\n        const videoFrameAssets = await frames.mapAsync(async (frame) => {\n            const frameInt = Number(frame.name);\n            const timestamp = (frameInt - 1) / Number(originalProject.framerate);\n            const asset = this.createVideoFrameAsset(parentVideoAsset, timestamp);\n            const assetState = this.getAssetState(frame);\n\n            return await this.createAssetMetadata(asset, assetState, frame.regions, parentVideoAsset);\n        });\n\n        const taggedAssets = videoFrameAssets\n            .filter((assetMetadata) => assetMetadata.asset.state === AssetState.Tagged);\n        const parentAssetState = taggedAssets.length > 0 ? AssetState.Tagged : AssetState.Visited;\n        const parentAssetMetadata = await this.createAssetMetadata(parentVideoAsset, parentAssetState, []);\n\n        return [parentAssetMetadata].concat(videoFrameAssets);\n    }\n\n    /**\n     * Checks to see if the specified project is a video project\n     * @param v1Project The original v1 project file info\n     */\n    private isVideoProject(v1Project: IFileInfo): boolean {\n        const pathParts = v1Project.file.path.split(/[\\\\\\/]/);\n        const fileName = pathParts[pathParts.length - 1];\n        const fileNameParts = fileName.split(\".\");\n\n        return fileNameParts[1] && AssetService.getAssetType(fileNameParts[1]) === AssetType.Video;\n    }\n\n    /**\n     * Generate parent asset based on V1 Project video assets\n     * @param v1Project - V1 Project Content and File Information\n     */\n    private async createParentVideoAsset(v1Project: IFileInfo): Promise<IAsset> {\n        const filePath = v1Project.file.path.replace(/\\.[^/.]+$/, \"\");\n        const parentAsset = AssetService.createAssetFromFilePath(filePath, filePath.replace(/^.*[\\\\\\/]/, \"\"));\n        const assetProps = await HtmlFileReader.readAssetAttributes(parentAsset);\n\n        parentAsset.size = { height: assetProps.height, width: assetProps.width };\n        parentAsset.state = AssetState.Visited;\n\n        return parentAsset;\n    }\n\n    /**\n     * Generate connections from v1 project file location\n     * @param project - V1 Project Content and File Information\n     */\n    private generateConnection(project: IFileInfo): IConnection {\n        const folderPath = this.isVideoProject(project)\n            ? project.file.path.replace(/[^(\\/|\\\\)]*$/, \"\")\n            : project.file.path.replace(\".json\", \"\");\n\n        const connection: IConnection = {\n            id: shortid.generate(),\n            name: `${project.file.name.split(\".\")[0]} Connection`,\n            providerType: \"localFileSystemProxy\",\n            providerOptions: {\n                folderPath: normalizeSlashes(folderPath),\n            },\n        };\n\n        return connection;\n    }\n\n    /**\n     * Parse v1 project's tag string and return array of ITags\n     * @param project - V1 Project Content and File Information\n     */\n    private parseTags(project: IV1Project): ITag[] {\n        const tagStrings = project.inputTags.split(\",\");\n\n        return tagStrings\n            .map((tagName, index) => {\n                return {\n                    name: tagName,\n                    color: project.tag_colors[index],\n                } as ITag;\n            })\n            .filter((tag) => !!tag.name);\n    }\n\n    /**\n     * Generate regions based on V1 Project asset metadata\n     * @param metadata - Asset Metadata from asset created from file path\n     * @param frameRegions - V1 Regions within the V1 Frame\n     */\n    private addRegions(metadata: IAssetMetadata, frameRegions: IV1Region[]): void {\n        frameRegions.forEach((region) => {\n            const generatedRegion: IRegion = {\n                id: region.UID,\n                type: RegionType.Rectangle,\n                tags: region.tags,\n                points: [\n                    { x: region.x1, y: region.y1 },\n                    { x: region.x1, y: region.y2 },\n                    { x: region.x2, y: region.y1 },\n                    { x: region.x2, y: region.y2 },\n                ],\n                boundingBox: {\n                    height: (region.y2 - region.y1),\n                    width: (region.x2 - region.x1),\n                    left: region.x1,\n                    top: region.y1,\n                },\n            };\n            metadata.regions.push(generatedRegion);\n        });\n    }\n\n    /**\n     * Creates a child video frame asset\n     * @param parent The parent video asset\n     * @param timestamp The timestamp for the child video frame\n     */\n    private createVideoFrameAsset(parent: IAsset, timestamp: number): IAsset {\n        return {\n            ...AssetService.createAssetFromFilePath(`${parent.path}#t=${timestamp}`),\n            timestamp,\n            parent,\n            type: AssetType.VideoFrame,\n            size: parent.size,\n        };\n    }\n\n    /**\n     * Gets the v2 asset state for the specified v1 asset frame\n     * @param frame The v1 asset frame\n     */\n    private getAssetState(frame: IV1Frame): AssetState {\n        return frame.regions.length > 0 ? AssetState.Tagged : AssetState.Visited;\n    }\n\n    /**\n     * Creates an asset metadata for the specified asset\n     * @param asset The converted v2 asset\n     * @param assetState The new v2 asset state\n     * @param frameRegions The v1 asset regions\n     * @param parent The v2 parent asset (Used for video assets)\n     */\n    private async createAssetMetadata(\n        asset: IAsset,\n        assetState: AssetState,\n        frameRegions: IV1Region[],\n        parent?: IAsset,\n    ): Promise<IAssetMetadata> {\n        const metadata = await this.assetService.getAssetMetadata(asset);\n        this.addRegions(metadata, frameRegions);\n        metadata.asset.state = assetState;\n\n        if (parent) {\n            metadata.asset.parent = parent;\n        }\n\n        if (!metadata.asset.size) {\n            metadata.asset.size = await HtmlFileReader.readAssetAttributes(asset);\n        }\n\n        return metadata;\n    }\n}\n","import React, { SyntheticEvent } from \"react\";\nimport { connect } from \"react-redux\";\nimport { RouteComponentProps } from \"react-router-dom\";\nimport { bindActionCreators } from \"redux\";\nimport { strings, interpolate } from \"../../../../common/strings\";\nimport IProjectActions, * as projectActions from \"../../../../redux/actions/projectActions\";\nimport IApplicationActions, * as applicationActions from \"../../../../redux/actions/applicationActions\";\nimport { CloudFilePicker } from \"../../common/cloudFilePicker/cloudFilePicker\";\nimport CondensedList from \"../../common/condensedList/condensedList\";\nimport Confirm from \"../../common/confirm/confirm\";\nimport FilePicker from \"../../common/filePicker/filePicker\";\nimport \"./homePage.scss\";\nimport RecentProjectItem from \"./recentProjectItem\";\nimport { constants } from \"../../../../common/constants\";\nimport {\n    IApplicationState, IConnection, IProject, IFileInfo,\n    ErrorCode, AppError, IAppError, IAppSettings, IAsset,\n} from \"../../../../models/applicationState\";\nimport ImportService from \"../../../../services/importService\";\nimport { IAssetMetadata } from \"../../../../models/applicationState\";\nimport { toast } from \"react-toastify\";\nimport MessageBox from \"../../common/messageBox/messageBox\";\nimport { isElectron } from \"../../../../common/hostProcess\";\n\nexport interface IHomePageProps extends RouteComponentProps, React.Props<HomePage> {\n    recentProjects: IProject[];\n    connections: IConnection[];\n    actions: IProjectActions;\n    applicationActions: IApplicationActions;\n    appSettings: IAppSettings;\n    project: IProject;\n}\n\nexport interface IHomePageState {\n    cloudPickerOpen: boolean;\n}\n\nfunction mapStateToProps(state: IApplicationState) {\n    return {\n        recentProjects: state.recentProjects,\n        connections: state.connections,\n        appSettings: state.appSettings,\n        project: state.currentProject,\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators(projectActions, dispatch),\n        applicationActions: bindActionCreators(applicationActions, dispatch),\n    };\n}\n\n@connect(mapStateToProps, mapDispatchToProps)\nexport default class HomePage extends React.Component<IHomePageProps, IHomePageState> {\n    public state: IHomePageState = {\n        cloudPickerOpen: false,\n    };\n    private filePicker: React.RefObject<FilePicker> = React.createRef();\n    private deleteConfirm: React.RefObject<Confirm> = React.createRef();\n    private cloudFilePicker: React.RefObject<CloudFilePicker> = React.createRef();\n    private importConfirm: React.RefObject<Confirm> = React.createRef();\n\n    public render() {\n        return (\n            <div className=\"app-homepage\">\n                <div className=\"app-homepage-main\">\n                    <ul>\n                        <li>\n                            <a href=\"#\" onClick={this.createNewProject} className=\"p-5 new-project\">\n                                <i className=\"fas fa-folder-plus fa-9x\"></i>\n                                <h6>{strings.homePage.newProject}</h6>\n                            </a>\n                        </li>\n                        {isElectron() &&\n                            <li>\n                                <a href=\"#\" className=\"p-5 file-upload\"\n                                    onClick={() => this.filePicker.current.upload()} >\n                                    <i className=\"fas fa-folder-open fa-9x\"></i>\n                                    <h6>{strings.homePage.openLocalProject.title}</h6>\n                                </a>\n                                <FilePicker ref={this.filePicker}\n                                    onChange={this.onProjectFileUpload}\n                                    onError={this.onProjectFileUploadError} />\n                            </li>\n                        }\n                        <li>\n                            {/*Open Cloud Project*/}\n                            <a href=\"#\" onClick={this.handleOpenCloudProjectClick} className=\"p-5 cloud-open-project\">\n                                <i className=\"fas fa-cloud fa-9x\"></i>\n                                <h6>{strings.homePage.openCloudProject.title}</h6>\n                            </a>\n                            <CloudFilePicker\n                                ref={this.cloudFilePicker}\n                                connections={this.props.connections}\n                                onSubmit={(content) => this.loadSelectedProject(JSON.parse(content))}\n                                fileExtension={constants.projectFileExtension}\n                            />\n                        </li>\n                    </ul>\n                </div>\n                {(this.props.recentProjects && this.props.recentProjects.length > 0) &&\n                    <div className=\"app-homepage-recent bg-lighter-1\">\n                        <CondensedList\n                            title={strings.homePage.recentProjects}\n                            Component={RecentProjectItem}\n                            items={this.props.recentProjects}\n                            onClick={this.loadSelectedProject}\n                            onDelete={(project) => this.deleteConfirm.current.open(project)} />\n                    </div>\n                }\n                <Confirm title=\"Delete Project\"\n                    ref={this.deleteConfirm as any}\n                    message={(project: IProject) => `${strings.homePage.deleteProject.confirmation} ${project.name}?`}\n                    confirmButtonColor=\"danger\"\n                    onConfirm={this.deleteProject} />\n                <Confirm title=\"Import Project\"\n                    ref={this.importConfirm as any}\n                    message={(project: IFileInfo) =>\n                        interpolate(strings.homePage.importProject.confirmation, { project })}\n                    confirmButtonColor=\"danger\"\n                    onConfirm={this.convertProject} />\n            </div>\n        );\n    }\n\n    private createNewProject = (e: SyntheticEvent) => {\n        this.props.actions.closeProject();\n        this.props.history.push(\"/projects/create\");\n\n        e.preventDefault();\n    }\n\n    private handleOpenCloudProjectClick = () => {\n        this.cloudFilePicker.current.open();\n    }\n\n    private onProjectFileUpload = async (e, project) => {\n        let projectJson: IProject;\n\n        try {\n            projectJson = JSON.parse(project.content);\n        } catch (error) {\n            throw new AppError(ErrorCode.ProjectInvalidJson, \"Error parsing JSON\");\n        }\n\n        // need a better check to tell if its v1\n        if (projectJson.name === null || projectJson.name === undefined) {\n            try {\n                await this.importConfirm.current.open(project);\n            } catch (e) {\n                throw new Error(e.message);\n            }\n        } else {\n            await this.loadSelectedProject(projectJson);\n        }\n    }\n\n    private onProjectFileUploadError = (e, error: any) => {\n        if (error instanceof AppError) {\n            throw error;\n        }\n\n        throw new AppError(ErrorCode.ProjectUploadError, \"Error uploading project file\");\n    }\n\n    private loadSelectedProject = async (project: IProject) => {\n        await this.props.actions.loadProject(project);\n        this.props.history.push(`/projects/${project.id}/edit`);\n    }\n\n    private deleteProject = async (project: IProject) => {\n        try {\n            await this.props.actions.deleteProject(project);\n            toast.info(interpolate(strings.homePage.messages.deleteSuccess, { project }));\n        } catch (error) {\n            throw new AppError(ErrorCode.ProjectDeleteError, \"Error deleting project file\");\n        }\n    }\n\n    private convertProject = async (projectInfo: IFileInfo) => {\n        const importService = new ImportService();\n        let generatedAssetMetadata: IAssetMetadata[];\n        let project: IProject;\n\n        try {\n            project = await importService.convertProject(projectInfo);\n        } catch (e) {\n            throw new AppError(ErrorCode.V1ImportError, \"Error converting v1 project file\");\n        }\n\n        this.props.applicationActions.ensureSecurityToken(project);\n\n        try {\n            generatedAssetMetadata = await importService.generateAssets(projectInfo, project);\n            await this.props.actions.saveProject(project);\n            await this.props.actions.loadProject(project);\n            await generatedAssetMetadata.mapAsync((assetMetadata) => {\n                return this.props.actions.saveAssetMetadata(this.props.project, assetMetadata);\n            });\n        } catch (e) {\n            throw new Error(`Error importing project information - ${e.message}`);\n        }\n\n        await this.props.actions.saveProject(this.props.project);\n        await this.loadSelectedProject(this.props.project);\n    }\n}\n","import React, { Fragment } from \"react\";\nimport { FieldTemplateProps } from \"react-jsonschema-form\";\n\nexport default function CustomFieldTemplate(props: FieldTemplateProps) {\n    const { id, label, required, description, rawErrors, schema, uiSchema, children } = props;\n    const classNames = [];\n    if (props.schema.type === \"object\") {\n        classNames.push(\"object-wrapper\");\n    } else {\n        classNames.push(\"form-group\");\n    }\n\n    if (rawErrors && rawErrors.length > 0) {\n        classNames.push(\"is-invalid\");\n    } else {\n        classNames.push(\"is-valid\");\n    }\n\n    return (\n        <div className={classNames.join(\" \")}>\n            { /* Render label for non-objects except for when an object has defined a ui:field template */}\n            {schema.type !== \"array\" &&\n                (schema.type !== \"object\" || (schema.type === \"object\" && uiSchema[\"ui:field\"])) &&\n                <label htmlFor={id}>{label}{required ? \"*\" : null}</label>\n            }\n            {schema.type === \"array\" &&\n                <Fragment>\n                    <h4>{label}</h4>\n                    {description && <small>{description}</small>}\n                </Fragment>\n            }\n            {children}\n            {schema.type !== \"array\" && description && <small className=\"text-muted\">{description}</small>}\n            {rawErrors && rawErrors.length > 0 &&\n                <div className=\"invalid-feedback\">\n                    {rawErrors.map((errorMessage, idx) => <div key={idx}>{label} {errorMessage}</div>)}\n                </div>\n            }\n        </div>\n    );\n}\n","import React from \"react\";\nimport { LocalFileSystemProxy } from \"../../../../providers/storage/localFileSystemProxy\";\nimport { strings } from \"../../../../common/strings\";\n\n/**\n * Properties for Local Folder Picker\n * @member id - ID for HTML form control element\n * @member value - Initial value for picker\n * @member onChange - Function to call on change to selected value\n */\ninterface ILocalFolderPickerProps {\n    id?: string;\n    value: string;\n    onChange: (value) => void;\n}\n\n/**\n * State for Local Folder Picker\n * @member value - Selected folder\n */\ninterface ILocalFolderPickerState {\n    value: string;\n}\n\n/**\n * @name - Local Folder Picker\n * @description - Select folder from local file system\n */\nexport default class LocalFolderPicker extends React.Component<ILocalFolderPickerProps, ILocalFolderPickerState> {\n    private localFileSystem: LocalFileSystemProxy;\n\n    constructor(props, context) {\n        super(props, context);\n\n        this.state = {\n            value: this.props.value || \"\",\n        };\n\n        this.localFileSystem = new LocalFileSystemProxy();\n        this.selectLocalFolder = this.selectLocalFolder.bind(this);\n    }\n\n    public render() {\n        const { id } = this.props;\n        const { value } = this.state;\n\n        return (\n            <div className=\"input-group\">\n                <input id={id} type=\"text\" className=\"form-control\" value={value} readOnly={true} />\n                <div className=\"input-group-append\">\n                    <button className=\"btn btn-primary\"\n                        type=\"button\"\n                        onClick={this.selectLocalFolder}>{strings.connections.providers.local.selectFolder}\n                    </button>\n                </div>\n            </div>\n        );\n    }\n\n    public componentDidUpdate(prevProps) {\n        if (prevProps.value !== this.props.value) {\n            this.setState({\n                value: this.props.value,\n            });\n        }\n    }\n\n    private selectLocalFolder = async () => {\n        const filePath = await this.localFileSystem.selectContainer();\n        if (filePath) {\n            this.setState({\n                value: filePath,\n            }, () => this.props.onChange(filePath));\n        }\n    }\n}\n","import React from \"react\";\nimport { FieldProps, WidgetProps } from \"react-jsonschema-form\";\nimport Guard from \"../../../../common/guard\";\n\n/**\n * Custom field for react-jsonschema-form\n * @param Widget UI Widget for form\n * @param mapProps Function mapping props to an object\n */\nexport function CustomField<Props = {}>(Widget: any, mapProps?: (props: FieldProps) => Props) {\n    Guard.null(Widget);\n\n    return function render(props: FieldProps) {\n        const widgetProps = mapProps ? mapProps(props) : props;\n        return (<Widget {...widgetProps} />);\n    };\n}\n\n/**\n * Custom widget for react-jsonschema-form\n * @param Widget UI Widget for form\n * @param mapProps Function mapping component props to form widget props\n */\nexport function CustomWidget<Props = {}>(Widget: any, mapProps?: (props: WidgetProps) => Props) {\n    Guard.null(Widget);\n\n    return function render(props: WidgetProps) {\n        const widgetProps = mapProps ? mapProps(props) : props;\n        return (<Widget {...widgetProps} />);\n    };\n}\n","import React from \"react\";\nimport Form, { ISubmitEvent, IChangeEvent, Widget } from \"react-jsonschema-form\";\nimport { IActiveLearningSettings, ModelPathType } from \"../../../../models/applicationState\";\nimport { strings, addLocValues } from \"../../../../common/strings\";\nimport CustomFieldTemplate from \"../../common/customField/customFieldTemplate\";\nimport LocalFolderPicker from \"../../common/localFolderPicker/localFolderPicker\";\nimport { CustomWidget } from \"../../common/customField/customField\";\nimport Checkbox from \"rc-checkbox\";\n\n// tslint:disable-next-line:no-var-requires\nconst formSchema = addLocValues(require(\"./activeLearningForm.json\"));\n// tslint:disable-next-line:no-var-requires\nconst uiSchema = addLocValues(require(\"./activeLearningForm.ui.json\"));\n\nexport interface IActiveLearningFormProps extends React.Props<ActiveLearningForm> {\n    settings: IActiveLearningSettings;\n    onSubmit: (settings: IActiveLearningSettings) => void;\n    onChange?: (settings: IActiveLearningSettings) => void;\n    onCancel?: () => void;\n}\n\nexport interface IActiveLearningFormState {\n    classNames: string[];\n    formData: IActiveLearningSettings;\n    uiSchema: any;\n    formSchema: any;\n}\n\nexport class ActiveLearningForm extends React.Component<IActiveLearningFormProps, IActiveLearningFormState> {\n    public state: IActiveLearningFormState = {\n        classNames: [\"needs-validation\"],\n        uiSchema: { ...uiSchema },\n        formSchema: { ...formSchema },\n        formData: {\n            ...this.props.settings,\n        },\n    };\n\n    private widgets = {\n        localFolderPicker: (LocalFolderPicker as any) as Widget,\n        checkbox: CustomWidget(Checkbox, (props) => ({\n            checked: props.value,\n            onChange: (value) => props.onChange(value.target.checked),\n            disabled: props.disabled,\n        })),\n    };\n\n    public componentDidUpdate(prevProps: Readonly<IActiveLearningFormProps>) {\n        if (this.props.settings !== prevProps.settings) {\n            this.setState({ formData: this.props.settings });\n        }\n    }\n\n    public render() {\n        return (\n            <Form\n                className={this.state.classNames.join(\" \")}\n                showErrorList={false}\n                liveValidate={true}\n                noHtml5Validate={true}\n                FieldTemplate={CustomFieldTemplate}\n                widgets={this.widgets}\n                schema={this.state.formSchema}\n                uiSchema={this.state.uiSchema}\n                formData={this.state.formData}\n                onChange={this.onFormChange}\n                onSubmit={this.onFormSubmit}>\n                <div>\n                    <button className=\"btn btn-success mr-1\" type=\"submit\">{strings.projectSettings.save}</button>\n                    <button className=\"btn btn-secondary btn-cancel\"\n                        type=\"button\"\n                        onClick={this.onFormCancel}>{strings.common.cancel}</button>\n                </div>\n            </Form>\n        );\n    }\n\n    private onFormChange = (changeEvent: IChangeEvent<IActiveLearningSettings>): void => {\n        let updatedSettings = changeEvent.formData;\n\n        if (changeEvent.formData.modelPathType !== this.state.formData.modelPathType) {\n            updatedSettings = {\n                ...changeEvent.formData,\n                modelPath: null,\n                modelUrl: null,\n            };\n        }\n\n        this.setState({\n            formData: updatedSettings,\n        }, () => {\n            if (this.props.onChange) {\n                this.props.onChange(updatedSettings);\n            }\n        });\n    }\n\n    private onFormSubmit = (args: ISubmitEvent<IActiveLearningSettings>): void => {\n        const settings: IActiveLearningSettings = {\n            ...args.formData,\n        };\n\n        this.setState({ formData: settings });\n        this.props.onSubmit(settings);\n    }\n\n    private onFormCancel = (): void => {\n        if (this.props.onCancel) {\n            this.props.onCancel();\n        }\n    }\n}\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { RouteComponentProps } from \"react-router\";\nimport { bindActionCreators } from \"redux\";\nimport { IActiveLearningSettings, IProject, IApplicationState } from \"../../../../models/applicationState\";\nimport IProjectActions, * as projectActions from \"../../../../redux/actions/projectActions\";\nimport { strings } from \"../../../../common/strings\";\nimport { ActiveLearningForm } from \"./activeLearningForm\";\nimport { toast } from \"react-toastify\";\n\nexport interface IActiveLearningPageProps extends RouteComponentProps, React.Props<ActiveLearningPage> {\n    project: IProject;\n    recentProjects: IProject[];\n    actions: IProjectActions;\n}\n\nexport interface IActiveLearningPageState {\n    settings: IActiveLearningSettings;\n}\n\nfunction mapStateToProps(state: IApplicationState) {\n    return {\n        project: state.currentProject,\n        recentProjects: state.recentProjects,\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators(projectActions, dispatch),\n    };\n}\n\n@connect(mapStateToProps, mapDispatchToProps)\nexport default class ActiveLearningPage extends React.Component<IActiveLearningPageProps, IActiveLearningPageState> {\n    public state: IActiveLearningPageState = {\n        settings: this.props.project ? this.props.project.activeLearningSettings : null,\n    };\n\n    public async componentDidMount() {\n        const projectId = this.props.match.params[\"projectId\"];\n        // If we are creating a new project check to see if there is a partial\n        // project already created in local storage\n        if (!this.props.project && projectId) {\n            const projectToLoad = this.props.recentProjects.find((project) => project.id === projectId);\n            if (projectToLoad) {\n                await this.props.actions.loadProject(projectToLoad);\n            }\n        }\n    }\n\n    public componentDidUpdate(prevProps: Readonly<IActiveLearningPageProps>) {\n        if (prevProps.project !== this.props.project) {\n            this.setState({ settings: this.props.project.activeLearningSettings });\n        }\n    }\n\n    public render() {\n        return (\n            <div className=\"project-settings-page\">\n                <div className=\"project-settings-page-settings m-3\">\n                    <h3>\n                        <i className=\"fas fa-graduation-cap\" />\n                        <span className=\"px-2\">\n                            {strings.activeLearning.title}\n                        </span>\n                    </h3>\n                    <div className=\"m-3\">\n                        <ActiveLearningForm\n                            settings={this.state.settings}\n                            onSubmit={this.onFormSubmit}\n                            onCancel={this.onFormCancel} />\n                    </div>\n                </div>\n            </div>\n        );\n    }\n\n    private onFormSubmit = async (settings: IActiveLearningSettings): Promise<void> => {\n        const updatedProject: IProject = {\n            ...this.props.project,\n            activeLearningSettings: settings,\n        };\n\n        await this.props.actions.saveProject(updatedProject);\n        toast.success(strings.activeLearning.messages.saveSuccess);\n        this.props.history.goBack();\n    }\n\n    private onFormCancel = (): void => {\n        this.props.history.goBack();\n    }\n}\n","import React, { Fragment } from \"react\";\nimport { ObjectFieldTemplateProps } from \"react-jsonschema-form\";\n\nexport function ObjectFieldTemplate(props: ObjectFieldTemplateProps) {\n    return (\n        <Fragment>\n            {props.title}\n            {props.description}\n            {props.properties.map((item) => item.content)}\n        </Fragment>\n    );\n}\n","import React from \"react\";\nimport { ArrayFieldTemplateProps } from \"react-jsonschema-form\";\nimport { strings } from \"../../../../common/strings\";\n\nexport function ArrayFieldTemplate(props: ArrayFieldTemplateProps) {\n    return (\n        <div>\n            {props.canAdd &&\n                <div className=\"array-field-toolbar my-3\">\n                    <button type=\"button\" className=\"btn btn-info\" onClick={props.onAddClick}>\n                        <i className=\"fas fa-plus-circle\"></i>\n                        <span className=\"ml-1\">Add {props.schema.title}</span>\n                    </button>\n                </div>\n            }\n            {props.items.map((item) => {\n                return <div className=\"form-row\" key={item.index}>\n                    {item.children}\n                    {item.hasRemove &&\n                        <div className=\"array-item-toolbar\">\n                            <button\n                                type=\"button\"\n                                className=\"btn btn-sm btn-danger\"\n                                onClick={item.onDropIndexClick(item.index)}>\n                                <i className=\"fas fa-trash\"></i>\n                                <span className=\"ml-1\">{strings.common.delete}</span>\n                            </button>\n                        </div>\n                    }\n                </div>;\n            })}\n        </div>\n    );\n}\n","import React, { RefObject, SyntheticEvent } from \"react\";\n\n/**\n * Protected input properties\n * @member value - The value to bind to the component\n * @member securityToken - Optional value used to encrypt/decrypt the value\n */\nexport interface IProtectedInputProps extends React.Props<ProtectedInput> {\n    id: string;\n    value: string;\n    readOnly?: boolean;\n    onChange: (value: string) => void;\n}\n\n/** Protected input state\n * @member showKey - Whether or not the input field renders as text or password field type\n * @member decryptedValue - The decrypted value to bind to the input field\n */\nexport interface IProtectedInputState {\n    showKey: boolean;\n    value: string;\n}\n\n/**\n * Protected input Component\n * @description - Used for sensitive fields such as passwords, keys, tokens, etc\n */\nexport class ProtectedInput extends React.Component<IProtectedInputProps, IProtectedInputState> {\n    private inputElement: RefObject<HTMLInputElement> = React.createRef<HTMLInputElement>();\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            showKey: false,\n            value: this.props.value || \"\",\n        };\n\n        this.toggleKeyVisibility = this.toggleKeyVisibility.bind(this);\n        this.copyKey = this.copyKey.bind(this);\n        this.onChange = this.onChange.bind(this);\n    }\n\n    public componentDidMount() {\n        this.props.onChange(this.props.value);\n    }\n\n    public render() {\n        const { id, readOnly } = this.props;\n        const { showKey, value } = this.state;\n\n        return (\n            <div className=\"input-group\">\n                <input id={id}\n                    ref={this.inputElement}\n                    type={showKey ? \"text\" : \"password\"}\n                    readOnly={readOnly}\n                    className=\"form-control\"\n                    value={value}\n                    onChange={this.onChange} />\n                <div className=\"input-group-append\">\n                    <button type=\"button\"\n                        title={showKey ? \"Hide\" : \"Show\"}\n                        className=\"btn btn-primary btn-visibility\"\n                        onClick={this.toggleKeyVisibility}>\n                        <i className={showKey ? \"fas fa-eye-slash\" : \"fas fa-eye\"}></i>\n                    </button>\n                    <button type=\"button\"\n                        title=\"Copy\"\n                        className=\"btn btn-primary btn-copy\"\n                        onClick={this.copyKey}>\n                        <i className=\"fas fa-copy\"></i>\n                    </button>\n                </div>\n            </div>\n        );\n    }\n\n    private onChange(e: SyntheticEvent) {\n        const input = e.target as HTMLInputElement;\n        const value = input.value ? input.value : undefined;\n        this.setState({ value }, () => this.props.onChange(value));\n    }\n\n    private toggleKeyVisibility() {\n        this.setState({\n            showKey: !this.state.showKey,\n        });\n    }\n\n    private async copyKey() {\n        const clipboard = (navigator as any).clipboard;\n        await clipboard.writeText(this.inputElement.current.value);\n    }\n}\n","import React from \"react\";\nimport { strings, addLocValues } from \"../../../../common/strings\";\nimport Form, { FormValidation, Widget } from \"react-jsonschema-form\";\nimport { ObjectFieldTemplate } from \"../../common/objectField/objectFieldTemplate\";\nimport CustomFieldTemplate from \"../../common/customField/customFieldTemplate\";\nimport { ArrayFieldTemplate } from \"../../common/arrayField/arrayFieldTemplate\";\nimport { IAppSettings } from \"../../../../models/applicationState\";\nimport { ProtectedInput } from \"../../common/protectedInput/protectedInput\";\nimport { CustomField } from \"../../common/customField/customField\";\nimport { generateKey } from \"../../../../common/crypto\";\n// tslint:disable-next-line:no-var-requires\nconst formSchema = addLocValues(require(\"./appSettingsForm.json\"));\n// tslint:disable-next-line:no-var-requires\nconst uiSchema = addLocValues(require(\"./appSettingsForm.ui.json\"));\n\nexport interface IAppSettingsFormProps extends React.Props<AppSettingsForm> {\n    appSettings: IAppSettings;\n    onSubmit: (appSettings: IAppSettings) => void;\n    onCancel?: () => void;\n}\n\nexport interface IAppSettingsFormState {\n    classNames: string[];\n    formSchema: any;\n    uiSchema: any;\n    appSettings: IAppSettings;\n}\n\nexport class AppSettingsForm extends React.Component<IAppSettingsFormProps, IAppSettingsFormState> {\n    private fields = {\n        securityToken: CustomField(ProtectedInput, (props) => ({\n            id: props.idSchema.$id,\n            value: props.formData || generateKey(),\n            onChange: props.onChange,\n        })),\n    };\n\n    constructor(props: IAppSettingsFormProps) {\n        super(props);\n\n        this.state = {\n            formSchema: { ...formSchema },\n            uiSchema: { ...uiSchema },\n            appSettings: { ...this.props.appSettings },\n            classNames: [\"needs-validation\"],\n        };\n\n        this.onFormValidate = this.onFormValidate.bind(this);\n        this.onFormCancel = this.onFormCancel.bind(this);\n    }\n\n    public componentDidUpdate(prevProps: IAppSettingsFormProps) {\n        if (prevProps.appSettings !== this.props.appSettings) {\n            this.setState({\n                appSettings: { ...this.props.appSettings },\n            });\n        }\n    }\n\n    public render() {\n        return (\n            <div className=\"app-settings-page-form p-3\">\n                <h3 className=\"mb-3\">\n                    <i className=\"fas fa-cog fa-1x\"></i>\n                    <span className=\"px-2\">{strings.appSettings.title}</span>\n                </h3>\n                <div className=\"m-3\">\n                    <Form\n                        className={this.state.classNames.join(\" \")}\n                        showErrorList={false}\n                        liveValidate={true}\n                        noHtml5Validate={true}\n                        fields={this.fields}\n                        ObjectFieldTemplate={ObjectFieldTemplate}\n                        FieldTemplate={CustomFieldTemplate}\n                        ArrayFieldTemplate={ArrayFieldTemplate}\n                        validate={this.onFormValidate}\n                        schema={this.state.formSchema}\n                        uiSchema={this.state.uiSchema}\n                        formData={this.state.appSettings}\n                        onSubmit={(form) => this.props.onSubmit(form.formData)}>\n                        <div>\n                            <button type=\"submit\" className=\"btn btn-success mr-1\">{strings.appSettings.save}</button>\n                            <button type=\"button\"\n                                className=\"btn btn-secondary btn-cancel\"\n                                onClick={this.onFormCancel}>{strings.common.cancel}</button>\n                        </div>\n                    </Form>\n                </div>\n            </div>\n        );\n    }\n\n    private onFormValidate(appSettings: IAppSettings, errors: FormValidation) {\n        if (this.state.classNames.indexOf(\"was-validated\") === -1) {\n            this.setState({\n                classNames: [...this.state.classNames, \"was-validated\"],\n            });\n        }\n\n        return errors;\n    }\n\n    private onFormCancel() {\n        if (this.props.onCancel) {\n            this.props.onCancel();\n        }\n    }\n}\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { bindActionCreators } from \"redux\";\nimport IApplicationActions, * as applicationActions from \"../../../../redux/actions/applicationActions\";\nimport { IApplicationState, IAppSettings } from \"../../../../models/applicationState\";\nimport \"./appSettingsPage.scss\";\nimport { strings } from \"../../../../common/strings\";\nimport { AppSettingsForm } from \"./appSettingsForm\";\nimport { RouteComponentProps } from \"react-router-dom\";\nimport { toast } from \"react-toastify\";\nimport { appInfo } from \"../../../../common/appInfo\";\nimport { isElectron } from \"../../../../common/hostProcess\";\n\n/**\n * Props for App Settings Page\n * @member appSettings - Current Application settings\n * @member connections - Application connections\n * @member actions - Application actions\n */\nexport interface IAppSettingsProps extends RouteComponentProps, React.Props<AppSettingsPage> {\n    appSettings: IAppSettings;\n    actions: IApplicationActions;\n}\n\n/**\n * State for App Settings Page\n * @member formSchema - JSON Form Schema for page\n * @member uiSchema - JSON Form UI Schema for page\n * @member appSettings - Application settings\n */\nfunction mapStateToProps(state: IApplicationState) {\n    return {\n        appSettings: state.appSettings,\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators(applicationActions, dispatch),\n    };\n}\n\n/**\n * Page for viewing and editing application settings\n */\n@connect(mapStateToProps, mapDispatchToProps)\nexport default class AppSettingsPage extends React.Component<IAppSettingsProps> {\n    constructor(props: IAppSettingsProps) {\n        super(props);\n\n        this.toggleDevTools = this.toggleDevTools.bind(this);\n        this.reloadApp = this.reloadApp.bind(this);\n        this.onFormSubmit = this.onFormSubmit.bind(this);\n        this.onFormCancel = this.onFormCancel.bind(this);\n    }\n\n    public render() {\n        return (\n            <div className=\"app-settings-page\">\n                <AppSettingsForm\n                    appSettings={this.props.appSettings}\n                    onSubmit={this.onFormSubmit}\n                    onCancel={this.onFormCancel} />\n                <div className=\"app-settings-page-sidebar p-3 bg-lighter-1\">\n                    <div className=\"my-3\">\n                        <p>{`${strings.appSettings.version.description} ${appInfo.version}`}</p>\n                    </div>\n                    <div className=\"my-3\">\n                        <p>{`${strings.appSettings.commit}: `} {process.env.REACT_APP_COMMIT_SHA}</p>\n                    </div>\n                    { isElectron() &&\n                    <span>\n                        <div className=\"my-3\">\n                            <p>{strings.appSettings.devTools.description}</p>\n                            <button id=\"toggleDevTools\" className=\"btn btn-primary btn-sm\"\n                                onClick={this.toggleDevTools}>{strings.appSettings.devTools.button}\n                            </button>\n                        </div>\n                        <div className=\"my-3\">\n                            <p>{strings.appSettings.reload.description}</p>\n                            <button id=\"refreshApp\" className=\"btn btn-primary btn-sm\"\n                                onClick={this.reloadApp}>{strings.appSettings.reload.button}\n                            </button>\n                        </div>\n                    </span>\n                    }\n                </div>\n            </div>\n        );\n    }\n\n    private async onFormSubmit(appSettings: IAppSettings) {\n        await this.props.actions.saveAppSettings(appSettings);\n        toast.success(strings.appSettings.messages.saveSuccess);\n        this.props.history.goBack();\n    }\n\n    private onFormCancel() {\n        this.props.history.goBack();\n    }\n\n    private toggleDevTools = async () => {\n        await this.props.actions.toggleDevTools(!this.props.appSettings.devToolsEnabled);\n    }\n\n    private reloadApp = async () => {\n        await this.props.actions.reloadApplication();\n    }\n}\n","import shortid from \"shortid\";\nimport Guard from \"../common/guard\";\nimport { IConnection } from \"../models/applicationState\";\nimport { AssetProviderFactory } from \"../providers/storage/assetProviderFactory\";\n\n/**\n * Functions required for a connection service\n * @member save - Save a connection\n */\nexport interface IConnectionService {\n    save(connection: IConnection): Promise<IConnection>;\n}\n\n/**\n * @name - Connection Service\n * @description - Functions for dealing with project connections\n */\nexport default class ConnectionService implements IConnectionService {\n\n    /**\n     * Save a connection\n     * @param connection - Connection to save\n     */\n    public save(connection: IConnection) {\n        Guard.null(connection);\n\n        return new Promise<IConnection>(async (resolve, reject) => {\n            try {\n                if (!connection.id) {\n                    connection.id = shortid.generate();\n                }\n\n                const assetProvider = AssetProviderFactory.createFromConnection(connection);\n                if (assetProvider.initialize) {\n                    await assetProvider.initialize();\n                }\n\n                resolve(connection);\n            } catch (err) {\n                reject(err);\n            }\n        });\n    }\n}\n","import shortid from \"shortid\";\nimport { IConnection } from \"../../models/applicationState\";\nimport { ActionTypes } from \"./actionTypes\";\nimport { IPayloadAction, createPayloadAction } from \"./actionCreators\";\nimport { Dispatch } from \"redux\";\nimport ConnectionService from \"../../services/connectionService\";\n\n/**\n * Actions to be performed in relation to connections\n */\nexport default interface IConnectionActions {\n    loadConnection(connection: IConnection): Promise<IConnection>;\n    saveConnection(connection: IConnection): Promise<IConnection>;\n    deleteConnection(connection: IConnection): Promise<void>;\n}\n\n/**\n * Dispatches Load Connection action and resolves with IConnection\n * @param connection - Connection to load\n */\nexport function loadConnection(connection: IConnection): (dispatch: Dispatch) => Promise<IConnection> {\n    return (dispatch: Dispatch) => {\n        dispatch(loadConnectionAction(connection));\n        return Promise.resolve(connection);\n    };\n}\n\n/**\n * Dispatches Save Connection action and resolves with IConnection\n * @param connection - Connection to save\n */\nexport function saveConnection(connection: IConnection): (dispatch: Dispatch) => Promise<IConnection> {\n    return async (dispatch: Dispatch) => {\n        const connectionService = new ConnectionService();\n        await connectionService.save(connection);\n        dispatch(saveConnectionAction(connection));\n        return Promise.resolve(connection);\n    };\n}\n\n/**\n * Dispatches Delete Connection action and resolves with IConnection\n * @param connection - Connection to delete\n */\nexport function deleteConnection(connection: IConnection): (dispatch: Dispatch) => Promise<void> {\n    return (dispatch: Dispatch) => {\n        dispatch(deleteConnectionAction(connection));\n        return Promise.resolve();\n    };\n}\n\n/**\n * Load connection action type\n */\nexport interface ILoadConnectionAction extends IPayloadAction<string, IConnection> {\n    type: ActionTypes.LOAD_CONNECTION_SUCCESS;\n}\n\n/**\n * Save connection action type\n */\nexport interface ISaveConnectionAction extends IPayloadAction<string, IConnection> {\n    type: ActionTypes.SAVE_CONNECTION_SUCCESS;\n}\n\n/**\n * Delete connection action type\n */\nexport interface IDeleteConnectionAction extends IPayloadAction<string, IConnection> {\n    type: ActionTypes.DELETE_CONNECTION_SUCCESS;\n}\n\n/**\n * Instance of load connection action\n */\nexport const loadConnectionAction = createPayloadAction<ILoadConnectionAction>(ActionTypes.LOAD_CONNECTION_SUCCESS);\n/**\n * Instance of save connection action\n */\nexport const saveConnectionAction = createPayloadAction<ISaveConnectionAction>(ActionTypes.SAVE_CONNECTION_SUCCESS);\n/**\n * Instance of delete connection action\n */\nexport const deleteConnectionAction =\n    createPayloadAction<IDeleteConnectionAction>(ActionTypes.DELETE_CONNECTION_SUCCESS);\n","import React from \"react\";\nimport _ from \"lodash\";\nimport { StorageProviderFactory } from \"../../../../providers/storage/storageProviderFactory\";\nimport { AssetProviderFactory } from \"../../../../providers/storage/assetProviderFactory\";\n\n/**\n * Properties for Connection Provider Picker\n * @member onChange - Function to call on change of selected value\n * @member id - ID of HTML select element\n * @member value - Selected value of picker\n */\nexport interface IConnectionProviderPickerProps {\n    onChange: (value: string) => void;\n    id: string;\n    value: string;\n}\n\n/**\n * Creates HTML select object for selecting an asset or storage provider\n * @param props Properties for picker\n */\nexport default function ConnectionProviderPicker(props: IConnectionProviderPickerProps) {\n    const storageProviders = _.values(StorageProviderFactory.providers);\n    const assetProviders = _.values(AssetProviderFactory.providers);\n\n    const allProviders = _([])\n        .concat(assetProviders)\n        .concat(storageProviders)\n        .uniqBy(\"name\")\n        .orderBy(\"displayName\")\n        .value();\n\n    function onChange(e) {\n        props.onChange(e.target.value);\n    }\n\n    return (\n        <select id={props.id}\n            className=\"form-control\"\n            value={props.value}\n            onChange={onChange}>\n            <option value=\"\">Select Provider</option>\n            {\n                allProviders.map((provider) =>\n                    <option key={provider.name} value={provider.name}>\n                        {provider.displayName}\n                    </option>)\n            }\n        </select>\n    );\n}\n","import React from \"react\";\nimport Form, { Widget, IChangeEvent, FormValidation } from \"react-jsonschema-form\";\nimport { IConnection } from \"../../../../models/applicationState\";\nimport LocalFolderPicker from \"../../common/localFolderPicker/localFolderPicker\";\nimport { strings, addLocValues } from \"../../../../common/strings\";\nimport CustomFieldTemplate from \"../../common/customField/customFieldTemplate\";\nimport ConnectionProviderPicker from \"../../common/connectionProviderPicker/connectionProviderPicker\";\nimport { ProtectedInput } from \"../../common/protectedInput/protectedInput\";\nimport Checkbox from \"rc-checkbox\";\nimport \"rc-checkbox/assets/index.css\";\nimport { CustomWidget } from \"../../common/customField/customField\";\nimport { isBrowser } from \"../../../../common/hostProcess\";\n// tslint:disable-next-line:no-var-requires\nconst formSchema = addLocValues(require(\"./connectionForm.json\"));\n// tslint:disable-next-line:no-var-requires\nconst uiSchema = addLocValues(require(\"./connectionForm.ui.json\"));\n\n/**\n * Properties for Connection form\n * @member connection - Form being viewed/edited\n * @member onSubmit - Function called upon form submission\n * @member onCancel - Function called upon cancellation of form\n */\nexport interface IConnectionFormProps extends React.Props<ConnectionForm> {\n    connection: IConnection;\n    onSubmit: (connection: IConnection) => void;\n    onCancel?: () => void;\n}\n\n/**\n * State for Connection Form\n * @member providerName - Name of connection provider\n * @member formSchema - JSON Form Schema\n * @member uiSchema - JSON Form UI Schema\n * @member formData - Current state of form data as a Connection\n * @member classNames - HTML Class names for form element\n */\nexport interface IConnectionFormState {\n    providerName: string;\n    formSchema: any;\n    uiSchema: any;\n    formData: IConnection;\n    classNames: string[];\n}\n\n/**\n * Form for viewing, creating and editing connections\n */\nexport default class ConnectionForm extends React.Component<IConnectionFormProps, IConnectionFormState> {\n    private widgets = {\n        localFolderPicker: (LocalFolderPicker as any) as Widget,\n        connectionProviderPicker: (ConnectionProviderPicker as any) as Widget,\n        protectedInput: (ProtectedInput as any) as Widget,\n        checkbox: CustomWidget(Checkbox, (props) => ({\n            checked: props.value,\n            onChange: (value) => props.onChange(value.target.checked),\n            disabled: props.disabled,\n        })),\n    };\n\n    constructor(props, context) {\n        super(props, context);\n\n        this.state = {\n            classNames: [\"needs-validation\"],\n            formSchema: { ...formSchema },\n            uiSchema: { ...uiSchema },\n            providerName: this.props.connection ? this.props.connection.providerType : null,\n            formData: this.props.connection,\n        };\n\n        if (this.props.connection) {\n            this.bindForm(this.props.connection);\n        }\n\n        this.onFormCancel = this.onFormCancel.bind(this);\n        this.onFormValidate = this.onFormValidate.bind(this);\n        this.onFormChange = this.onFormChange.bind(this);\n    }\n\n    public componentDidUpdate(prevProps: IConnectionFormProps) {\n        if (prevProps.connection !== this.props.connection) {\n            this.bindForm(this.props.connection);\n        }\n    }\n\n    public render() {\n        return (\n            <div className=\"app-connections-page-detail m-3\">\n                <h3>\n                    <i className=\"fas fa-plug fa-1x\"></i>\n                    <span className=\"px-2\">\n                        {strings.connections.settings}\n                    </span>\n                </h3>\n                <div className=\"m-3\">\n                    { isBrowser() && this.state.providerName === \"bingImageSearch\" &&\n                    <div className=\"alert alert-warning\" role=\"alert\">\n                        <i className=\"fas fa-exclamation-circle mr-1\" aria-hidden=\"true\"></i>\n                        { strings.connections.imageCorsWarning }\n                    </div>\n                    }\n                    { isBrowser() && this.state.providerName === \"azureBlobStorage\" &&\n                    <div className=\"alert alert-warning\" role=\"alert\">\n                        <i className=\"fas fa-exclamation-circle mr-1\" aria-hidden=\"true\"></i>\n                        { strings.formatString(\n                            strings.connections.blobCorsWarning,\n                            <a href=\"https://aka.ms/blob-cors\" target=\"_blank\">{strings.connections.azDocLinkText}</a>)\n                        }\n                    </div>\n                    }\n                    <Form\n                        className={this.state.classNames.join(\" \")}\n                        showErrorList={false}\n                        liveValidate={true}\n                        noHtml5Validate={true}\n                        FieldTemplate={CustomFieldTemplate}\n                        validate={this.onFormValidate}\n                        widgets={this.widgets}\n                        schema={this.state.formSchema}\n                        uiSchema={this.state.uiSchema}\n                        formData={this.state.formData}\n                        onChange={this.onFormChange}\n                        onSubmit={(form) => this.props.onSubmit(form.formData)}>\n                        <div>\n                            <button className=\"btn btn-success mr-1\" type=\"submit\">{strings.connections.save}</button>\n                            <button className=\"btn btn-secondary btn-cancel\"\n                                type=\"button\"\n                                onClick={this.onFormCancel}>{strings.common.cancel}</button>\n                        </div>\n                    </Form>\n                </div>\n            </div>\n        );\n    }\n\n    private onFormValidate(connection: IConnection, errors: FormValidation) {\n        if (connection.providerType === \"\") {\n            errors.providerType.addError(\"is a required property\");\n        }\n\n        if (this.state.classNames.indexOf(\"was-validated\") === -1) {\n            this.setState({\n                classNames: [...this.state.classNames, \"was-validated\"],\n            });\n        }\n\n        return errors;\n    }\n\n    private onFormChange = (args: IChangeEvent<IConnection>) => {\n        const providerType = args.formData.providerType;\n\n        if (providerType !== this.state.providerName) {\n            this.bindForm(args.formData, true);\n        } else {\n            this.setState({\n                formData: args.formData,\n            });\n        }\n    }\n\n    private onFormCancel() {\n        if (this.props.onCancel) {\n            this.props.onCancel();\n        }\n    }\n\n    private bindForm(connection: IConnection, resetProviderOptions: boolean = false) {\n        const providerType = connection ? connection.providerType : null;\n        let newFormSchema: any = this.state.formSchema;\n        let newUiSchema: any = this.state.uiSchema;\n\n        if (providerType) {\n            const providerSchema = addLocValues(require(`../../../../providers/storage/${providerType}.json`));\n            const providerUiSchema = addLocValues(require(`../../../../providers/storage/${providerType}.ui.json`));\n\n            newFormSchema = { ...formSchema };\n            newFormSchema.properties[\"providerOptions\"] = providerSchema;\n\n            newUiSchema = { ...uiSchema };\n            newUiSchema[\"providerOptions\"] = providerUiSchema;\n        } else {\n            newFormSchema = { ...formSchema };\n            delete newFormSchema.properties[\"providerOptions\"];\n\n            newUiSchema = { ...uiSchema };\n            delete newUiSchema[\"providerOptions\"];\n\n            resetProviderOptions = true;\n        }\n\n        const formData = { ...connection };\n        if (resetProviderOptions) {\n            formData.providerOptions = {};\n        }\n\n        this.setState({\n            providerName: providerType,\n            formSchema: newFormSchema,\n            uiSchema: newUiSchema,\n            formData,\n        });\n    }\n}\n","import React from \"react\";\nimport { NavLink } from \"react-router-dom\";\n\nexport default function ConnectionItem({ item, onClick, onDelete }) {\n    return (\n        <li onClick={onClick}>\n            <NavLink to={`/connections/${item.id}`}>\n                <i className=\"fas fa-edit\"></i>\n                <span className=\"px-2\">{item.name}</span>\n                <div className=\"float-right delete-btn\" onClick={onDelete}><i className=\"fas fa-trash\"></i></div>\n            </NavLink>\n        </li>\n    );\n}\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Route, RouteComponentProps } from \"react-router-dom\";\nimport { bindActionCreators } from \"redux\";\nimport { strings, interpolate } from \"../../../../common/strings\";\nimport { IApplicationState, IConnection } from \"../../../../models/applicationState\";\nimport IConnectionActions, * as connectionActions from \"../../../../redux/actions/connectionActions\";\nimport CondensedList from \"../../common/condensedList/condensedList\";\nimport Confirm from \"../../common/confirm/confirm\";\nimport ConnectionForm from \"./connectionForm\";\nimport ConnectionItem from \"./connectionItem\";\nimport \"./connectionsPage.scss\";\nimport { toast } from \"react-toastify\";\n\n/**\n * Properties for Connection Page\n * @member connections - Array of Connections\n * @member actions - Actions to perform\n */\nexport interface IConnectionPageProps extends RouteComponentProps, React.Props<ConnectionPage> {\n    connections: IConnection[];\n    actions: IConnectionActions;\n}\n\n/**\n * State of Connection Page\n * @member connection - Connection currently being viewed/edited\n */\nexport interface IConnectionPageState {\n    connection: IConnection;\n}\n\nfunction mapStateToProps(state: IApplicationState) {\n    return {\n        connections: state.connections,\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators(connectionActions, dispatch),\n    };\n}\n\n/**\n * Page for viewing/editing connections\n */\n@connect(mapStateToProps, mapDispatchToProps)\nexport default class ConnectionPage extends React.Component<IConnectionPageProps, IConnectionPageState> {\n    private confirmDelete: React.RefObject<Confirm>;\n\n    constructor(props, context) {\n        super(props, context);\n\n        this.state = {\n            connection: null,\n        };\n\n        this.confirmDelete = React.createRef<Confirm>();\n        this.onFormSubmit = this.onFormSubmit.bind(this);\n        this.onFormCancel = this.onFormCancel.bind(this);\n        this.onConnectionDelete = this.onConnectionDelete.bind(this);\n    }\n\n    public async componentDidMount() {\n        const connectionId = this.props.match.params[\"connectionId\"];\n        if (connectionId) {\n            this.loadConnection(connectionId);\n        }\n    }\n\n    public componentDidUpdate = (prevProps) => {\n        const prevConnectionId = prevProps.match.params[\"connectionId\"];\n        const newConnectionId = this.props.match.params[\"connectionId\"];\n\n        if (prevConnectionId !== newConnectionId) {\n            this.loadConnection(newConnectionId);\n        }\n    }\n\n    public render() {\n        return (\n            <div className=\"app-connections-page\">\n                <div className=\"app-connections-page-list bg-lighter-1\">\n                    <CondensedList\n                        title={strings.connections.title}\n                        newLinkTo={\"/connections/create\"}\n                        onDelete={(connection) => this.confirmDelete.current.open(connection)}\n                        Component={ConnectionItem}\n                        items={this.props.connections} />\n                </div>\n\n                <Confirm ref={this.confirmDelete}\n                    title=\"Delete Connection\"\n                    // tslint:disable-next-line:max-line-length\n                    message={(connection: IConnection) => `Are you sure you want to delete the connection '${connection.name}'?`}\n                    confirmButtonColor=\"danger\"\n                    onConfirm={(connection) => this.onConnectionDelete(connection)} />\n\n                <Route exact path=\"/connections\" render={(props) =>\n                    <div className=\"app-connections-page-detail m-3\">\n                        <h6>{strings.connections.instructions}</h6>\n                    </div>\n                } />\n\n                <Route exact path=\"/connections/:connectionId\" render={(props) =>\n                    <ConnectionForm\n                        connection={this.state.connection}\n                        onSubmit={this.onFormSubmit}\n                        onCancel={this.onFormCancel} />\n                } />\n            </div>\n        );\n    }\n\n    private async loadConnection(connectionId: string) {\n        const connection = this.props.connections.find((connection) => connection.id === connectionId);\n        if (connection) {\n            this.setState({ connection });\n        } else {\n            this.setState({ connection: null });\n        }\n    }\n\n    private onConnectionDelete = async (connection: IConnection) => {\n        await this.props.actions.deleteConnection(connection);\n\n        toast.info(interpolate(strings.connections.messages.deleteSuccess, { connection }));\n\n        if (this.state.connection === connection) {\n            this.props.history.push(\"/connections\");\n            this.setState({ connection: null });\n        }\n    }\n\n    private onFormSubmit = async (connection: IConnection) => {\n        await this.props.actions.saveConnection(connection);\n        toast.success(interpolate(strings.connections.messages.saveSuccess, { connection }));\n\n        this.props.history.goBack();\n    }\n\n    private onFormCancel() {\n        this.props.history.goBack();\n    }\n}\n","import React from \"react\";\nimport { IAssetProps } from \"./assetPreview\";\n\n/**\n * ImageAsset component used to render all image assets\n */\nexport class ImageAsset extends React.Component<IAssetProps> {\n    private image: React.RefObject<HTMLImageElement> = React.createRef();\n\n    public render() {\n        return (\n            <img ref={this.image}\n                src={this.props.asset.path}\n                onLoad={this.onLoad}\n                onError={this.props.onError}\n                crossOrigin=\"anonymous\" />);\n    }\n\n    private onLoad = () => {\n        if (this.props.onLoaded) {\n            this.props.onLoaded(this.image.current);\n        }\n        if (this.props.onActivated) {\n            this.props.onActivated(this.image.current);\n        }\n        if (this.props.onDeactivated) {\n            this.props.onDeactivated(this.image.current);\n        }\n    }\n}\n","import React, { Fragment } from \"react\";\nimport { Player } from \"video-react\";\nimport { KeyboardBinding } from \"../keyboardBinding/keyboardBinding\";\nimport { KeyEventType } from \"../keyboardManager/keyboardManager\";\n\nexport interface ICustomVideoPlayerButtonProps {\n    order: number;\n    onClick: () => void;\n    icon?: string;\n    accelerators?: string[];\n    tooltip?: string;\n    player?: Player;\n}\n\nexport class CustomVideoPlayerButton extends React.Component<ICustomVideoPlayerButtonProps> {\n    public render() {\n        return (\n            <Fragment>\n                {this.props.accelerators &&\n                    <KeyboardBinding keyEventType={KeyEventType.KeyDown}\n                        displayName={this.props.tooltip}\n                        accelerators={this.props.accelerators}\n                        handler={this.props.onClick}\n                        icon={this.props.icon}/>\n                }\n                <button\n                    type=\"button\"\n                    title={this.props.tooltip}\n                    className=\"video-react-control video-react-button\"\n                    onClick={this.props.onClick}>\n                    {this.props.children}\n                </button>\n            </Fragment>\n        );\n    }\n}\n","import React, { SyntheticEvent, Fragment } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport _ from \"lodash\";\nimport {\n    Player, BigPlayButton, ControlBar, CurrentTimeDisplay,\n    TimeDivider, PlaybackRateMenuButton, VolumeMenuButton,\n} from \"video-react\";\nimport { IAssetProps } from \"./assetPreview\";\nimport { IAsset, AssetType, AssetState } from \"../../../../models/applicationState\";\nimport { AssetService } from \"../../../../services/assetService\";\nimport { CustomVideoPlayerButton } from \"../../common/videoPlayer/customVideoPlayerButton\";\nimport { strings } from \"../../../../common/strings\";\n\n/**\n * VideoAsset component properties\n */\nexport interface IVideoAssetProps extends IAssetProps, React.Props<VideoAsset> {\n    /** Whether or not the video asset should start playing automatically */\n    autoPlay?: boolean;\n    /** The timestamp that the video should seek to upon loading */\n    timestamp?: number;\n    /** The event handler that is fired when a child video frame is selected (ex. paused, seeked) */\n    onChildAssetSelected?: (asset: IAsset) => void;\n}\n\n/** VideoAsset internal component state */\nexport interface IVideoAssetState {\n    loaded: boolean;\n}\n\n/**\n * VideoPlayer internal video state\n */\nexport interface IVideoPlayerState {\n    readyState: number;\n    paused: boolean;\n    seeking: boolean;\n    currentTime: number;\n    duration: number;\n}\n\n/**\n * VideoAsset component used to display video based assets\n */\nexport class VideoAsset extends React.Component<IVideoAssetProps> {\n    /** Default properties for the VideoAsset if not defined */\n    public static defaultProps: IVideoAssetProps = {\n        autoPlay: true,\n        controlsEnabled: true,\n        timestamp: null,\n        asset: null,\n        childAssets: [],\n    };\n\n    public state: IVideoAssetState = {\n        loaded: false,\n    };\n\n    private videoPlayer: React.RefObject<Player> = React.createRef<Player>();\n    private timelineElement: Element = null;\n\n    public render() {\n        const { autoPlay, asset } = this.props;\n        let videoPath = asset.path;\n        if (!autoPlay) {\n            videoPath = `${asset.path}#t=5.0`;\n        }\n\n        return (\n            <Player ref={this.videoPlayer}\n                fluid={false}\n                width=\"100%\"\n                height=\"100%\"\n                autoPlay={autoPlay}\n                src={videoPath}\n                onError={this.props.onError}\n                crossOrigin=\"anonymous\">\n                <BigPlayButton position=\"center\" />\n                {autoPlay &&\n                    <ControlBar autoHide={false}>\n                        {!this.props.controlsEnabled &&\n                            <Fragment>\n                                <div className=\"video-react-control-bar-disabled\"></div>\n                            </Fragment>\n                        }\n                        <CustomVideoPlayerButton order={1.1}\n                            accelerators={[\"ArrowLeft\", \"A\", \"a\"]}\n                            tooltip={strings.editorPage.videoPlayer.previousExpectedFrame.tooltip}\n                            onClick={this.movePreviousExpectedFrame}\n                            icon={\"fa-caret-left fa-lg\"}\n                        >\n                            <i className=\"fas fa-caret-left fa-lg\" />\n                        </CustomVideoPlayerButton>\n                        <CustomVideoPlayerButton order={1.2}\n                            accelerators={[\"ArrowRight\", \"D\", \"d\"]}\n                            tooltip={strings.editorPage.videoPlayer.nextExpectedFrame.tooltip}\n                            onClick={this.moveNextExpectedFrame}\n                            icon={\"fa-caret-right fa-lg\"}\n                        >\n                            <i className=\"fas fa-caret-right fa-lg\" />\n                        </CustomVideoPlayerButton>\n                        <CurrentTimeDisplay order={1.3} />\n                        <TimeDivider order={1.4} />\n                        <PlaybackRateMenuButton rates={[5, 2, 1, 0.5, 0.25]} order={7.1} />\n                        <VolumeMenuButton enabled order={7.2} />\n                        <CustomVideoPlayerButton order={8.1}\n                            accelerators={[\"Q\", \"q\"]}\n                            tooltip={strings.editorPage.videoPlayer.previousTaggedFrame.tooltip}\n                            onClick={this.movePreviousTaggedFrame}\n                            icon={\"fas fa-step-backward\"}\n                        >\n                            <i className=\"fas fa-step-backward\"></i>\n                        </CustomVideoPlayerButton>\n                        <CustomVideoPlayerButton order={8.2}\n                            accelerators={[\"E\", \"e\"]}\n                            tooltip={strings.editorPage.videoPlayer.nextTaggedFrame.tooltip}\n                            onClick={this.moveNextTaggedFrame}\n                            icon={\"fa-step-forward\"}\n                        >\n                            <i className=\"fas fa-step-forward\"></i>\n                        </CustomVideoPlayerButton>\n                    </ControlBar>\n                }\n            </Player >\n        );\n    }\n\n    public componentDidMount() {\n        if (this.props.autoPlay) {\n            // We only need to subscribe to state change notificeations if autoPlay\n            // is true, otherwise the video is simply a preview on the side bar that\n            // doesn't change\n            this.videoPlayer.current.subscribeToStateChange(this.onVideoStateChange);\n        }\n    }\n\n    public componentDidUpdate(prevProps: Readonly<IVideoAssetProps>) {\n        if (this.props.asset.id !== prevProps.asset.id) {\n            this.setState({ loaded: false });\n        }\n\n        if (this.props.childAssets !== prevProps.childAssets) {\n            this.addAssetTimelineTags(this.props.childAssets, this.getVideoPlayerState().duration);\n        }\n\n        if (this.props.timestamp !== prevProps.timestamp) {\n            this.seekToTime(this.props.timestamp);\n        }\n    }\n\n    /**\n     * Bound to the \"Previous Tagged Frame\" button\n     * Seeks the user to the previous tagged video frame\n     */\n    private movePreviousTaggedFrame = () => {\n        const currentTime = this.getVideoPlayerState().currentTime;\n        const previousFrame = _\n            .reverse(this.props.childAssets)\n            .find((asset) => asset.state === AssetState.Tagged && asset.timestamp < currentTime);\n\n        if (previousFrame) {\n            this.seekToTime(previousFrame.timestamp);\n        }\n    }\n\n    /**\n     * Bound to the \"Next Tagged Frame\" button\n     * Seeks the user to the next tagged video frame\n     */\n    private moveNextTaggedFrame = () => {\n        const currentTime = this.getVideoPlayerState().currentTime;\n        const nextFrame = this.props.childAssets\n            .find((asset) => asset.state === AssetState.Tagged && asset.timestamp > currentTime);\n\n        if (nextFrame) {\n            this.seekToTime(nextFrame.timestamp);\n        }\n    }\n\n    /**\n     * Moves the videos current position forward one frame based on the current\n     * project settings for frame rate extraction\n     */\n    private moveNextExpectedFrame = () => {\n        const currentTime = this.getVideoPlayerState().currentTime;\n        // Seek forward from the current time to the next logical frame based on project settings\n        const frameSkipTime: number = (1 / this.props.additionalSettings.videoSettings.frameExtractionRate);\n        const seekTime: number = (currentTime + frameSkipTime);\n        this.seekToTime(seekTime);\n    }\n\n    /**\n     * Moves the videos current position backward one frame based on the current\n     * project settings for frame rate extraction\n     */\n    private movePreviousExpectedFrame = () => {\n        const currentTime = this.getVideoPlayerState().currentTime;\n        // Seek backwards from the current time to the next logical frame based on project settings\n        const frameSkipTime: number = (1 / this.props.additionalSettings.videoSettings.frameExtractionRate);\n        const seekTime: number = (currentTime - frameSkipTime);\n        this.seekToTime(seekTime);\n    }\n\n    /**\n     * Seeks the current video to the passed in time stamp, pausing the video before hand\n     * @param seekTime - Time (in seconds) in the video to seek to\n     */\n    private seekToTime = (seekTime: number) => {\n        const playerState = this.getVideoPlayerState();\n\n        if (seekTime >= 0 && playerState.currentTime !== seekTime) {\n            // Verifies if the seek operation should continue\n            if (this.props.onBeforeAssetChanged) {\n                if (!this.props.onBeforeAssetChanged()) {\n                    return;\n                }\n            }\n\n            // Before seeking, pause the video\n            if (!playerState.paused) {\n                this.videoPlayer.current.pause();\n            }\n            this.videoPlayer.current.seek(seekTime);\n        }\n    }\n\n    private onVideoStateChange = (state: Readonly<IVideoPlayerState>, prev: Readonly<IVideoPlayerState>) => {\n        if (!this.state.loaded && state.readyState === 4 && state.readyState !== prev.readyState) {\n            // Video initial load complete\n            this.raiseLoaded();\n            this.raiseActivated();\n\n            if (this.props.autoPlay) {\n                this.videoPlayer.current.play();\n            }\n        } else if (state.paused && (state.currentTime !== prev.currentTime || state.seeking !== prev.seeking)) {\n            // Video is paused, make sure we are on a key frame, and if we are not, seek to that\n            // before raising the child selected event\n            if (this.isValidKeyFrame()) {\n                this.raiseChildAssetSelected(state);\n                this.raiseDeactivated();\n            }\n        } else if (!state.paused && state.paused !== prev.paused) {\n            // Video has resumed playing\n            this.raiseActivated();\n        }\n    }\n\n    /**\n     * Raises the \"loaded\" event if available\n     */\n    private raiseLoaded = () => {\n        this.setState({\n            loaded: true,\n        }, () => {\n            if (this.props.onLoaded) {\n                this.props.onLoaded(this.videoPlayer.current.video.video);\n            }\n\n            // Once the video is loaded, add any asset timeline tags\n            this.addAssetTimelineTags(this.props.childAssets, this.getVideoPlayerState().duration);\n        });\n    }\n\n    /**\n     * Raises the \"childAssetSelected\" event if available\n     */\n    private raiseChildAssetSelected = (state: Readonly<IVideoPlayerState>) => {\n        if (this.props.onChildAssetSelected) {\n            const rootAsset = this.props.asset.parent || this.props.asset;\n            const childPath = `${rootAsset.path}#t=${state.currentTime}`;\n            const childAsset = AssetService.createAssetFromFilePath(childPath);\n            childAsset.state = AssetState.NotVisited;\n            childAsset.type = AssetType.VideoFrame;\n            childAsset.parent = rootAsset;\n            childAsset.timestamp = state.currentTime;\n            childAsset.size = { ...this.props.asset.size };\n\n            this.props.onChildAssetSelected(childAsset);\n        }\n    }\n\n    /**\n     * Raises the \"activated\" event if available\n     */\n    private raiseActivated = () => {\n        if (this.props.onActivated) {\n            this.props.onActivated(this.videoPlayer.current.video.video);\n        }\n    }\n\n    /**\n     * Raises the \"deactivated event if available\"\n     */\n    private raiseDeactivated = () => {\n        if (this.props.onDeactivated) {\n            this.props.onDeactivated(this.videoPlayer.current.video.video);\n        }\n    }\n\n    /**\n     * Move to the nearest key frame from where the video's current\n     * position is\n     * @returns true if moved to a new position; false otherwise\n     */\n    private isValidKeyFrame = (): boolean => {\n        if (!this.props.additionalSettings) {\n            return false;\n        }\n\n        const keyFrameTime = (1 / this.props.additionalSettings.videoSettings.frameExtractionRate);\n        const timestamp = this.getVideoPlayerState().currentTime;\n\n        // Calculate the nearest key frame\n        const numberKeyFrames = Math.round(timestamp / keyFrameTime);\n        const seekTime = +(numberKeyFrames * keyFrameTime).toFixed(6);\n\n        if (seekTime !== timestamp) {\n            this.seekToTime(seekTime);\n        }\n\n        return seekTime === timestamp;\n    }\n\n    /**\n     * Draws small lines to show where visited and tagged frames are on\n     * the video line\n     * @param childAssets - Array of child assets in the video\n     * @param videoDuration - Length (in seconds) of the video\n     */\n    private addAssetTimelineTags = (childAssets: any[], videoDuration: number) => {\n        if (!this.props.autoPlay) {\n            return;\n        }\n\n        const assetTimelineTagLines = this.renderTimeline(childAssets, videoDuration);\n        const timelineSelector = \".editor-page-content-main-body .video-react-progress-control .video-timeline-root\";\n        this.timelineElement = document.querySelector(timelineSelector);\n\n        if (!this.timelineElement) {\n            const progressControlSelector = \".editor-page-content-main-body .video-react-progress-control\";\n            const progressHolderElement = document.querySelector(progressControlSelector);\n\n            // If we found an element to hold the tags, add them to it\n            if (progressHolderElement) {\n                this.timelineElement = document.createElement(\"div\");\n                this.timelineElement.className = \"video-timeline-root\";\n                progressHolderElement.appendChild(this.timelineElement);\n            }\n        }\n\n        if (this.timelineElement) {\n            // Render the child asset elements to the dom\n            ReactDOM.render(assetTimelineTagLines, this.timelineElement);\n        }\n    }\n\n    /**\n     * Renders the timeline markers for the specified child assets\n     * @param childAssets - Array of child assets in the video\n     * @param videoDuration - Length (in seconds) of the video\n     */\n    private renderTimeline = (childAssets: IAsset[], videoDuration: number) => {\n        return (\n            <div className={\"video-timeline-container\"}>\n                {childAssets.map((childAsset) => this.renderChildAssetMarker(childAsset, videoDuration))}\n            </div>\n        );\n    }\n\n    /**\n     * Renders a timeline marker for the specified child asset\n     * @param childAsset The child asset to render\n     * @param videoDuration The total video duration\n     */\n    private renderChildAssetMarker = (childAsset: IAsset, videoDuration: number) => {\n        const className = childAsset.state === AssetState.Tagged ? \"video-timeline-tagged\" : \"video-timeline-visited\";\n        const childPosition: number = (childAsset.timestamp / videoDuration);\n        const style = { left: `${childPosition * 100}%` };\n\n        return (\n            <div key={childAsset.timestamp}\n                onClick={() => this.seekToTime(childAsset.timestamp)}\n                className={className}\n                style={style} />\n        );\n    }\n\n    /**\n     * Gets the current video player state\n     */\n    private getVideoPlayerState = (): Readonly<IVideoPlayerState> => {\n        return this.videoPlayer.current.getState().player;\n    }\n}\n","import React, { SyntheticEvent } from \"react\";\nimport { IAsset, AssetType, IProjectVideoSettings } from \"../../../../models/applicationState\";\nimport { strings } from \"../../../../common/strings\";\nimport { ImageAsset } from \"./imageAsset\";\nimport { VideoAsset } from \"./videoAsset\";\nimport { TFRecordAsset } from \"./tfrecordAsset\";\n\nexport interface IGenericContentSource {\n    width: number;\n    height: number;\n    offsetWidth: number;\n    offsetHeight: number;\n    offsetTop: number;\n    offsetLeft: number;\n}\nexport type ContentSource = HTMLImageElement | HTMLVideoElement | IGenericContentSource;\n\n/**\n * AssetPreview component properties\n */\nexport interface IAssetProps {\n    /** The Asset to preview */\n    asset: IAsset;\n    /** The child assets (ex. video frames) of the parent asset */\n    childAssets?: IAsset[];\n    /** Additional settings for this asset */\n    additionalSettings?: IAssetPreviewSettings;\n    /** Specifies whether the asset controls are enabled */\n    controlsEnabled?: boolean;\n    /** Event handler that fires when the asset has been loaded */\n    onLoaded?: (ContentSource: ContentSource) => void;\n    /** Event handler that fires when the asset has been activated (ex. Video resumes playing) */\n    onActivated?: (contentSource: ContentSource) => void;\n    /** Event handler that fires when the asset has been deactivated (ex. Canvas tools takes over) */\n    onDeactivated?: (contentSource: ContentSource) => void;\n    /** Event handler that fires when a child asset is selected (ex. Paused on a video frame) */\n    onChildAssetSelected?: (asset: IAsset) => void;\n    /** Event handler that fires when an error occurred loading an asset */\n    onError?: (event: React.SyntheticEvent) => void;\n    /** Event handler that fires when the loaded asset has changed */\n    onAssetChanged?: (asset: IAsset) => void;\n    /** Event handler that fires right before an asset has changed */\n    onBeforeAssetChanged?: () => boolean;\n}\n\n/**\n * Properties for Asset Preview\n * @member asset - Asset for preview\n */\nexport interface IAssetPreviewProps extends IAssetProps, React.Props<AssetPreview> {\n    autoPlay?: boolean;\n}\n\n/**\n * State for Asset Preview\n * @member loaded - Asset is loaded\n */\nexport interface IAssetPreviewState {\n    loaded: boolean;\n    hasError: boolean;\n}\n\n/**\n * Settings used by the various asset previews\n * @member videoSettings - Video settings for this asset\n */\nexport interface IAssetPreviewSettings {\n    videoSettings: IProjectVideoSettings;\n}\n\n/**\n * @name - Asset Preview\n * @description - Small preview of assets for selection in editor page\n */\nexport class AssetPreview extends React.Component<IAssetPreviewProps, IAssetPreviewState> {\n    /** Default properties for component if not defined */\n    public static defaultProps: IAssetPreviewProps = {\n        asset: null,\n        childAssets: [],\n        autoPlay: false,\n        controlsEnabled: true,\n    };\n\n    /** The internal state for the component */\n    public state: IAssetPreviewState = {\n        loaded: false,\n        hasError: false,\n    };\n\n    public componentDidUpdate(prevProps: Readonly<IAssetPreviewProps>) {\n        if (this.props.asset.id !== prevProps.asset.id) {\n            this.setState({\n                loaded: false,\n                hasError: false,\n            });\n\n            if (this.props.onAssetChanged) {\n                this.props.onAssetChanged(this.props.asset);\n            }\n        }\n    }\n\n    public render() {\n        const { loaded, hasError } = this.state;\n        const size = this.props.asset.size;\n        const classNames = [\"asset-preview\"];\n        if (size) {\n            if (size.width > size.height) {\n                classNames.push(\"landscape\");\n            } else {\n                classNames.push(\"portrait\");\n            }\n        }\n\n        return (\n            <div className={classNames.join(\" \")}>\n                <div className=\"asset-preview-container\">\n                    {!loaded &&\n                        <div className=\"asset-loading\">\n                            <div className=\"asset-loading-spinner\">\n                                <i className=\"fas fa-circle-notch fa-spin\" />\n                            </div>\n                        </div>\n                    }\n                    {hasError &&\n                        <div className=\"asset-error text-danger\">\n                            <i className=\"fas fa-2x fa-exclamation-circle\" />\n                            <p className=\"m-2\">{strings.editorPage.assetError}</p>\n                        </div>\n                    }\n                    {!hasError &&\n                        this.renderAsset()\n                    }\n                </div>\n            </div>\n        );\n    }\n\n    private renderAsset = () => {\n        const { asset, childAssets, autoPlay } = this.props;\n        const rootAsset = asset.parent || asset;\n\n        switch (asset.type) {\n            case AssetType.Image:\n                return <ImageAsset asset={rootAsset}\n                    additionalSettings={this.props.additionalSettings}\n                    onLoaded={this.onAssetLoad}\n                    onError={this.onError}\n                    onActivated={this.props.onActivated}\n                    onDeactivated={this.props.onDeactivated} />;\n            case AssetType.Video:\n            case AssetType.VideoFrame:\n                return <VideoAsset asset={rootAsset}\n                    controlsEnabled={this.props.controlsEnabled}\n                    additionalSettings={this.props.additionalSettings}\n                    childAssets={childAssets}\n                    timestamp={asset.timestamp}\n                    autoPlay={autoPlay}\n                    onLoaded={this.onAssetLoad}\n                    onError={this.onError}\n                    onBeforeAssetChanged={this.props.onBeforeAssetChanged}\n                    onChildAssetSelected={this.onChildAssetSelected}\n                    onActivated={this.props.onActivated}\n                    onDeactivated={this.props.onDeactivated} />;\n            case AssetType.TFRecord:\n                return <TFRecordAsset asset={asset}\n                    onLoaded={this.onAssetLoad}\n                    onError={this.onError}\n                    onActivated={this.props.onActivated}\n                    onDeactivated={this.props.onDeactivated} />;\n            default:\n                return <div className=\"asset-error\">{strings.editorPage.assetError}</div>;\n        }\n    }\n\n    /**\n     * Internal event handler for when the referenced asset has been loaded\n     * @param contentSource The visual HTML element of the asset (img/video tag)\n     */\n    private onAssetLoad = (contentSource: ContentSource) => {\n        this.setState({\n            loaded: true,\n        }, () => {\n            if (this.props.onLoaded) {\n                this.props.onLoaded(contentSource);\n            }\n        });\n    }\n\n    private onError = (e: SyntheticEvent) => {\n        this.setState({\n            hasError: true,\n            loaded: true,\n        }, () => {\n            if (this.props.onError) {\n                this.props.onError(e);\n            }\n        });\n    }\n\n    private onChildAssetSelected = (asset: IAsset) => {\n        if (this.props.onBeforeAssetChanged) {\n            if (!this.props.onBeforeAssetChanged()) {\n                return;\n            }\n        }\n\n        if (this.props.onChildAssetSelected) {\n            this.props.onChildAssetSelected(asset);\n        }\n\n        if (this.props.onAssetChanged) {\n            this.props.onAssetChanged(asset);\n        }\n    }\n}\n","import React, { MouseEvent } from \"react\";\nimport { ITag } from \"../../../../models/applicationState\";\n\nexport enum TagEditMode {\n    Color = \"color\",\n    Name = \"name\",\n}\n\nexport interface ITagClickProps {\n    ctrlKey?: boolean;\n    altKey?: boolean;\n    clickedColor?: boolean;\n}\n\n/**\n * Properties for tag input item\n */\nexport interface ITagInputItemProps {\n    /** Tag represented by item */\n    tag: ITag;\n    /** Index of tag within tags array */\n    index: number;\n    /** Tag is currently being edited */\n    isBeingEdited: boolean;\n    /** Tag is currently locked for application */\n    isLocked: boolean;\n    /** Tag is currently selected */\n    isSelected: boolean;\n    /** Tag is currently applied to one of the selected regions */\n    appliedToSelectedRegions: boolean;\n    /** Function to call upon clicking item */\n    onClick: (tag: ITag, props: ITagClickProps) => void;\n    /** Apply updates to tag */\n    onChange: (oldTag: ITag, newTag: ITag) => void;\n}\n\nexport interface ITagInputItemState {\n    /** Tag is currently being edited */\n    isBeingEdited: boolean;\n    /** Tag is currently locked for application */\n    isLocked: boolean;\n    /** Mode of tag editing (text or color) */\n    tagEditMode: TagEditMode;\n}\n\nexport default class TagInputItem extends React.Component<ITagInputItemProps, ITagInputItemState> {\n    public state: ITagInputItemState = {\n        isBeingEdited: false,\n        isLocked: false,\n        tagEditMode: null,\n    };\n\n    public render() {\n        const style: any = {\n            background: this.props.tag.color,\n        };\n        return (\n            <div className={\"tag-item-block\"}>\n                {\n                    this.props.tag &&\n                    <li className={this.getItemClassName()} style={style}>\n                        <div\n                            className={`tag-color`}\n                            onClick={this.onColorClick}>\n                        </div>\n                        <div\n                            className={\"tag-content\"}\n                            onClick={this.onNameClick}>\n                            {this.getTagContent()}\n                        </div>\n                        {\n                            this.state.isLocked &&\n                            <div></div>\n                        }\n                    </li>\n                }\n            </div>\n        );\n    }\n\n    public componentDidUpdate(prevProps: ITagInputItemProps) {\n        if (prevProps.isBeingEdited !== this.props.isBeingEdited) {\n            this.setState({\n                isBeingEdited: this.props.isBeingEdited,\n            });\n        }\n\n        if (prevProps.isLocked !== this.props.isLocked) {\n            this.setState({\n                isLocked: this.props.isLocked,\n            });\n        }\n    }\n\n    private onColorClick = (e: MouseEvent) => {\n        e.stopPropagation();\n\n        const ctrlKey = e.ctrlKey || e.metaKey;\n        const altKey = e.altKey;\n        this.setState({\n            tagEditMode: TagEditMode.Color,\n        }, () => this.props.onClick(this.props.tag, { ctrlKey, altKey, clickedColor: true }));\n    }\n\n    private onNameClick = (e: MouseEvent) => {\n        e.stopPropagation();\n\n        const ctrlKey = e.ctrlKey || e.metaKey;\n        const altKey = e.altKey;\n        this.setState({\n            tagEditMode: TagEditMode.Name,\n        }, () => this.props.onClick(this.props.tag, { ctrlKey, altKey }));\n    }\n\n    private getItemClassName = () => {\n        const classNames = [\"tag-item\"];\n        if (this.props.isSelected) {\n            classNames.push(\"tag-item-selected\");\n        }\n        if (this.props.appliedToSelectedRegions) {\n            classNames.push(\"tag-item-applied\");\n        }\n        return classNames.join(\" \");\n    }\n\n    private getTagContent = () => {\n        const displayIndex = this.getDisplayIndex();\n        return (\n            <div className={\"tag-name-container\"}>\n                <div className=\"tag-name-body\">\n                    {\n                        (this.state.isBeingEdited && this.state.tagEditMode === TagEditMode.Name)\n                            ?\n                            <input\n                                className={`tag-name-editor ${this.getContentClassName()}`}\n                                type=\"text\"\n                                defaultValue={this.props.tag.name}\n                                onKeyDown={(e) => this.handleNameEdit(e)}\n                                autoFocus={true}\n                            />\n                            :\n                            <span title={this.props.tag.name} className={this.getContentClassName()}>\n                                {this.props.tag.name}\n                            </span>\n                    }\n                </div>\n                <div className=\"tag-lock-icon\">\n                    {this.props.isLocked &&\n                        <i className=\"fas fa-lock\" />\n                    }\n                </div>\n                <div className={\"tag-index\"}>\n                    {(displayIndex !== null) && <span>[{displayIndex}]</span>}\n                </div>\n            </div>\n        );\n    }\n\n    private handleNameEdit = (e) => {\n        if (e.key === \"Enter\") {\n            const newTagName = e.target.value;\n            this.props.onChange(this.props.tag, {\n                ...this.props.tag,\n                name: newTagName,\n            });\n        } else if (e.key === \"Escape\") {\n            this.setState({\n                isBeingEdited: false,\n            });\n        }\n    }\n\n    private getContentClassName = () => {\n        const classNames = [\"tag-name-text px-2\"];\n        if (this.state.isBeingEdited && this.state.tagEditMode === TagEditMode.Color) {\n            classNames.push(\" tag-color-edit\");\n        }\n        return classNames.join(\" \");\n    }\n\n    private getDisplayIndex = () => {\n        const index = this.props.index;\n        const displayIndex = (index === 9) ? 0 : index + 1;\n        return (displayIndex < 10) ? displayIndex : null;\n    }\n}\n","import React from \"react\";\nimport { GithubPicker, CirclePicker } from \"react-color\";\n\nexport interface IColorPickerProps {\n    show: boolean;\n    color: string;\n    colors: string[];\n    onEditColor: (color: string) => void;\n}\n\nexport class ColorPicker extends React.Component<IColorPickerProps> {\n\n    private pickerBackground = \"#252526\";\n\n    public render() {\n        return (\n            this.props.show &&\n            this.GithubPicker()\n        );\n    }\n\n    private onChange = (color) => {\n        this.props.onEditColor(color.hex);\n    }\n\n    private GithubPicker = () => {\n        return (\n            <div className=\"color-picker\">\n                <GithubPicker\n                    color={{hex: this.props.color}}\n                    onChangeComplete={this.onChange}\n                    colors={this.props.colors}\n                    width={160}\n                    styles={{\n                        default: {\n                            card: {\n                                background: this.pickerBackground,\n                            },\n                        },\n                    }}\n                    triangle={\"hide\"}\n                />\n            </div>\n        );\n    }\n\n    private CirclePicker = () => {\n        return (\n            <div className=\"circle-picker-container\">\n                <CirclePicker\n                    width={200}\n                    onChange={this.onChange}\n                    colors={this.props.colors}\n                    hex={this.props.color}\n                    circleSize={25}\n                />\n            </div>\n\n        );\n    }\n}\n","import React, { SyntheticEvent } from \"react\";\nimport { strings } from \"../../../../common/strings\";\nimport { ITag } from \"../../../../models/applicationState\";\nimport \"./tagInput.scss\";\n\n/** Properties for tag input toolbar */\nexport interface ITagInputToolbarProps {\n    /** Currently selected tag */\n    selectedTag: ITag;\n    /** Function to call when add tags button is clicked */\n    onAddTags: () => void;\n    /** Function to call when search tags button is clicked */\n    onSearchTags: () => void;\n    /** Function to call when lock tags button is clicked */\n    onLockTag: (tag: ITag) => void;\n    /** Function to call when edit tag button is clicked */\n    onEditTag: (tag: ITag) => void;\n    /** Function to call when delete button is clicked */\n    onDelete: (tag: ITag) => void;\n    /** Function to call when one of the re-order buttons is clicked */\n    onReorder: (tag: ITag, displacement: number) => void;\n}\n\ninterface ITagInputToolbarItemProps {\n    displayName: string;\n    className: string;\n    icon: string;\n    handler: () => void;\n    accelerators?: string[];\n}\n\nexport default class TagInputToolbar extends React.Component<ITagInputToolbarProps> {\n    public render() {\n        return (\n            <div className=\"tag-input-toolbar\">\n                {\n                    this.getToolbarItems().map((itemConfig) =>\n                        <div key={itemConfig.displayName} className={`tag-input-toolbar-item ${itemConfig.className}`}\n                            onClick={(e) => this.onToolbarItemClick(e, itemConfig)}>\n                            <i className={`tag-input-toolbar-icon fas ${itemConfig.icon}`} />\n                        </div>,\n                    )\n                }\n            </div>\n        );\n    }\n\n    private onToolbarItemClick = (e: SyntheticEvent, itemConfig: ITagInputToolbarItemProps): void => {\n        e.stopPropagation();\n        itemConfig.handler();\n    }\n\n    private getToolbarItems = (): ITagInputToolbarItemProps[] => {\n        return [\n            {\n                displayName: strings.tags.toolbar.add,\n                className: \"plus\",\n                icon: \"fa-plus-circle\",\n                handler: this.handleAdd,\n            },\n            {\n                displayName: strings.tags.toolbar.search,\n                className: \"search\",\n                icon: \"fa-search\",\n                handler: this.handleSearch,\n            },\n            {\n                displayName: strings.tags.toolbar.lock,\n                className: \"lock\",\n                icon: \"fa-lock\",\n                handler: this.handleLock,\n            },\n            {\n                displayName: strings.tags.toolbar.edit,\n                className: \"edit\",\n                icon: \"fa-edit\",\n                handler: this.handleEdit,\n            },\n            {\n                displayName: strings.tags.toolbar.moveUp,\n                className: \"up\",\n                icon: \"fa-arrow-circle-up\",\n                handler: this.handleArrowUp,\n            },\n            {\n                displayName: strings.tags.toolbar.moveDown,\n                className: \"down\",\n                icon: \"fa-arrow-circle-down\",\n                handler: this.handleArrowDown,\n            },\n            {\n                displayName: strings.tags.toolbar.delete,\n                className: \"delete\",\n                icon: \"fa-trash\",\n                handler: this.handleDelete,\n            },\n        ];\n    }\n\n    private handleAdd = () => {\n        this.props.onAddTags();\n    }\n\n    private handleSearch = () => {\n        this.props.onSearchTags();\n    }\n\n    private handleLock = () => {\n        this.props.onLockTag(this.props.selectedTag);\n    }\n\n    private handleEdit = () => {\n        this.props.onEditTag(this.props.selectedTag);\n    }\n\n    private handleArrowUp = () => {\n        this.props.onReorder(this.props.selectedTag, -1);\n    }\n\n    private handleArrowDown = () => {\n        this.props.onReorder(this.props.selectedTag, 1);\n    }\n\n    private handleDelete = () => {\n        this.props.onDelete(this.props.selectedTag);\n    }\n}\n","import React, { KeyboardEvent, RefObject } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport Align from \"rc-align\";\nimport { randomIntInRange } from \"../../../../common/utils\";\nimport { IRegion, ITag } from \"../../../../models/applicationState\";\nimport { ColorPicker } from \"../colorPicker\";\nimport \"./tagInput.scss\";\nimport \"../condensedList/condensedList.scss\";\nimport TagInputItem, { ITagInputItemProps, ITagClickProps } from \"./tagInputItem\";\nimport TagInputToolbar from \"./tagInputToolbar\";\nimport { toast } from \"react-toastify\";\nimport { strings } from \"../../../../common/strings\";\n// tslint:disable-next-line:no-var-requires\nconst tagColors = require(\"../../common/tagColors.json\");\n\nexport interface ITagInputProps {\n    /** Current list of tags */\n    tags: ITag[];\n    /** Function called on tags change */\n    onChange: (tags: ITag[]) => void;\n    /** Currently selected regions in canvas */\n    selectedRegions?: IRegion[];\n    /** Tags that are currently locked for editing experience */\n    lockedTags?: string[];\n    /** Updates to locked tags */\n    onLockedTagsChange?: (locked: string[]) => void;\n    /** Place holder for input text box */\n    placeHolder?: string;\n    /** Function to call on clicking individual tag */\n    onTagClick?: (tag: ITag) => void;\n    /** Function to call on clicking individual tag while holding CTRL key */\n    onCtrlTagClick?: (tag: ITag) => void;\n    /** Function to call when tag is renamed */\n    onTagRenamed?: (tagName: string, newTagName: string) => void;\n    /** Function to call when tag is deleted */\n    onTagDeleted?: (tagName: string) => void;\n    /** Always show tag input box */\n    showTagInputBox?: boolean;\n    /** Always show tag search box */\n    showSearchBox?: boolean;\n}\n\nexport interface ITagInputState {\n    tags: ITag[];\n    clickedColor: boolean;\n    showColorPicker: boolean;\n    addTags: boolean;\n    searchTags: boolean;\n    searchQuery: string;\n    selectedTag: ITag;\n    editingTag: ITag;\n    portalElement: Element;\n    editingTagNode: Element;\n}\n\nfunction defaultDOMNode(): Element {\n    return document.createElement(\"div\");\n}\n\nexport class TagInput extends React.Component<ITagInputProps, ITagInputState> {\n\n    public state: ITagInputState = {\n        tags: this.props.tags || [],\n        clickedColor: false,\n        showColorPicker: false,\n        addTags: this.props.showTagInputBox,\n        searchTags: this.props.showSearchBox,\n        searchQuery: \"\",\n        selectedTag: null,\n        editingTag: null,\n        editingTagNode: null,\n        portalElement: defaultDOMNode(),\n    };\n\n    private tagItemRefs: Map<string, TagInputItem> = new Map<string, TagInputItem>();\n    private portalDiv = document.createElement(\"div\");\n\n    public render() {\n        return (\n            <div className=\"tag-input condensed-list\">\n                <h6 className=\"condensed-list-header tag-input-header bg-darker-2 p-2\">\n                    <span className=\"condensed-list-title tag-input-title\">Tags</span>\n                    <TagInputToolbar\n                        selectedTag={this.state.selectedTag}\n                        onAddTags={() => this.setState({ addTags: !this.state.addTags })}\n                        onSearchTags={() => this.setState({\n                            searchTags: !this.state.searchTags,\n                            searchQuery: \"\",\n                        })}\n                        onEditTag={this.onEditTag}\n                        onLockTag={this.onLockTag}\n                        onDelete={this.deleteTag}\n                        onReorder={this.onReOrder}\n                    />\n                </h6>\n                <div className=\"condensed-list-body\">\n                    {\n                        this.state.searchTags &&\n                        <div className=\"tag-input-text-input-row search-input\">\n                            <input\n                                className=\"tag-search-box\"\n                                type=\"text\"\n                                onKeyDown={this.onSearchKeyDown}\n                                onChange={(e) => this.setState({ searchQuery: e.target.value })}\n                                placeholder=\"Search tags\"\n                                autoFocus={true}\n                            />\n                            <i className=\"tag-row-icon fas fa-search\" />\n                        </div>\n                    }\n                    {this.getColorPickerPortal()}\n                    <div className=\"tag-input-items\">\n                        {this.renderTagItems()}\n                    </div>\n                    {\n                        this.state.addTags &&\n                        <div className=\"tag-input-text-input-row new-tag-input\">\n                            <input\n                                className=\"tag-input-box\"\n                                type=\"text\"\n                                onKeyDown={this.onAddTagKeyDown}\n                                placeholder=\"Add new tag\"\n                                autoFocus={true}\n                            />\n                            <i className=\"tag-input-row-icon fas fa-tag\" />\n                        </div>\n                    }\n                </div>\n            </div>\n        );\n    }\n\n    public componentDidMount() {\n        document.body.appendChild(this.portalDiv);\n        this.setState({\n            portalElement: ReactDOM.findDOMNode(this.portalDiv) as Element,\n        });\n    }\n\n    public componentWillUnmount() {\n        document.body.removeChild(this.portalDiv);\n    }\n\n    public componentDidUpdate(prevProps: ITagInputProps) {\n        if (prevProps.tags !== this.props.tags) {\n            this.setState({\n                tags: this.props.tags,\n            });\n        }\n\n        if (prevProps.selectedRegions !== this.props.selectedRegions && this.props.selectedRegions.length > 0) {\n            this.setState({\n                selectedTag: null,\n            });\n        }\n    }\n\n    private getTagNode = (tag: ITag): Element => {\n        const itemRef = tag ? this.tagItemRefs.get(tag.name) : null;\n        return (itemRef ? ReactDOM.findDOMNode(itemRef) : defaultDOMNode()) as Element;\n    }\n\n    private onEditTag = (tag: ITag) => {\n        const { editingTag } = this.state;\n        const newEditingTag = (editingTag && editingTag.name === tag.name) ? null : tag;\n        this.setState({\n            editingTag: newEditingTag,\n            editingTagNode: this.getTagNode(newEditingTag),\n        });\n        if (this.state.clickedColor) {\n            this.setState({\n                showColorPicker: !this.state.showColorPicker,\n            });\n        }\n    }\n\n    private onLockTag = (tag: ITag) => {\n        if (!tag) {\n            return;\n        }\n        let lockedTags = [...this.props.lockedTags];\n        if (lockedTags.find((t) => t === tag.name)) {\n            lockedTags = lockedTags.filter((t) => t !== tag.name);\n        } else {\n            lockedTags.push(tag.name);\n        }\n        this.props.onLockedTagsChange(lockedTags);\n    }\n\n    private onReOrder = (tag: ITag, displacement: number) => {\n        if (!tag) {\n            return;\n        }\n        const tags = [...this.state.tags];\n        const currentIndex = tags.indexOf(tag);\n        const newIndex = currentIndex + displacement;\n        if (newIndex < 0 || newIndex >= tags.length) {\n            return;\n        }\n        tags.splice(currentIndex, 1);\n        tags.splice(newIndex, 0, tag);\n        this.setState({\n            tags,\n        }, () => this.props.onChange(tags));\n    }\n\n    private handleColorChange = (color: string) => {\n        const tag = this.state.editingTag;\n        const tags = this.state.tags.map((t) => {\n            return (t.name === tag.name) ? { name: t.name, color } : t;\n        });\n        this.setState({\n            tags,\n            editingTag: null,\n            showColorPicker: false,\n        }, () => this.props.onChange(tags));\n    }\n\n    private updateTag = (tag: ITag, newTag: ITag) => {\n        if (tag.name === newTag.name && tag.color === newTag.color) {\n            return;\n        }\n        if (!newTag.name.length) {\n            toast.warn(strings.tags.warnings.emptyName);\n            return;\n        }\n        const nameChange = tag.name !== newTag.name;\n        if (nameChange && this.state.tags.some((t) => t.name === newTag.name)) {\n            toast.warn(strings.tags.warnings.existingName);\n            return;\n        }\n        if (nameChange && this.props.onTagRenamed) {\n            this.props.onTagRenamed(tag.name, newTag.name);\n            return;\n        }\n        const tags = this.state.tags.map((t) => {\n            return (t.name === tag.name) ? newTag : t;\n        });\n        this.setState({\n            tags,\n            editingTag: null,\n            selectedTag: newTag,\n        }, () => {\n            this.props.onChange(tags);\n        });\n    }\n\n    private getColorPickerPortal = () => {\n        return (\n            <div>\n                {\n                    ReactDOM.createPortal(\n                        <Align align={this.getAlignConfig()} target={this.getTarget}>\n                            <div className=\"tag-input-color-picker\">\n                                {\n                                    this.state.showColorPicker &&\n                                    <ColorPicker\n                                        color={this.state.editingTag && this.state.editingTag.color}\n                                        colors={tagColors}\n                                        onEditColor={this.handleColorChange}\n                                        show={this.state.showColorPicker}\n                                    />\n                                }\n                            </div>\n                        </Align>\n                        , this.state.portalElement)\n                }\n            </div>\n        );\n    }\n\n    private getAlignConfig = () => {\n        const coords = this.getEditingTagCoords();\n        const isNearBottom = coords && coords.top > (window.innerHeight / 2);\n        const alignCorner = isNearBottom ? \"b\" : \"t\";\n        const verticalOffset = isNearBottom ? 6 : -6;\n        return {\n            // Align top right of source node (color picker) with top left of target node (tag row)\n            points: [`${alignCorner}r`, `${alignCorner}l`],\n            // Offset source node by 10px in x and 20px in y\n            offset: [0, verticalOffset],\n            // Offset targetNode by 30% of target node width in x and 40% of target node height\n            // targetOffset: [\"30%\", \"40%\"],\n            // Auto adjust position when source node is overflowed\n            // overflow: {adjustX: true, adjustY: true}\n        };\n    }\n\n    private getEditingTagCoords = () => {\n        const node = this.state.editingTagNode;\n        return (node) ? node.getBoundingClientRect() : null;\n    }\n\n    private getTarget = () => {\n        return this.state.editingTagNode || document;\n    }\n\n    private renderTagItems = () => {\n        let props = this.createTagItemProps();\n        const query = this.state.searchQuery;\n        this.tagItemRefs.clear();\n\n        if (query.length) {\n            props = props.filter((prop) => prop.tag.name.toLowerCase().includes(query.toLowerCase()));\n        }\n\n        return props.map((prop) =>\n            <TagInputItem\n                key={prop.tag.name}\n                ref={(item) => this.setTagItemRef(item, prop.tag)}\n                {...prop}\n            />);\n    }\n\n    private setTagItemRef = (item: TagInputItem, tag: ITag) => {\n        this.tagItemRefs.set(tag.name, item);\n        return item;\n    }\n\n    private createTagItemProps = (): ITagInputItemProps[] => {\n        const tags = this.state.tags;\n        const selectedRegionTagSet = this.getSelectedRegionTagSet();\n\n        return tags.map((tag) => (\n            {\n                tag,\n                index: tags.findIndex((t) => t.name === tag.name),\n                isLocked: this.props.lockedTags && this.props.lockedTags.findIndex((t) => t === tag.name) > -1,\n                isBeingEdited: this.state.editingTag && this.state.editingTag.name === tag.name,\n                isSelected: this.state.selectedTag && this.state.selectedTag.name === tag.name,\n                appliedToSelectedRegions: selectedRegionTagSet.has(tag.name),\n                onClick: this.handleClick,\n                onChange: this.updateTag,\n            } as ITagInputItemProps\n        ));\n    }\n\n    private getSelectedRegionTagSet = (): Set<string> => {\n        const result = new Set<string>();\n        if (this.props.selectedRegions) {\n            for (const region of this.props.selectedRegions) {\n                for (const tag of region.tags) {\n                    result.add(tag);\n                }\n            }\n        }\n        return result;\n    }\n\n    private onAltClick = (tag: ITag, clickedColor: boolean) => {\n        const { editingTag } = this.state;\n        const newEditingTag = editingTag && editingTag.name === tag.name ? null : tag;\n\n        this.setState({\n            editingTag: newEditingTag,\n            editingTagNode: this.getTagNode(newEditingTag),\n            clickedColor,\n            showColorPicker: !this.state.showColorPicker && clickedColor,\n        });\n    }\n\n    private handleClick = (tag: ITag, props: ITagClickProps) => {\n        // Lock tags\n        if (props.ctrlKey && this.props.onCtrlTagClick) {\n            this.props.onCtrlTagClick(tag);\n            this.setState({ clickedColor: props.clickedColor });\n        } else if (props.altKey) { // Edit tag\n            this.onAltClick(tag, props.clickedColor);\n        } else { // Select tag\n            const { editingTag, selectedTag } = this.state;\n            const inEditMode = editingTag && tag.name === editingTag.name;\n            const alreadySelected = selectedTag && selectedTag.name === tag.name;\n            const newEditingTag = inEditMode ? null : editingTag;\n\n            this.setState({\n                editingTag: newEditingTag,\n                editingTagNode: this.getTagNode(newEditingTag),\n                selectedTag: (alreadySelected && !inEditMode) ? null : tag,\n                clickedColor: props.clickedColor,\n                showColorPicker: false,\n            });\n\n            // Only fire click event if a region is selected\n            if (this.props.selectedRegions &&\n                this.props.selectedRegions.length > 0 &&\n                this.props.onTagClick &&\n                !inEditMode) {\n                this.props.onTagClick(tag);\n            }\n        }\n    }\n\n    private deleteTag = (tag: ITag) => {\n        if (!tag) {\n            return;\n        }\n        if (this.props.onTagDeleted) {\n            this.props.onTagDeleted(tag.name);\n            return;\n        }\n\n        const index = this.state.tags.indexOf(tag);\n        const tags = this.state.tags.filter((t) => t.name !== tag.name);\n\n        this.setState({\n            tags,\n            selectedTag: this.getNewSelectedTag(tags, index),\n        }, () => this.props.onChange(tags));\n\n        if (this.props.lockedTags.find((l) => l === tag.name)) {\n            this.props.onLockedTagsChange(\n                this.props.lockedTags.filter((lockedTag) => lockedTag !== tag.name),\n            );\n        }\n    }\n\n    private getNewSelectedTag = (tags: ITag[], previouIndex: number): ITag => {\n        return (tags.length) ? tags[Math.min(tags.length - 1, previouIndex)] : null;\n    }\n\n    private onSearchKeyDown = (event: KeyboardEvent): void => {\n        if (event.key === \"Escape\") {\n            this.setState({\n                searchTags: false,\n            });\n        }\n    }\n\n    private onAddTagKeyDown = (event) => {\n        if (event.key === \"Enter\") {\n            // validate and add\n            const newTag: ITag = {\n                name: event.target.value,\n                color: this.getNextColor(),\n            };\n            if (newTag.name.length && !this.state.tags.find((t) => t.name === newTag.name)) {\n                this.addTag(newTag);\n                event.target.value = \"\";\n            } else if (!newTag.name.length) {\n                toast.warn(strings.tags.warnings.emptyName);\n            } else {\n                toast.warn(strings.tags.warnings.existingName);\n            }\n        }\n        if (event.key === \"Escape\") {\n            this.setState({\n                addTags: false,\n            });\n        }\n    }\n\n    private getNextColor = () => {\n        const tags = this.state.tags;\n        if (tags.length > 0) {\n            const lastColor = tags[tags.length - 1].color;\n            const lastIndex = tagColors.findIndex((color) => color === lastColor);\n            let newIndex;\n            if (lastIndex > -1) {\n                newIndex = (lastIndex + 1) % tagColors.length;\n            } else {\n                newIndex = randomIntInRange(0, tagColors.length - 1);\n            }\n            return tagColors[newIndex];\n        } else {\n            return tagColors[0];\n        }\n    }\n\n    private addTag = (tag: ITag) => {\n        if (!this.state.tags.find((t) => t.name === tag.name)) {\n            const tags = [...this.state.tags, tag];\n            this.setState({\n                tags,\n            }, () => this.props.onChange(tags));\n        }\n    }\n}\n","import shortid from \"shortid\";\nimport { Point2D } from \"vott-ct/lib/js/CanvasTools/Core/Point2D\";\nimport { RegionData, RegionDataType } from \"vott-ct/lib/js/CanvasTools/Core/RegionData\";\nimport { Tag } from \"vott-ct/lib/js/CanvasTools/Core/Tag\";\nimport { TagsDescriptor } from \"vott-ct/lib/js/CanvasTools/Core/TagsDescriptor\";\nimport Guard from \"../../../../common/guard\";\nimport { IBoundingBox, IRegion, ITag, RegionType,\n    IPoint, AppError, ErrorCode } from \"../../../../models/applicationState\";\nimport { strings } from \"../../../../common/strings\";\n\n/**\n * Static functions to assist in operations within Canvas component\n */\nexport default class CanvasHelpers {\n\n    public static pasteMargin = 10;\n\n    /**\n     * Adds tag to array if it does not contain the tag,\n     * removes tag if already contained. Performs operations in place\n     * @param tags Array of tags\n     * @param tag Tag to toggle\n     */\n    public static toggleTag(tags: string[], tag: string): string[] {\n        const tagIndex = tags.findIndex((existingTag) => existingTag === tag);\n        if (tagIndex === -1) {\n            // Tag isn't found within region tags, add it\n            return [...tags, tag];\n        } else {\n            // Tag is within region tags, remove it\n            return tags.filter((t) => t !== tag);\n        }\n    }\n\n    /**\n     * Adds tag to tags if not contained\n     * @param tags Existing tags array\n     * @param tag Tag to be added if missing\n     */\n    public static addIfMissing(tags: string[], tag: string): string[] {\n        if (!tags.find((t) => t === tag)) {\n            return [...tags, tag];\n        }\n        return tags;\n    }\n\n    /**\n     * Adds all target tags if missing from tags\n     * @param tags Existing tags array\n     * @param newTags Tags to be added if not contained\n     */\n    public static addAllIfMissing(tags: string[], newTags: string[]): string[] {\n        let result = [...tags];\n        for (const newTag of newTags) {\n            result = CanvasHelpers.addIfMissing(result, newTag);\n        }\n        return result;\n    }\n\n    /**\n     * Removes tag from tags if contained\n     * @param tags Existing tags array\n     * @param tag Tag to be removed if contained in `tags`\n     */\n    public static removeIfContained(tags: string[], tag: string): string[] {\n        return tags.filter((t) => t !== tag);\n    }\n\n    /**\n     * Updates any IRegion in `regions` that has the same id as IRegion in `updates`\n     * @param regions Original regions\n     * @param updates Regions that are to be updated in `regions`\n     */\n    public static updateRegions(regions: IRegion[], updates: IRegion[]): IRegion[] {\n        if (!regions || !updates || !updates.length) {\n            return regions;\n        }\n        const result: IRegion[] = [];\n        for (const region of regions) {\n            const update = updates.find((r) => r.id === region.id);\n            if (update) {\n                result.push(update);\n            } else {\n                result.push(region);\n            }\n        }\n        return result;\n    }\n\n    /**\n     * Get RegionData (CanvasTools) from IRegion\n     * @param region IRegion from Canvas component\n     */\n    public static getRegionData(region: IRegion): RegionData {\n        return new RegionData(region.boundingBox.left,\n            region.boundingBox.top,\n            region.boundingBox.width,\n            region.boundingBox.height,\n            region.points.map((point) =>\n                new Point2D(point.x, point.y)),\n            this.regionTypeToType(region.type));\n    }\n\n    /**\n     * Converts a canvas tools RegionData to VoTT IRegion\n     * @param regionData The region data to convert\n     * @param regionType The region type\n     */\n    public static fromRegionData(regionData: RegionData, regionType: RegionType): IRegion {\n        Guard.null(regionData);\n\n        return {\n            id: shortid.generate(),\n            type: regionType,\n            boundingBox: {\n                left: regionData.x,\n                top: regionData.y,\n                width: regionData.width,\n                height: regionData.height,\n            },\n            points: regionData.points.map((point) => new Point2D(point.x, point.y)),\n            tags: [],\n        };\n    }\n\n    public static isEmpty(regionData: RegionData): boolean {\n        return regionData.area === 0 && regionData.x === 0 && regionData.y === 0;\n    }\n\n    /**\n     * Create TagsDescriptor (CanvasTools) from IRegion\n     * @param region IRegion from Canvas\n     */\n    public static getTagsDescriptor(projectTags: ITag[], region: IRegion): TagsDescriptor {\n        if (!projectTags || !projectTags.length) {\n            return null;\n        }\n        Guard.null(region);\n\n        const tags = region.tags\n            .map((tagName) => {\n                const projectTag = projectTags.find((projectTag) => projectTag.name === tagName);\n                return projectTag ? new Tag(projectTag.name, projectTag.color) : null;\n            })\n            .filter((tag) => tag !== null);\n\n        return new TagsDescriptor(tags);\n    }\n\n    /**\n     * Gets RegionDataType (CanvasTools) from RegionType\n     */\n    public static regionTypeToType = (regionType: RegionType) => {\n        let type;\n        switch (regionType) {\n            case RegionType.Rectangle:\n                type = RegionDataType.Rect;\n                break;\n            case RegionType.Polygon:\n                type = RegionDataType.Polygon;\n                break;\n            case RegionType.Point:\n                type = RegionDataType.Point;\n                break;\n            case RegionType.Polyline:\n                type = RegionDataType.Polyline;\n                break;\n            default:\n                break;\n        }\n        return type;\n    }\n\n    /**\n     * Duplicates region with a new ID, and moves it to the next available location by intervals\n     * of `CanvasHelpers.pasteMargin`.\n     * @param regions Regions to duplicate\n     * @param others Other regions existing in the asset (used to not put region on top of other region)\n     */\n    public static duplicateRegionsAndMove =\n            (regions: IRegion[], others: IRegion[], width: number, height: number): IRegion[] => {\n        const result: IRegion[] = [];\n        for (const region of regions) {\n            const shiftCoordinates = CanvasHelpers.getShiftCoordinates(region.boundingBox, others, width, height);\n\n            const newRegion: IRegion = {\n                ...region,\n                id: shortid.generate(),\n                boundingBox: CanvasHelpers.shiftBoundingBox(region.boundingBox, shiftCoordinates),\n                points: CanvasHelpers.shiftPoints(region.points, shiftCoordinates),\n            };\n            result.push(newRegion);\n        }\n        return result;\n    }\n\n    public static boundingBoxWithin = (boundingBox: IBoundingBox, width: number, height: number) => {\n        return (\n            (boundingBox.left + boundingBox.width) < width &&\n            (boundingBox.top + boundingBox.height) < height\n        );\n    }\n\n    public static fromBoundingBox = (boundingBox: IBoundingBox): IPoint[] => {\n        return [\n            {\n                x: boundingBox.left,\n                y: boundingBox.top,\n            },\n            {\n                x: boundingBox.left + boundingBox.width,\n                y: boundingBox.top,\n            },\n            {\n                x: boundingBox.left + boundingBox.width,\n                y: boundingBox.top + boundingBox.height,\n            },\n            {\n                x: boundingBox.left,\n                y: boundingBox.top + boundingBox.height,\n            },\n        ];\n    }\n\n    private static shiftBoundingBox = (boundingBox: IBoundingBox, shiftCoordinates: IPoint): IBoundingBox => {\n        return {\n            ...boundingBox,\n            left: boundingBox.left + shiftCoordinates.x,\n            top: boundingBox.top + shiftCoordinates.y,\n        };\n    }\n\n    private static shiftPoints = (points: IPoint[], shiftCoordinates: IPoint) => {\n        return points.map((p) => {\n            return {\n                x: p.x + shiftCoordinates.x,\n                y: p.y + shiftCoordinates.y,\n            };\n        });\n    }\n\n    private static existsRegionAt = (regions: IRegion[], x: number, y: number) => {\n        for (const region of regions) {\n            if (region.boundingBox.left === x && region.boundingBox.top === y) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    private static getShiftCoordinates =\n            (boundingBox: IBoundingBox, otherRegions: IRegion[], width: number, height: number): IPoint => {\n        let x = boundingBox.left;\n        let y = boundingBox.top;\n\n        let defaultTargetX = 0;\n        const defaultTargetY = 0;\n\n        if (boundingBox.height > height || boundingBox.width > width) {\n            throw new AppError(ErrorCode.PasteRegionTooBig, strings.errors.pasteRegionTooBigError.message);\n        }\n\n        if (!CanvasHelpers.boundingBoxWithin(boundingBox, width, height)) {\n            x = defaultTargetX;\n            y = defaultTargetY;\n        }\n\n        let foundRegionAtTarget = false;\n\n        while (!foundRegionAtTarget) {\n            if (CanvasHelpers.existsRegionAt(otherRegions, x, y)) {\n                x += CanvasHelpers.pasteMargin;\n                y += CanvasHelpers.pasteMargin;\n                foundRegionAtTarget = false;\n            } else {\n                const result = {\n                    x: x - boundingBox.left,\n                    y: y - boundingBox.top,\n                };\n                const tempBoundingBox = {\n                    ...boundingBox,\n                    left: boundingBox.left + result.x,\n                    top: boundingBox.top + result.y,\n                };\n                if (CanvasHelpers.boundingBoxWithin(tempBoundingBox, width, height)) {\n                    return result;\n                } else {\n                    x = defaultTargetX;\n                    y = defaultTargetY;\n                    if (CanvasHelpers.existsRegionAt(otherRegions, defaultTargetX, defaultTargetY)) {\n                        defaultTargetX += CanvasHelpers.pasteMargin;\n                    }\n                }\n            }\n        }\n    }\n}\n","export default class Clipboard {\n    public static async writeText(text: string): Promise<void> {\n        return (navigator as any).clipboard.writeText(text);\n    }\n\n    public static async writeObject(item: any): Promise<void> {\n        return Clipboard.writeText(JSON.stringify(item));\n    }\n\n    public static async readText(): Promise<string> {\n        return (navigator as any).clipboard.readText();\n    }\n\n    public static async readObject(): Promise<any> {\n        return Clipboard.readText().then((text) => Promise.resolve(JSON.parse(text)));\n    }\n}\n","import { ContentSource } from \"../react/components/common/assetPreview/assetPreview\";\nimport { IBoundingBox, ISize } from \"../models/applicationState\";\nimport Guard from \"./guard\";\n\n/**\n * Gets the current position of the specified content source\n * @param contentSource The HTML element to get position\n */\nexport function createContentBoundingBox(contentSource: ContentSource): IBoundingBox {\n    Guard.null(contentSource);\n\n    let aspectRatio: number = null;\n    if (contentSource instanceof HTMLVideoElement) {\n        aspectRatio = contentSource.videoWidth / contentSource.videoHeight;\n    } else if (contentSource instanceof HTMLImageElement) {\n        aspectRatio = contentSource.naturalWidth / contentSource.naturalHeight;\n    } else {\n        aspectRatio = contentSource.width / contentSource.height;\n    }\n\n    let size: ISize = null;\n\n    // Landscape = aspectRatio > 1\n    // Portrait  = aspectRatio < 1\n    if (aspectRatio >= 1) {\n        size = {\n            width: contentSource.offsetWidth,\n            height: contentSource.offsetWidth / aspectRatio,\n        };\n\n        // Render as landscape except for when the calculated height\n        // would be taller than the available area\n        return size.height > contentSource.offsetHeight\n            ? createPortraitBoundingBox(contentSource, aspectRatio)\n            : createLandscapeBoundingBox(contentSource, aspectRatio);\n    } else {\n        size = {\n            width: contentSource.offsetHeight * aspectRatio,\n            height: contentSource.offsetHeight,\n        };\n\n        // Render as portrait except for when the calculated width\n        // would be wider then the available area\n        return size.width > contentSource.offsetWidth\n            ? createLandscapeBoundingBox(contentSource, aspectRatio)\n            : createPortraitBoundingBox(contentSource, aspectRatio);\n    }\n}\n\n/**\n * Gets a landscape bounding box for the canvas element based on the content source and aspect ratio\n * Disregards generated bars from the browser\n * @param contentSource The HTML content element\n * @param aspectRatio The requested aspect ratio\n */\nexport function createLandscapeBoundingBox(contentSource: ContentSource, aspectRatio: number): IBoundingBox {\n    Guard.null(contentSource);\n\n    const size = {\n        width: contentSource.offsetWidth,\n        height: contentSource.offsetWidth / aspectRatio,\n    };\n\n    return {\n        width: size.width,\n        height: size.height,\n        left: contentSource.offsetLeft,\n        top: contentSource.offsetTop + ((contentSource.offsetHeight - size.height) / 2),\n    };\n}\n\n/**\n * Gets a portrait bounding box for the canvas element based on the content source and aspect ratio\n * Disregards generated bars from the browser\n * @param contentSource The HTML content element\n * @param aspectRatio The requested aspect ratio\n */\nexport function createPortraitBoundingBox(contentSource: ContentSource, aspectRatio: number): IBoundingBox {\n    Guard.null(contentSource);\n\n    const size = {\n        width: contentSource.offsetHeight * aspectRatio,\n        height: contentSource.offsetHeight,\n    };\n\n    return {\n        width: size.width,\n        height: size.height,\n        left: contentSource.offsetLeft + ((contentSource.offsetWidth - size.width) / 2),\n        top: contentSource.offsetTop,\n    };\n}\n","import React, { Fragment, ReactElement } from \"react\";\nimport * as shortid from \"shortid\";\nimport { CanvasTools } from \"vott-ct\";\nimport { RegionData } from \"vott-ct/lib/js/CanvasTools/Core/RegionData\";\nimport {\n    EditorMode, IAssetMetadata,\n    IProject, IRegion, RegionType,\n} from \"../../../../models/applicationState\";\nimport CanvasHelpers from \"./canvasHelpers\";\nimport { AssetPreview, ContentSource } from \"../../common/assetPreview/assetPreview\";\nimport { Editor } from \"vott-ct/lib/js/CanvasTools/CanvasTools.Editor\";\nimport Clipboard from \"../../../../common/clipboard\";\nimport Confirm from \"../../common/confirm/confirm\";\nimport { strings } from \"../../../../common/strings\";\nimport { SelectionMode } from \"vott-ct/lib/js/CanvasTools/Interface/ISelectorSettings\";\nimport { Rect } from \"vott-ct/lib/js/CanvasTools/Core/Rect\";\nimport { createContentBoundingBox } from \"../../../../common/layout\";\n\nexport interface ICanvasProps extends React.Props<Canvas> {\n    selectedAsset: IAssetMetadata;\n    editorMode: EditorMode;\n    selectionMode: SelectionMode;\n    project: IProject;\n    lockedTags: string[];\n    children?: ReactElement<AssetPreview>;\n    onAssetMetadataChanged?: (assetMetadata: IAssetMetadata) => void;\n    onSelectedRegionsChanged?: (regions: IRegion[]) => void;\n    onCanvasRendered?: (canvas: HTMLCanvasElement) => void;\n}\n\nexport interface ICanvasState {\n    currentAsset: IAssetMetadata;\n    contentSource: ContentSource;\n    enabled: boolean;\n}\n\nexport default class Canvas extends React.Component<ICanvasProps, ICanvasState> {\n    public static defaultProps: ICanvasProps = {\n        selectionMode: SelectionMode.NONE,\n        editorMode: EditorMode.Select,\n        selectedAsset: null,\n        project: null,\n        lockedTags: [],\n    };\n\n    public editor: Editor;\n\n    public state: ICanvasState = {\n        currentAsset: this.props.selectedAsset,\n        contentSource: null,\n        enabled: false,\n    };\n\n    private canvasZone: React.RefObject<HTMLDivElement> = React.createRef();\n    private clearConfirm: React.RefObject<Confirm> = React.createRef();\n\n    private template: Rect = new Rect(20, 20);\n\n    public componentDidMount = () => {\n        const sz = document.getElementById(\"editor-zone\") as HTMLDivElement;\n        this.editor = new CanvasTools.Editor(sz);\n        this.editor.autoResize = false;\n        this.editor.onSelectionEnd = this.onSelectionEnd;\n        this.editor.onRegionMoveEnd = this.onRegionMoveEnd;\n        this.editor.onRegionDelete = this.onRegionDelete;\n        this.editor.onRegionSelected = this.onRegionSelected;\n        this.editor.AS.setSelectionMode({ mode: this.props.selectionMode });\n\n        window.addEventListener(\"resize\", this.onWindowResize);\n    }\n\n    public componentWillUnmount() {\n        window.removeEventListener(\"resize\", this.onWindowResize);\n    }\n\n    public componentDidUpdate = async (prevProps: Readonly<ICanvasProps>, prevState: Readonly<ICanvasState>) => {\n        // Handles asset changing\n        if (this.props.selectedAsset !== prevProps.selectedAsset) {\n            this.setState({ currentAsset: this.props.selectedAsset });\n        }\n\n        // Handle selection mode changes\n        if (this.props.selectionMode !== prevProps.selectionMode) {\n            const options = (this.props.selectionMode === SelectionMode.COPYRECT) ? this.template : null;\n            this.editor.AS.setSelectionMode({ mode: this.props.selectionMode, template: options });\n        }\n\n        const assetIdChanged = this.state.currentAsset.asset.id !== prevState.currentAsset.asset.id;\n\n        // When the selected asset has changed but is still the same asset id\n        if (!assetIdChanged && this.state.currentAsset !== prevState.currentAsset) {\n            this.refreshCanvasToolsRegions();\n        }\n\n        // When the project tags change re-apply tags to regions\n        if (this.props.project.tags !== prevProps.project.tags) {\n            this.updateCanvasToolsRegionTags();\n        }\n\n        // Handles when the canvas is enabled & disabled\n        if (prevState.enabled !== this.state.enabled) {\n            // When the canvas is ready to display\n            if (this.state.enabled) {\n                this.refreshCanvasToolsRegions();\n                this.setContentSource(this.state.contentSource);\n                this.editor.AS.setSelectionMode(this.props.selectionMode);\n                this.editor.AS.enable();\n\n                if (this.props.onSelectedRegionsChanged) {\n                    this.props.onSelectedRegionsChanged(this.getSelectedRegions());\n                }\n            } else { // When the canvas has been disabled\n                this.editor.AS.disable();\n                this.clearAllRegions();\n                this.editor.AS.setSelectionMode(SelectionMode.NONE);\n            }\n        }\n    }\n\n    public render = () => {\n        const className = this.state.enabled ? \"canvas-enabled\" : \"canvas-disabled\";\n\n        return (\n            <Fragment>\n                <Confirm title={strings.editorPage.canvas.removeAllRegions.title}\n                    ref={this.clearConfirm as any}\n                    message={strings.editorPage.canvas.removeAllRegions.confirmation}\n                    confirmButtonColor=\"danger\"\n                    onConfirm={this.removeAllRegions}\n                />\n                <div id=\"ct-zone\" ref={this.canvasZone} className={className} onClick={(e) => e.stopPropagation()}>\n                    <div id=\"selection-zone\">\n                        <div id=\"editor-zone\" className=\"full-size\" />\n                    </div>\n                </div>\n                {this.renderChildren()}\n            </Fragment>\n        );\n    }\n\n    /**\n     * Toggles tag on all selected regions\n     * @param selectedTag Tag name\n     */\n    public applyTag = (tag: string) => {\n        const selectedRegions = this.getSelectedRegions();\n        const lockedTags = this.props.lockedTags;\n        const lockedTagsEmpty = !lockedTags || !lockedTags.length;\n        const regionsEmpty = !selectedRegions || !selectedRegions.length;\n        if ((!tag && lockedTagsEmpty) || regionsEmpty) {\n            return;\n        }\n        let transformer: (tags: string[], tag: string) => string[];\n        if (lockedTagsEmpty) {\n            // Tag selected while region(s) selected\n            transformer = CanvasHelpers.toggleTag;\n        } else if (lockedTags.find((t) => t === tag)) {\n            // Tag added to locked tags while region(s) selected\n            transformer = CanvasHelpers.addIfMissing;\n        } else {\n            // Tag removed from locked tags while region(s) selected\n            transformer = CanvasHelpers.removeIfContained;\n        }\n        for (const selectedRegion of selectedRegions) {\n            selectedRegion.tags = transformer(selectedRegion.tags, tag);\n        }\n        this.updateRegions(selectedRegions);\n        if (this.props.onSelectedRegionsChanged) {\n            this.props.onSelectedRegionsChanged(selectedRegions);\n        }\n    }\n\n    public copyRegions = async () => {\n        await Clipboard.writeObject(this.getSelectedRegions());\n    }\n\n    public cutRegions = async () => {\n        const selectedRegions = this.getSelectedRegions();\n        await Clipboard.writeObject(selectedRegions);\n        this.deleteRegions(selectedRegions);\n    }\n\n    public pasteRegions = async () => {\n        const regionsToPaste: IRegion[] = await Clipboard.readObject();\n        const asset = this.state.currentAsset;\n        const duplicates = CanvasHelpers.duplicateRegionsAndMove(\n            regionsToPaste,\n            asset.regions,\n            asset.asset.size.width,\n            asset.asset.size.height,\n        );\n        this.addRegions(duplicates);\n    }\n\n    public confirmRemoveAllRegions = () => {\n        this.clearConfirm.current.open();\n    }\n\n    public getSelectedRegions = (): IRegion[] => {\n        const selectedRegions = this.editor.RM.getSelectedRegionsBounds().map((rb) => rb.id);\n        return this.state.currentAsset.regions.filter((r) => selectedRegions.find((id) => r.id === id));\n    }\n\n    public updateCanvasToolsRegionTags = (): void => {\n        for (const region of this.state.currentAsset.regions) {\n            this.editor.RM.updateTagsById(\n                region.id,\n                CanvasHelpers.getTagsDescriptor(this.props.project.tags, region),\n            );\n        }\n    }\n\n    public forceResize = (): void => {\n        this.onWindowResize();\n    }\n\n    private removeAllRegions = () => {\n        const ids = this.state.currentAsset.regions.map((r) => r.id);\n        for (const id of ids) {\n            this.editor.RM.deleteRegionById(id);\n        }\n        this.deleteRegionsFromAsset(this.state.currentAsset.regions);\n    }\n\n    private addRegions = (regions: IRegion[]) => {\n        this.addRegionsToCanvasTools(regions);\n        this.addRegionsToAsset(regions);\n    }\n\n    private addRegionsToAsset = (regions: IRegion[]) => {\n        this.updateAssetRegions(\n            this.state.currentAsset.regions.concat(regions),\n        );\n    }\n\n    private addRegionsToCanvasTools = (regions: IRegion[]) => {\n        for (const region of regions) {\n            const regionData = CanvasHelpers.getRegionData(region);\n            const scaledRegionData = this.editor.scaleRegionToFrameSize(\n                regionData,\n                this.state.currentAsset.asset.size.width,\n                this.state.currentAsset.asset.size.height);\n            this.editor.RM.addRegion(\n                region.id,\n                scaledRegionData,\n                CanvasHelpers.getTagsDescriptor(this.props.project.tags, region),\n            );\n        }\n    }\n\n    private deleteRegions = (regions: IRegion[]) => {\n        this.deleteRegionsFromCanvasTools(regions);\n        this.deleteRegionsFromAsset(regions);\n    }\n\n    private deleteRegionsFromAsset = (regions: IRegion[]) => {\n        const filteredRegions = this.state.currentAsset.regions.filter((assetRegion) => {\n            return !regions.find((r) => r.id === assetRegion.id);\n        });\n        this.updateAssetRegions(filteredRegions);\n    }\n\n    private deleteRegionsFromCanvasTools = (regions: IRegion[]) => {\n        for (const region of regions) {\n            this.editor.RM.deleteRegionById(region.id);\n        }\n    }\n\n    /**\n     * Method that gets called when a new region is drawn\n     * @param {RegionData} regionData the RegionData of created region\n     * @returns {void}\n     */\n    private onSelectionEnd = (regionData: RegionData) => {\n        if (CanvasHelpers.isEmpty(regionData)) {\n            return;\n        }\n        const id = shortid.generate();\n\n        this.editor.RM.addRegion(id, regionData, null);\n\n        this.template = new Rect(regionData.width, regionData.height);\n\n        // RegionData not serializable so need to extract data\n        const scaledRegionData = this.editor.scaleRegionToSourceSize(\n            regionData,\n            this.state.currentAsset.asset.size.width,\n            this.state.currentAsset.asset.size.height,\n        );\n        const lockedTags = this.props.lockedTags;\n        const newRegion = {\n            id,\n            type: this.editorModeToType(this.props.editorMode),\n            tags: lockedTags || [],\n            boundingBox: {\n                height: scaledRegionData.height,\n                width: scaledRegionData.width,\n                left: scaledRegionData.x,\n                top: scaledRegionData.y,\n            },\n            points: scaledRegionData.points,\n        };\n        if (lockedTags && lockedTags.length) {\n            this.editor.RM.updateTagsById(id, CanvasHelpers.getTagsDescriptor(this.props.project.tags, newRegion));\n        }\n        this.updateAssetRegions([...this.state.currentAsset.regions, newRegion]);\n        if (this.props.onSelectedRegionsChanged) {\n            this.props.onSelectedRegionsChanged([newRegion]);\n        }\n    }\n\n    /**\n     * Update regions within the current asset\n     * @param regions\n     * @param selectedRegions\n     */\n    private updateAssetRegions = (regions: IRegion[]) => {\n        const currentAsset: IAssetMetadata = {\n            ...this.state.currentAsset,\n            regions,\n        };\n        this.setState({\n            currentAsset,\n        }, () => {\n            this.props.onAssetMetadataChanged(currentAsset);\n        });\n    }\n\n    /**\n     * Method called when moving a region already in the editor\n     * @param {string} id the id of the region that was moved\n     * @param {RegionData} regionData the RegionData of moved region\n     * @returns {void}\n     */\n    private onRegionMoveEnd = (id: string, regionData: RegionData) => {\n        const currentRegions = this.state.currentAsset.regions;\n        const movedRegionIndex = currentRegions.findIndex((region) => region.id === id);\n        const movedRegion = currentRegions[movedRegionIndex];\n        const scaledRegionData = this.editor.scaleRegionToSourceSize(\n            regionData,\n            this.state.currentAsset.asset.size.width,\n            this.state.currentAsset.asset.size.height,\n        );\n\n        if (movedRegion) {\n            movedRegion.points = scaledRegionData.points;\n            movedRegion.boundingBox = {\n                height: scaledRegionData.height,\n                width: scaledRegionData.width,\n                left: scaledRegionData.x,\n                top: scaledRegionData.y,\n            };\n        }\n\n        currentRegions[movedRegionIndex] = movedRegion;\n        this.updateAssetRegions(currentRegions);\n    }\n\n    /**\n     * Method called when deleting a region from the editor\n     * @param {string} id the id of the deleted region\n     * @returns {void}\n     */\n    private onRegionDelete = (id: string) => {\n        // Remove from Canvas Tools\n        this.editor.RM.deleteRegionById(id);\n\n        // Remove from project\n        const currentRegions = this.state.currentAsset.regions;\n        const deletedRegionIndex = currentRegions.findIndex((region) => region.id === id);\n        currentRegions.splice(deletedRegionIndex, 1);\n\n        this.updateAssetRegions(currentRegions);\n        if (this.props.onSelectedRegionsChanged) {\n            this.props.onSelectedRegionsChanged([]);\n        }\n    }\n\n    /**\n     * Method called when deleting a region from the editor\n     * @param {string} id the id of the selected region\n     * @param {boolean} multiSelect boolean whether region was selected with multi selection\n     * @returns {void}\n     */\n    private onRegionSelected = (id: string, multiSelect: boolean) => {\n        const selectedRegions = this.getSelectedRegions();\n        if (this.props.onSelectedRegionsChanged) {\n            this.props.onSelectedRegionsChanged(selectedRegions);\n        }\n        // Gets the scaled region data\n        const selectedRegionsData = this.editor.RM.getSelectedRegionsBounds().find((region) => region.id === id);\n\n        if (selectedRegionsData) {\n            this.template = new Rect(selectedRegionsData.width, selectedRegionsData.height);\n        }\n\n        if (this.props.lockedTags && this.props.lockedTags.length) {\n            for (const selectedRegion of selectedRegions) {\n                selectedRegion.tags = CanvasHelpers.addAllIfMissing(selectedRegion.tags, this.props.lockedTags);\n            }\n            this.updateRegions(selectedRegions);\n        }\n    }\n\n    private renderChildren = () => {\n        return React.cloneElement(this.props.children, {\n            onAssetChanged: this.onAssetChanged,\n            onLoaded: this.onAssetLoaded,\n            onError: this.onAssetError,\n            onActivated: this.onAssetActivated,\n            onDeactivated: this.onAssetDeactivated,\n        });\n    }\n\n    /**\n     * Raised when the asset bound to the asset preview has changed\n     */\n    private onAssetChanged = () => {\n        this.setState({ enabled: false });\n    }\n\n    /**\n     * Raised when the underlying asset has completed loading\n     */\n    private onAssetLoaded = (contentSource: ContentSource) => {\n        this.setState({ contentSource });\n        this.positionCanvas(contentSource);\n    }\n\n    private onAssetError = () => {\n        this.setState({\n            enabled: false,\n        });\n    }\n\n    /**\n     * Raised when the asset is taking control over the rendering\n     */\n    private onAssetActivated = () => {\n        this.setState({ enabled: false });\n    }\n\n    /**\n     * Raise when the asset is handing off control of rendering\n     */\n    private onAssetDeactivated = (contentSource: ContentSource) => {\n        this.setState({\n            contentSource,\n            enabled: true,\n        });\n    }\n\n    /**\n     * Set the loaded asset content source into the canvas tools canvas\n     */\n    private setContentSource = async (contentSource: ContentSource) => {\n        try {\n            await this.editor.addContentSource(contentSource as any);\n\n            if (this.props.onCanvasRendered) {\n                const canvas = this.canvasZone.current.querySelector(\"canvas\");\n                this.props.onCanvasRendered(canvas);\n            }\n        } catch (e) {\n            console.warn(e);\n        }\n    }\n\n    /**\n     * Positions the canvas tools drawing surface to be exactly over the asset content\n     */\n    private positionCanvas = (contentSource: ContentSource) => {\n        if (!contentSource) {\n            return;\n        }\n\n        const canvas = this.canvasZone.current;\n        if (canvas) {\n            const boundingBox = createContentBoundingBox(contentSource);\n            canvas.style.top = `${boundingBox.top}px`;\n            canvas.style.left = `${boundingBox.left}px`;\n            canvas.style.width = `${boundingBox.width}px`;\n            canvas.style.height = `${boundingBox.height}px`;\n            this.editor.resize(boundingBox.width, boundingBox.height);\n        }\n    }\n\n    /**\n     * Resizes and re-renders the canvas when the application window size changes\n     */\n    private onWindowResize = async () => {\n        if (!this.state.contentSource) {\n            return;\n        }\n\n        this.positionCanvas(this.state.contentSource);\n    }\n\n    /**\n     * Updates regions in both Canvas Tools and the asset data store\n     * @param updates Regions to be updated\n     * @param updatedSelectedRegions Selected regions with any changes already applied\n     */\n    private updateRegions = (updates: IRegion[]) => {\n        const updatedRegions = CanvasHelpers.updateRegions(this.state.currentAsset.regions, updates);\n        for (const update of updates) {\n            this.editor.RM.updateTagsById(update.id, CanvasHelpers.getTagsDescriptor(this.props.project.tags, update));\n        }\n        this.updateAssetRegions(updatedRegions);\n        this.updateCanvasToolsRegionTags();\n    }\n\n    /**\n     * Updates the background of the canvas and draws the asset's regions\n     */\n    private clearAllRegions = () => {\n        this.editor.RM.deleteAllRegions();\n    }\n\n    private refreshCanvasToolsRegions = () => {\n        this.clearAllRegions();\n\n        if (!this.state.currentAsset.regions || this.state.currentAsset.regions.length === 0) {\n            return;\n        }\n\n        // Add regions to the canvas\n        this.state.currentAsset.regions.forEach((region: IRegion) => {\n            const loadedRegionData = CanvasHelpers.getRegionData(region);\n            this.editor.RM.addRegion(\n                region.id,\n                this.editor.scaleRegionToFrameSize(\n                    loadedRegionData,\n                    this.state.currentAsset.asset.size.width,\n                    this.state.currentAsset.asset.size.height,\n                ),\n                CanvasHelpers.getTagsDescriptor(this.props.project.tags, region));\n        });\n    }\n\n    private editorModeToType = (editorMode: EditorMode) => {\n        let type;\n        switch (editorMode) {\n            case EditorMode.CopyRect:\n            case EditorMode.Rectangle:\n                type = RegionType.Rectangle;\n                break;\n            case EditorMode.Polygon:\n                type = RegionType.Polygon;\n                break;\n            case EditorMode.Point:\n                type = RegionType.Point;\n                break;\n            case EditorMode.Polyline:\n                type = RegionType.Polyline;\n                break;\n            default:\n                break;\n        }\n        return type;\n    }\n}\n","import React from \"react\";\nimport { AutoSizer, List } from \"react-virtualized\";\nimport { IAsset, AssetState, ISize } from \"../../../../models/applicationState\";\nimport { AssetPreview } from \"../../common/assetPreview/assetPreview\";\nimport { strings } from \"../../../../common/strings\";\n\n/**\n * Properties for Editor Side Bar\n * @member assets - Array of assets to be previewed\n * @member onAssetSelected - Function to call when asset from side bar is selected\n * @member selectedAsset - Asset initially selected\n * @member thumbnailSize - The size of the asset thumbnails\n */\nexport interface IEditorSideBarProps {\n    assets: IAsset[];\n    onAssetSelected: (asset: IAsset) => void;\n    onBeforeAssetSelected?: () => boolean;\n    selectedAsset?: IAsset;\n    thumbnailSize?: ISize;\n}\n\n/**\n * State for Editor Side Bar\n * @member selectedAsset - Asset selected from side bar\n */\nexport interface IEditorSideBarState {\n    scrollToIndex: number;\n}\n\n/**\n * @name - Editor Side Bar\n * @description - Side bar for editor page\n */\nexport default class EditorSideBar extends React.Component<IEditorSideBarProps, IEditorSideBarState> {\n    public state: IEditorSideBarState = {\n        scrollToIndex: this.props.selectedAsset\n            ? this.props.assets.findIndex((asset) => asset.id === this.props.selectedAsset.id)\n            : 0,\n    };\n\n    private listRef: React.RefObject<List> = React.createRef();\n\n    public render() {\n        return (\n            <div className=\"editor-page-sidebar-nav\">\n                <AutoSizer>\n                    {({ height, width }) => (\n                        <List\n                            ref={this.listRef}\n                            className=\"asset-list\"\n                            height={height}\n                            width={width}\n                            rowCount={this.props.assets.length}\n                            rowHeight={() => this.getRowHeight(width)}\n                            rowRenderer={this.rowRenderer}\n                            overscanRowCount={2}\n                            scrollToIndex={this.state.scrollToIndex}\n                        />\n                    )}\n                </AutoSizer>\n            </div>\n        );\n    }\n\n    public componentDidUpdate(prevProps: IEditorSideBarProps) {\n        if (prevProps.thumbnailSize !== this.props.thumbnailSize) {\n            this.listRef.current.recomputeRowHeights();\n        }\n\n        if (!prevProps.selectedAsset && !this.props.selectedAsset) {\n            return;\n        }\n\n        if ((!prevProps.selectedAsset && this.props.selectedAsset) ||\n            prevProps.selectedAsset.id !== this.props.selectedAsset.id) {\n            this.selectAsset(this.props.selectedAsset);\n        }\n    }\n\n    private getRowHeight = (width: number) => {\n        return width / (4 / 3) + 16;\n    }\n\n    private selectAsset = (selectedAsset: IAsset): void => {\n        const scrollToIndex = this.props.assets.findIndex((asset) => asset.id === selectedAsset.id);\n\n        this.setState({\n            scrollToIndex,\n        }, () => {\n            this.listRef.current.forceUpdateGrid();\n        });\n    }\n\n    private onAssetClicked = (asset: IAsset): void => {\n        if (this.props.onBeforeAssetSelected) {\n            if (!this.props.onBeforeAssetSelected()) {\n                return;\n            }\n        }\n\n        this.selectAsset(asset);\n        this.props.onAssetSelected(asset);\n    }\n\n    private rowRenderer = ({ key, index, style }): JSX.Element => {\n        const asset = this.props.assets[index];\n        const selectedAsset = this.props.selectedAsset;\n\n        return (\n            <div key={key} style={style}\n                className={this.getAssetCssClassNames(asset, selectedAsset)}\n                onClick={() => this.onAssetClicked(asset)}>\n                <div className=\"asset-item-image\">\n                    {this.renderBadges(asset)}\n                    <AssetPreview asset={asset} />\n                </div>\n                <div className=\"asset-item-metadata\">\n                    <span className=\"asset-filename\" title={asset.name}>{asset.name}</span>\n                    {asset.size &&\n                        <span>\n                            {asset.size.width} x {asset.size.height}\n                        </span>\n                    }\n                </div>\n            </div>\n        );\n    }\n\n    private renderBadges = (asset: IAsset): JSX.Element => {\n        switch (asset.state) {\n            case AssetState.Tagged:\n                return (\n                    <span title={strings.editorPage.tagged}\n                        className=\"badge badge-tagged\">\n                        <i className=\"fas fa-tag\"></i>\n                    </span>\n                );\n            case AssetState.Visited:\n                return (\n                    <span title={strings.editorPage.visited}\n                        className=\"badge badge-visited\">\n                        <i className=\"fas fa-eye\"></i>\n                    </span>\n                );\n            default:\n                return null;\n        }\n    }\n\n    private getAssetCssClassNames = (asset: IAsset, selectedAsset: IAsset = null): string => {\n        const cssClasses = [\"asset-item\"];\n        if (selectedAsset && selectedAsset.id === asset.id) {\n            cssClasses.push(\"selected\");\n        }\n\n        return cssClasses.join(\" \");\n    }\n}\n","import React from \"react\";\nimport _ from \"lodash\";\nimport { IToolbarItemRegistration } from \"../../../../providers/toolbar/toolbarItemFactory\";\nimport IProjectActions from \"../../../../redux/actions/projectActions\";\nimport { IProject } from \"../../../../models/applicationState\";\nimport { IToolbarItemProps, ToolbarItem, ToolbarItemType } from \"../../toolbar/toolbarItem\";\nimport \"./editorToolbar.scss\";\nimport { ToolbarItemName } from \"../../../../registerToolbar\";\n\n/**\n * Properties for Editor Toolbar\n * @member project - Current project being edited\n * @member actions - Actions to be performed on project\n * @member items - Registered Toolbar items\n */\nexport interface IEditorToolbarProps {\n    project: IProject;\n    actions: IProjectActions;\n    items: IToolbarItemRegistration[];\n    onToolbarItemSelected: (toolbarItem: ToolbarItem) => void;\n}\n\n/**\n * State of IEditorToolbar\n * @member selectedItem - Item selected from toolbar\n */\nexport interface IEditorToolbarState {\n    selectedItem: ToolbarItemName;\n}\n\n/**\n * @name - Editor Toolbar\n * @description - Collection of buttons that perform actions in toolbar on editor page\n */\nexport class EditorToolbar extends React.Component<IEditorToolbarProps, IEditorToolbarState> {\n\n    public state = {\n        selectedItem: ToolbarItemName.SelectCanvas,\n    };\n\n    public render() {\n        const groups = _(this.props.items)\n            .groupBy(\"config.group\")\n            .values()\n            .value();\n\n        return (\n            <div className=\"btn-toolbar\" role=\"toolbar\">\n                {groups.map((items, idx) =>\n                    <div key={idx} className=\"btn-group mr-2\" role=\"group\">\n                        {items.map((registration) => {\n                            const toolbarItemProps: IToolbarItemProps = {\n                                ...registration.config,\n                                actions: this.props.actions,\n                                project: this.props.project,\n                                active: this.isComponentActive(this.state.selectedItem, registration),\n                                onClick: this.onToolbarItemSelected,\n                            };\n                            const ToolbarItem = registration.component;\n\n                            return <ToolbarItem key={toolbarItemProps.name} {...toolbarItemProps} />;\n                        })}\n                    </div>,\n                )}\n            </div>\n        );\n    }\n\n    private onToolbarItemSelected = (toolbarItem: ToolbarItem) => {\n        this.setState({\n            selectedItem: toolbarItem.props.name,\n        }, () => {\n            this.props.onToolbarItemSelected(toolbarItem);\n        });\n    }\n\n    private isComponentActive(selected: ToolbarItemName, componentRegistration: IToolbarItemRegistration) {\n        return selected\n            ? selected === componentRegistration.config.name &&\n            componentRegistration.config.type === ToolbarItemType.State\n            : false;\n    }\n}\n","import * as tfc from \"@tensorflow/tfjs-core\";\nimport { LocalFileSystemProxy, ILocalFileSystemProxyOptions } from \"../../providers/storage/localFileSystemProxy\";\n\nexport class ElectronProxyHandler implements tfc.io.IOHandler {\n    protected readonly provider: LocalFileSystemProxy;\n\n    constructor(folderPath: string) {\n        const options: ILocalFileSystemProxyOptions = { folderPath };\n        this.provider = new LocalFileSystemProxy(options);\n    }\n\n    public async load(): Promise<tfc.io.ModelArtifacts> {\n        const modelJSON = JSON.parse(await this.provider.readText(\"/model.json\"));\n\n        const modelArtifacts: tfc.io.ModelArtifacts = {\n            modelTopology: modelJSON.modelTopology,\n        };\n\n        if (modelJSON.weightsManifest != null) {\n            const [weightSpecs, weightData] =\n                await this.loadWeights(modelJSON.weightsManifest);\n            modelArtifacts.weightSpecs = weightSpecs;\n            modelArtifacts.weightData = weightData;\n        }\n\n        return modelArtifacts;\n    }\n\n    public async loadClasses(): Promise<JSON> {\n        const json = await this.provider.readText(\"/classes.json\");\n        return json ? JSON.parse(json) : null;\n    }\n\n    private async loadWeights(weightsManifest: tfc.io.WeightsManifestConfig)\n        : Promise<[tfc.io.WeightsManifestEntry[], ArrayBuffer]> {\n        const buffers: Buffer[] = [];\n        const weightSpecs: tfc.io.WeightsManifestEntry[] = [];\n\n        for (const group of weightsManifest) {\n            for (const shardName of group.paths) {\n                const buffer = await this.provider.readBinary(\"/\" + shardName);\n                buffers.push(buffer);\n            }\n            weightSpecs.push(...group.weights);\n        }\n\n        return [weightSpecs, this.toArrayBuffer(buffers)];\n    }\n\n    /**\n     * Convert a Buffer or an Array of Buffers to an ArrayBuffer.\n     *\n     * If the input is an Array of Buffers, they will be concatenated in the\n     * specified order to form the output ArrayBuffer.\n     */\n    private toArrayBuffer(buf: Buffer | Buffer[]): ArrayBuffer {\n        if (Array.isArray(buf)) {\n            // An Array of Buffers.\n            let totalLength = 0;\n            for (const buffer of buf) {\n                totalLength += buffer.length;\n            }\n\n            const ab = new ArrayBuffer(totalLength);\n            const view = new Uint8Array(ab);\n            let pos = 0;\n            for (const buffer of buf) {\n                pos += buffer.copy(view, pos);\n            }\n            return ab;\n        } else {\n            // A single Buffer. Return a copy of the underlying ArrayBuffer slice.\n            return buf.buffer.slice(buf.byteOffset, buf.byteOffset + buf.byteLength);\n        }\n    }\n}\n","import axios from \"axios\";\nimport * as shortid from \"shortid\";\nimport * as tf from \"@tensorflow/tfjs\";\nimport { ElectronProxyHandler } from \"./electronProxyHandler\";\nimport { IRegion, RegionType } from \"../../models/applicationState\";\nimport { strings } from \"../../common/strings\";\n\n// tslint:disable-next-line:interface-over-type-literal\nexport type DetectedObject = {\n    bbox: [number, number, number, number];  // [x, y, width, height]\n    class: string;\n    score: number;\n};\n\n/**\n * Defines supported data types supported by Tensorflow JS\n */\nexport type ImageObject = tf.Tensor3D | ImageData | HTMLImageElement | HTMLCanvasElement | HTMLVideoElement;\n\n/**\n * Object Dectection loads active learning models and predicts regions\n */\nexport class ObjectDetection {\n    private modelLoaded: boolean = false;\n\n    get loaded(): boolean {\n        return this.modelLoaded;\n    }\n\n    private model: tf.GraphModel;\n    private jsonClasses: JSON;\n\n    /**\n     * Dispose the tensors allocated by the model. You should call this when you\n     * are done with the model.\n     */\n    public dispose() {\n        if (this.model) {\n            this.model.dispose();\n        }\n    }\n\n    /**\n     * Load a TensorFlow.js Object Detection model from file: or http URL.\n     * @param modelFolderPath file: or http URL to the model\n     */\n    public async load(modelFolderPath: string) {\n        try {\n            if (modelFolderPath.toLowerCase().startsWith(\"http://\") ||\n                modelFolderPath.toLowerCase().startsWith(\"https://\")) {\n                this.model = await tf.loadGraphModel(modelFolderPath + \"/model.json\");\n\n                const response = await axios.get(modelFolderPath + \"/classes.json\");\n                this.jsonClasses = JSON.parse(JSON.stringify(response.data));\n            } else {\n                const handler = new ElectronProxyHandler(modelFolderPath);\n                this.model = await tf.loadGraphModel(handler);\n                this.jsonClasses = await handler.loadClasses();\n            }\n\n            // Warmup the model.\n            const result = await this.model.executeAsync(tf.zeros([1, 300, 300, 3])) as tf.Tensor[];\n            result.forEach(async (t) => await t.data());\n            result.forEach(async (t) => t.dispose());\n            this.modelLoaded = true;\n        } catch (err) {\n            this.modelLoaded = false;\n            throw err;\n        }\n    }\n\n    /**\n     * Predict Regions from an HTMLImageElement returning list of IRegion.\n     * @param image ImageObject to be used for prediction\n     * @param predictTag Flag indicates if predict only region bounding box of tag too.\n     * @param xRatio Width compression ratio between the HTMLImageElement and the original image.\n     * @param yRatio Height compression ratio between the HTMLImageElement and the original image.\n     */\n    public async predictImage(image: ImageObject, predictTag: boolean, xRatio: number, yRatio: number)\n        : Promise<IRegion[]> {\n        const regions: IRegion[] = [];\n\n        const predictions = await this.detect(image);\n        predictions.forEach((prediction) => {\n            const left = Math.max(0, prediction.bbox[0] * xRatio);\n            const top = Math.max(0, prediction.bbox[1] * yRatio);\n            const width = Math.max(0, prediction.bbox[2] * xRatio);\n            const height = Math.max(0, prediction.bbox[3] * yRatio);\n\n            regions.push({\n                id: shortid.generate(),\n                type: RegionType.Rectangle,\n                tags: predictTag ? [prediction.class] : [],\n                boundingBox: {\n                    left,\n                    top,\n                    width,\n                    height,\n                },\n                points: [{\n                    x: left,\n                    y: top,\n                },\n                {\n                    x: left + width,\n                    y: top,\n                },\n                {\n                    x: left + width,\n                    y: top + height,\n                },\n                {\n                    x: left,\n                    y: top + height,\n                }],\n            });\n        });\n\n        return regions;\n    }\n\n    /**\n     * Detect objects for an image returning a list of bounding boxes with\n     * associated class and score.\n     *\n     * @param img The image to detect objects from. Can be a tensor or a DOM\n     *     element image, video, or canvas.\n     * @param maxNumBoxes The maximum number of bounding boxes of detected\n     * objects. There can be multiple objects of the same class, but at different\n     * locations. Defaults to 20.\n     *\n     */\n    public async detect(img: ImageObject, maxNumBoxes: number = 20): Promise<DetectedObject[]> {\n        if (this.model) {\n            return this.infer(img, maxNumBoxes);\n        }\n\n        return [];\n    }\n\n    /**\n     * Infers through the model.\n     *\n     * @param img The image to classify. Can be a tensor or a DOM element image,\n     * video, or canvas.\n     * @param maxNumBoxes The maximum number of bounding boxes of detected\n     * objects. There can be multiple objects of the same class, but at different\n     * locations. Defaults to 20.\n     */\n    private async infer(img: ImageObject, maxNumBoxes: number = 20): Promise<DetectedObject[]> {\n        const batched = tf.tidy(() => {\n            if (!(img instanceof tf.Tensor)) {\n                img = tf.browser.fromPixels(img);\n            }\n            // Reshape to a single-element batch so we can pass it to executeAsync.\n            return img.expandDims(0);\n        });\n        const height = batched.shape[1];\n        const width = batched.shape[2];\n\n        // model returns two tensors:\n        // 1. box classification score with shape of [1, 1917, 90]\n        // 2. box location with shape of [1, 1917, 1, 4]\n        // where 1917 is the number of box detectors, 90 is the number of classes.\n        // and 4 is the four coordinates of the box.\n        const result = await this.model.executeAsync(batched) as tf.Tensor[];\n\n        const scores = result[0].dataSync() as Float32Array;\n        const boxes = result[1].dataSync() as Float32Array;\n\n        // clean the webgl tensors\n        batched.dispose();\n        tf.dispose(result);\n\n        const [maxScores, classes] = this.calculateMaxScores(scores, result[0].shape[1], result[0].shape[2]);\n\n        const prevBackend = tf.getBackend();\n        // run post process in cpu\n        tf.setBackend(\"cpu\");\n        const indexTensor = tf.tidy(() => {\n            const boxes2 = tf.tensor2d(boxes, [result[1].shape[1], result[1].shape[3]]);\n            return tf.image.nonMaxSuppression(boxes2, maxScores, maxNumBoxes, 0.5, 0.5);\n        });\n\n        const indexes = indexTensor.dataSync() as Float32Array;\n        indexTensor.dispose();\n\n        // restore previous backend\n        tf.setBackend(prevBackend);\n\n        return this.buildDetectedObjects(width, height, boxes, maxScores, indexes, classes);\n    }\n\n    private buildDetectedObjects(\n        width: number, height: number, boxes: Float32Array, scores: number[],\n        indexes: Float32Array, classes: number[]): DetectedObject[] {\n        const count = indexes.length;\n        const objects: DetectedObject[] = [];\n\n        for (let i = 0; i < count; i++) {\n            const bbox = [];\n            for (let j = 0; j < 4; j++) {\n                bbox[j] = boxes[indexes[i] * 4 + j];\n            }\n            const minY = bbox[0] * height;\n            const minX = bbox[1] * width;\n            const maxY = bbox[2] * height;\n            const maxX = bbox[3] * width;\n            bbox[0] = minX;\n            bbox[1] = minY;\n            bbox[2] = maxX - minX;\n            bbox[3] = maxY - minY;\n            objects.push({\n                bbox: bbox as [number, number, number, number],\n                class: this.getClass(i, indexes, classes),\n                score: scores[indexes[i]],\n            });\n        }\n\n        return objects;\n    }\n\n    private getClass(index: number, indexes: Float32Array, classes: number[]): string {\n        if (this.jsonClasses && index < indexes.length && indexes[index] < classes.length) {\n            const classId = classes[indexes[index]] - 1;\n            const classObject = this.jsonClasses[classId];\n\n            return classObject ? classObject.displayName : strings.tags.warnings.unknownTagName;\n        }\n\n        return \"\";\n    }\n\n    private calculateMaxScores(\n        scores: Float32Array, numBoxes: number,\n        numClasses: number): [number[], number[]] {\n        const maxes = [];\n        const classes = [];\n        for (let i = 0; i < numBoxes; i++) {\n            let max = Number.MIN_VALUE;\n            let index = -1;\n            for (let j = 0; j < numClasses; j++) {\n                if (scores[i * numClasses + j] > max) {\n                    max = scores[i * numClasses + j];\n                    index = j;\n                }\n            }\n            maxes[i] = max;\n            classes[i] = index;\n        }\n        return [maxes, classes];\n    }\n}\n","import { IAssetMetadata, ModelPathType, IActiveLearningSettings, AssetState } from \"../models/applicationState\";\nimport { ObjectDetection } from \"../providers/activeLearning/objectDetection\";\nimport Guard from \"../common/guard\";\nimport { isElectron } from \"../common/hostProcess\";\nimport { Env } from \"../common/environment\";\n\nexport class ActiveLearningService {\n    private objectDetection: ObjectDetection;\n    private modelLoaded: boolean = false;\n\n    constructor(private settings: IActiveLearningSettings) {\n        Guard.null(settings);\n        this.objectDetection = new ObjectDetection();\n    }\n\n    public isModelLoaded() {\n        return this.modelLoaded;\n    }\n\n    public async predictRegions(canvas: HTMLCanvasElement, assetMetadata: IAssetMetadata): Promise<IAssetMetadata> {\n        Guard.null(canvas);\n        Guard.null(assetMetadata);\n\n        // If the canvas or asset are invalid return asset metadata\n        if (!(canvas.width && canvas.height && assetMetadata.asset && assetMetadata.asset.size)) {\n            return assetMetadata;\n        }\n\n        await this.ensureModelLoaded();\n\n        const xRatio = assetMetadata.asset.size.width / canvas.width;\n        const yRatio = assetMetadata.asset.size.height / canvas.height;\n        const predictedRegions = await this.objectDetection.predictImage(\n            canvas,\n            this.settings.predictTag,\n            xRatio,\n            yRatio,\n        );\n\n        const updatedRegions = [...assetMetadata.regions];\n        predictedRegions.forEach((prediction) => {\n            const matchingRegion = updatedRegions.find((region) => {\n                return region.boundingBox\n                    && region.boundingBox.left === prediction.boundingBox.left\n                    && region.boundingBox.top === prediction.boundingBox.top\n                    && region.boundingBox.width === prediction.boundingBox.width\n                    && region.boundingBox.height === prediction.boundingBox.height;\n            });\n\n            if (updatedRegions.length === 0 || !matchingRegion) {\n                updatedRegions.push(prediction);\n            }\n        });\n\n        return {\n            ...assetMetadata,\n            regions: updatedRegions,\n            asset: {\n                ...assetMetadata.asset,\n                state: updatedRegions.length > 0 ? AssetState.Tagged : AssetState.Visited,\n                predicted: true,\n            },\n        } as IAssetMetadata;\n    }\n\n    public async ensureModelLoaded(): Promise<void> {\n        if (this.modelLoaded) {\n            return Promise.resolve();\n        }\n\n        await this.loadModel();\n        this.modelLoaded = true;\n    }\n\n    private async loadModel() {\n        let modelPath = \"\";\n        if (this.settings.modelPathType === ModelPathType.Coco) {\n            if (isElectron()) {\n                const appPath = this.getAppPath();\n\n                if (Env.get() !== \"production\") {\n                    modelPath = appPath + \"/cocoSSDModel\";\n                } else {\n                    modelPath = appPath + \"/../../cocoSSDModel\";\n                }\n            } else {\n                modelPath = \"https://vott.blob.core.windows.net/coco-ssd-model\";\n            }\n        } else if (this.settings.modelPathType === ModelPathType.File) {\n            if (isElectron()) {\n                modelPath = this.settings.modelPath;\n            }\n        } else {\n            modelPath = this.settings.modelUrl;\n        }\n\n        await this.objectDetection.load(modelPath);\n    }\n\n    private getAppPath = () => {\n        const remote = (window as any).require(\"electron\").remote as Electron.Remote;\n        return remote.app.getAppPath();\n    }\n}\n","import React, { SyntheticEvent } from \"react\";\nimport axios, { AxiosRequestConfig } from \"axios\";\nimport { FieldProps } from \"react-jsonschema-form\";\nimport { interpolate } from \"../../../../common/strings\";\n\ninterface IKeyValuePair {\n    key: string;\n    value: string;\n}\n\n/**\n * Options for External Picker\n * @member method - HTTP method\n * @member url - URL for request\n * @member keySelector - Key attribute from HTTP response\n * @member valueSelector - Value attribute from HTTP response\n * @member authHeaderName - Authorization header name\n * @member authHeaderValue - Authorization header value\n */\nexport interface IExternalPickerUiOptions {\n    method: string;\n    url: string;\n    keySelector: string;\n    valueSelector: string;\n    authHeaderName?: string;\n    authHeaderValue?: string;\n    filter?: IExternalPickerFilter;\n}\n\nexport interface IExternalPickerFilter {\n    left: string;\n    right: string;\n    operator: FilterOperator;\n}\n\nexport enum FilterOperator {\n    Equals = \"eq\",\n    GreaterThan = \"gt\",\n    LessThan = \"lt\",\n}\n\n/**\n * Properties for External Picker\n * @member options - External Picker UI options\n */\nexport interface IExternalPickerProps extends FieldProps {\n    options: IExternalPickerUiOptions;\n}\n\n/**\n * State for External Picker\n * @member items - Items loaded from external source as options\n */\nexport interface IExternalPickerState {\n    items: IKeyValuePair[];\n}\n\n/**\n * Dropdown that provides options from an external HTTP source\n */\nexport default class ExternalPicker extends React.Component<IExternalPickerProps, any> {\n    public state: IExternalPickerState = {\n        items: [],\n    };\n\n    public render() {\n        return (\n            <select id={this.props.id}\n                className=\"form-control\"\n                value={this.props.value}\n                onChange={this.onChange}>\n                <option value=\"\">Select {this.props.schema.title}</option>\n                {this.state.items.map((item) => <option key={item.key} value={item.key}>{item.value}</option>)}\n            </select>\n        );\n    }\n\n    public async componentDidMount() {\n        await this.bindExternalData();\n    }\n\n    public async componentDidUpdate(prevProps: FieldProps) {\n        if (prevProps.formContext !== this.props.formContext) {\n            await this.bindExternalData();\n        }\n    }\n\n    private onChange = (e: SyntheticEvent) => {\n        const target = e.target as HTMLSelectElement;\n        this.props.onChange(target.value === \"\" ? undefined : target.value);\n    }\n\n    private bindExternalData = async (): Promise<void> => {\n        const uiOptions = this.props.options;\n        const customHeaders: any = {};\n        const authHeaderValue = interpolate(uiOptions.authHeaderValue, {\n            props: this.props,\n        });\n\n        if (!authHeaderValue || authHeaderValue === \"undefined\") {\n            return;\n        }\n\n        customHeaders[uiOptions.authHeaderName] = authHeaderValue;\n\n        const config: AxiosRequestConfig = {\n            method: uiOptions.method,\n            url: interpolate(uiOptions.url, { props: this.props }),\n            headers: customHeaders,\n        };\n\n        try {\n            const response = await axios.request(config);\n\n            let rawItems: any[] = response.data;\n\n            // Optionally filter results if a filter has been defined\n            if (uiOptions.filter) {\n                rawItems = rawItems.filter((item) => this.filterPredicate(item, uiOptions.filter));\n            }\n\n            const items: IKeyValuePair[] = rawItems.map((item) => {\n                return {\n                    key: interpolate(uiOptions.keySelector, { item }),\n                    value: interpolate(uiOptions.valueSelector, { item }),\n                };\n            });\n\n            this.setState({ items });\n        } catch (e) {\n            this.setState({ items: [] });\n            this.props.onChange(undefined);\n        }\n    }\n\n    /**\n     * Determines if the specified item will return as part of the filter\n     * @param item The item to evaluate\n     * @param filter The filter expression to evaluate against\n     */\n    private filterPredicate(item: any, filter: IExternalPickerFilter): boolean {\n        const left = interpolate(filter.left, { item, props: this.props });\n        const right = interpolate(filter.right, { item, props: this.props });\n\n        switch (filter.operator) {\n            case FilterOperator.Equals:\n                return left === right;\n            case FilterOperator.GreaterThan:\n                return left > right;\n            case FilterOperator.LessThan:\n                return left < right;\n            default:\n                throw new Error(\"Invalid filter operator\");\n        }\n    }\n}\n","import _ from \"lodash\";\nimport React, { RefObject } from \"react\";\nimport { connect } from \"react-redux\";\nimport { RouteComponentProps } from \"react-router-dom\";\nimport SplitPane from \"react-split-pane\";\nimport { bindActionCreators } from \"redux\";\nimport { SelectionMode } from \"vott-ct/lib/js/CanvasTools/Interface/ISelectorSettings\";\nimport HtmlFileReader from \"../../../../common/htmlFileReader\";\nimport { strings } from \"../../../../common/strings\";\nimport {\n    AssetState, AssetType, EditorMode, IApplicationState,\n    IAppSettings, IAsset, IAssetMetadata, IProject, IRegion,\n    ISize, ITag, IAdditionalPageSettings, AppError, ErrorCode,\n} from \"../../../../models/applicationState\";\nimport { IToolbarItemRegistration, ToolbarItemFactory } from \"../../../../providers/toolbar/toolbarItemFactory\";\nimport IApplicationActions, * as applicationActions from \"../../../../redux/actions/applicationActions\";\nimport IProjectActions, * as projectActions from \"../../../../redux/actions/projectActions\";\nimport { ToolbarItemName } from \"../../../../registerToolbar\";\nimport { AssetService } from \"../../../../services/assetService\";\nimport { AssetPreview } from \"../../common/assetPreview/assetPreview\";\nimport { KeyboardBinding } from \"../../common/keyboardBinding/keyboardBinding\";\nimport { KeyEventType } from \"../../common/keyboardManager/keyboardManager\";\nimport { TagInput } from \"../../common/tagInput/tagInput\";\nimport { ToolbarItem } from \"../../toolbar/toolbarItem\";\nimport Canvas from \"./canvas\";\nimport CanvasHelpers from \"./canvasHelpers\";\nimport \"./editorPage.scss\";\nimport EditorSideBar from \"./editorSideBar\";\nimport { EditorToolbar } from \"./editorToolbar\";\nimport Alert from \"../../common/alert/alert\";\nimport Confirm from \"../../common/confirm/confirm\";\nimport { ActiveLearningService } from \"../../../../services/activeLearningService\";\nimport { toast } from \"react-toastify\";\n\n/**\n * Properties for Editor Page\n * @member project - Project being edited\n * @member recentProjects - Array of projects recently viewed/edited\n * @member actions - Project actions\n * @member applicationActions - Application setting actions\n */\nexport interface IEditorPageProps extends RouteComponentProps, React.Props<EditorPage> {\n    project: IProject;\n    recentProjects: IProject[];\n    appSettings: IAppSettings;\n    actions: IProjectActions;\n    applicationActions: IApplicationActions;\n}\n\n/**\n * State for Editor Page\n */\nexport interface IEditorPageState {\n    /** Array of assets in project */\n    assets: IAsset[];\n    /** The editor mode to set for canvas tools */\n    editorMode: EditorMode;\n    /** The selection mode to set for canvas tools */\n    selectionMode: SelectionMode;\n    /** The selected asset for the primary editing experience */\n    selectedAsset?: IAssetMetadata;\n    /** Currently selected region on current asset */\n    selectedRegions?: IRegion[];\n    /** The child assets used for nest asset typs */\n    childAssets?: IAsset[];\n    /** Additional settings for asset previews */\n    additionalSettings?: IAdditionalPageSettings;\n    /** Most recently selected tag */\n    selectedTag: string;\n    /** Tags locked for region labeling */\n    lockedTags: string[];\n    /** Size of the asset thumbnails to display in the side bar */\n    thumbnailSize: ISize;\n    /**\n     * Whether or not the editor is in a valid state\n     * State is invalid when a region has not been tagged\n     */\n    isValid: boolean;\n    /** Whether the show invalid region warning alert should display */\n    showInvalidRegionWarning: boolean;\n}\n\nfunction mapStateToProps(state: IApplicationState) {\n    return {\n        recentProjects: state.recentProjects,\n        project: state.currentProject,\n        appSettings: state.appSettings,\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators(projectActions, dispatch),\n        applicationActions: bindActionCreators(applicationActions, dispatch),\n    };\n}\n\n/**\n * @name - Editor Page\n * @description - Page for adding/editing/removing tags to assets\n */\n@connect(mapStateToProps, mapDispatchToProps)\nexport default class EditorPage extends React.Component<IEditorPageProps, IEditorPageState> {\n    public state: IEditorPageState = {\n        selectedTag: null,\n        lockedTags: [],\n        selectionMode: SelectionMode.RECT,\n        assets: [],\n        childAssets: [],\n        editorMode: EditorMode.Rectangle,\n        additionalSettings: {\n            videoSettings: (this.props.project) ? this.props.project.videoSettings : null,\n            activeLearningSettings: (this.props.project) ? this.props.project.activeLearningSettings : null,\n        },\n        thumbnailSize: this.props.appSettings.thumbnailSize || { width: 175, height: 155 },\n        isValid: true,\n        showInvalidRegionWarning: false,\n    };\n\n    private activeLearningService: ActiveLearningService = null;\n    private loadingProjectAssets: boolean = false;\n    private toolbarItems: IToolbarItemRegistration[] = ToolbarItemFactory.getToolbarItems();\n    private canvas: RefObject<Canvas> = React.createRef();\n    private renameTagConfirm: React.RefObject<Confirm> = React.createRef();\n    private deleteTagConfirm: React.RefObject<Confirm> = React.createRef();\n\n    public async componentDidMount() {\n        const projectId = this.props.match.params[\"projectId\"];\n        if (this.props.project) {\n            await this.loadProjectAssets();\n        } else if (projectId) {\n            const project = this.props.recentProjects.find((project) => project.id === projectId);\n            await this.props.actions.loadProject(project);\n        }\n\n        this.activeLearningService = new ActiveLearningService(this.props.project.activeLearningSettings);\n    }\n\n    public async componentDidUpdate(prevProps: Readonly<IEditorPageProps>) {\n        if (this.props.project && this.state.assets.length === 0) {\n            await this.loadProjectAssets();\n        }\n\n        // Navigating directly to the page via URL (ie, http://vott/projects/a1b2c3dEf/edit) sets the default state\n        // before props has been set, this updates the project and additional settings to be valid once props are\n        // retrieved.\n        if (this.props.project && !prevProps.project) {\n            this.setState({\n                additionalSettings: {\n                    videoSettings: (this.props.project) ? this.props.project.videoSettings : null,\n                    activeLearningSettings: (this.props.project) ? this.props.project.activeLearningSettings : null,\n                },\n            });\n        }\n\n        if (this.props.project && prevProps.project && this.props.project.tags !== prevProps.project.tags) {\n            this.updateRootAssets();\n        }\n    }\n\n    public render() {\n        const { project } = this.props;\n        const { assets, selectedAsset } = this.state;\n        const rootAssets = assets.filter((asset) => !asset.parent);\n\n        if (!project) {\n            return (<div>Loading...</div>);\n        }\n\n        return (\n            <div className=\"editor-page\">\n                {[...Array(10).keys()].map((index) => {\n                    return (<KeyboardBinding\n                        displayName={strings.editorPage.tags.hotKey.apply}\n                        key={index}\n                        keyEventType={KeyEventType.KeyDown}\n                        accelerators={[`${index}`]}\n                        icon={\"fa-tag\"}\n                        handler={this.handleTagHotKey} />);\n                })}\n                {[...Array(10).keys()].map((index) => {\n                    return (<KeyboardBinding\n                        displayName={strings.editorPage.tags.hotKey.lock}\n                        key={index}\n                        keyEventType={KeyEventType.KeyDown}\n                        accelerators={[`CmdOrCtrl+${index}`]}\n                        icon={\"fa-lock\"}\n                        handler={this.handleCtrlTagHotKey} />);\n                })}\n                <SplitPane split=\"vertical\"\n                    defaultSize={this.state.thumbnailSize.width}\n                    minSize={100}\n                    maxSize={400}\n                    paneStyle={{ display: \"flex\" }}\n                    onChange={this.onSideBarResize}\n                    onDragFinished={this.onSideBarResizeComplete}>\n                    <div className=\"editor-page-sidebar bg-lighter-1\">\n                        <EditorSideBar\n                            assets={rootAssets}\n                            selectedAsset={selectedAsset ? selectedAsset.asset : null}\n                            onBeforeAssetSelected={this.onBeforeAssetSelected}\n                            onAssetSelected={this.selectAsset}\n                            thumbnailSize={this.state.thumbnailSize}\n                        />\n                    </div>\n                    <div className=\"editor-page-content\" onClick={this.onPageClick}>\n                        <div className=\"editor-page-content-main\">\n                            <div className=\"editor-page-content-main-header\">\n                                <EditorToolbar project={this.props.project}\n                                    items={this.toolbarItems}\n                                    actions={this.props.actions}\n                                    onToolbarItemSelected={this.onToolbarItemSelected} />\n                            </div>\n                            <div className=\"editor-page-content-main-body\">\n                                {selectedAsset &&\n                                    <Canvas\n                                        ref={this.canvas}\n                                        selectedAsset={this.state.selectedAsset}\n                                        onAssetMetadataChanged={this.onAssetMetadataChanged}\n                                        onCanvasRendered={this.onCanvasRendered}\n                                        onSelectedRegionsChanged={this.onSelectedRegionsChanged}\n                                        editorMode={this.state.editorMode}\n                                        selectionMode={this.state.selectionMode}\n                                        project={this.props.project}\n                                        lockedTags={this.state.lockedTags}>\n                                        <AssetPreview\n                                            additionalSettings={this.state.additionalSettings}\n                                            autoPlay={true}\n                                            controlsEnabled={this.state.isValid}\n                                            onBeforeAssetChanged={this.onBeforeAssetSelected}\n                                            onChildAssetSelected={this.onChildAssetSelected}\n                                            asset={this.state.selectedAsset.asset}\n                                            childAssets={this.state.childAssets} />\n                                    </Canvas>\n                                }\n                            </div>\n                        </div>\n                        <div className=\"editor-page-right-sidebar\">\n                            <TagInput\n                                tags={this.props.project.tags}\n                                lockedTags={this.state.lockedTags}\n                                selectedRegions={this.state.selectedRegions}\n                                onChange={this.onTagsChanged}\n                                onLockedTagsChange={this.onLockedTagsChanged}\n                                onTagClick={this.onTagClicked}\n                                onCtrlTagClick={this.onCtrlTagClicked}\n                                onTagRenamed={this.confirmTagRenamed}\n                                onTagDeleted={this.confirmTagDeleted}\n                            />\n                        </div>\n                        <Confirm title={strings.editorPage.tags.rename.title}\n                            ref={this.renameTagConfirm}\n                            message={strings.editorPage.tags.rename.confirmation}\n                            confirmButtonColor=\"danger\"\n                            onConfirm={this.onTagRenamed} />\n                        <Confirm title={strings.editorPage.tags.delete.title}\n                            ref={this.deleteTagConfirm}\n                            message={strings.editorPage.tags.delete.confirmation}\n                            confirmButtonColor=\"danger\"\n                            onConfirm={this.onTagDeleted} />\n                    </div>\n                </SplitPane>\n                <Alert show={this.state.showInvalidRegionWarning}\n                    title={strings.editorPage.messages.enforceTaggedRegions.title}\n                    // tslint:disable-next-line:max-line-length\n                    message={strings.editorPage.messages.enforceTaggedRegions.description}\n                    closeButtonColor=\"info\"\n                    onClose={() => this.setState({ showInvalidRegionWarning: false })} />\n            </div>\n        );\n    }\n\n    private onPageClick = () => {\n        this.setState({\n            selectedRegions: [],\n        });\n    }\n\n    /**\n     * Called when the asset side bar is resized\n     * @param newWidth The new sidebar width\n     */\n    private onSideBarResize = (newWidth: number) => {\n        this.setState({\n            thumbnailSize: {\n                width: newWidth,\n                height: newWidth / (4 / 3),\n            },\n        }, () => this.canvas.current.forceResize());\n    }\n\n    /**\n     * Called when the asset sidebar has been completed\n     */\n    private onSideBarResizeComplete = () => {\n        const appSettings = {\n            ...this.props.appSettings,\n            thumbnailSize: this.state.thumbnailSize,\n        };\n\n        this.props.applicationActions.saveAppSettings(appSettings);\n    }\n\n    /**\n     * Called when a tag from footer is clicked\n     * @param tag Tag clicked\n     */\n    private onTagClicked = (tag: ITag): void => {\n        this.setState({\n            selectedTag: tag.name,\n            lockedTags: [],\n        }, () => this.canvas.current.applyTag(tag.name));\n    }\n\n    /**\n     * Open confirm dialog for tag renaming\n     */\n    private confirmTagRenamed = (tagName: string, newTagName: string): void => {\n        this.renameTagConfirm.current.open(tagName, newTagName);\n    }\n\n    /**\n     * Renames tag in assets and project, and saves files\n     * @param tagName Name of tag to be renamed\n     * @param newTagName New name of tag\n     */\n    private onTagRenamed = async (tagName: string, newTagName: string): Promise<void> => {\n        const assetUpdates = await this.props.actions.updateProjectTag(this.props.project, tagName, newTagName);\n        const selectedAsset = assetUpdates.find((am) => am.asset.id === this.state.selectedAsset.asset.id);\n\n        if (selectedAsset) {\n            if (selectedAsset) {\n                this.setState({ selectedAsset });\n            }\n        }\n    }\n\n    /**\n     * Open Confirm dialog for tag deletion\n     */\n    private confirmTagDeleted = (tagName: string): void => {\n        this.deleteTagConfirm.current.open(tagName);\n    }\n\n    /**\n     * Removes tag from assets and projects and saves files\n     * @param tagName Name of tag to be deleted\n     */\n    private onTagDeleted = async (tagName: string): Promise<void> => {\n        const assetUpdates = await this.props.actions.deleteProjectTag(this.props.project, tagName);\n        const selectedAsset = assetUpdates.find((am) => am.asset.id === this.state.selectedAsset.asset.id);\n\n        if (selectedAsset) {\n            this.setState({ selectedAsset });\n        }\n    }\n\n    private onCtrlTagClicked = (tag: ITag): void => {\n        const locked = this.state.lockedTags;\n        this.setState({\n            selectedTag: tag.name,\n            lockedTags: CanvasHelpers.toggleTag(locked, tag.name),\n        }, () => this.canvas.current.applyTag(tag.name));\n    }\n\n    private getTagFromKeyboardEvent = (event: KeyboardEvent): ITag => {\n        let key = parseInt(event.key, 10);\n        if (isNaN(key)) {\n            try {\n                key = parseInt(event.key.split(\"+\")[1], 10);\n            } catch (e) {\n                return;\n            }\n        }\n        let index: number;\n        const tags = this.props.project.tags;\n        if (key === 0 && tags.length >= 10) {\n            index = 9;\n        } else if (key < 10) {\n            index = key - 1;\n        }\n        if (index < tags.length) {\n            return tags[index];\n        }\n        return null;\n    }\n\n    /**\n     * Listens for {number key} and calls `onTagClicked` with tag corresponding to that number\n     * @param event KeyDown event\n     */\n    private handleTagHotKey = (event: KeyboardEvent): void => {\n        const tag = this.getTagFromKeyboardEvent(event);\n        if (tag) {\n            this.onTagClicked(tag);\n        }\n    }\n\n    private handleCtrlTagHotKey = (event: KeyboardEvent): void => {\n        const tag = this.getTagFromKeyboardEvent(event);\n        if (tag) {\n            this.onCtrlTagClicked(tag);\n        }\n    }\n\n    /**\n     * Raised when a child asset is selected on the Asset Preview\n     * ex) When a video is paused/seeked to on a video\n     */\n    private onChildAssetSelected = async (childAsset: IAsset) => {\n        if (this.state.selectedAsset && this.state.selectedAsset.asset.id !== childAsset.id) {\n            await this.selectAsset(childAsset);\n        }\n    }\n\n    /**\n     * Returns a value indicating whether the current asset is taggable\n     */\n    private isTaggableAssetType = (asset: IAsset): boolean => {\n        return asset.type !== AssetType.Unknown && asset.type !== AssetType.Video;\n    }\n\n    /**\n     * Raised when the selected asset has been changed.\n     * This can either be a parent or child asset\n     */\n    private onAssetMetadataChanged = async (assetMetadata: IAssetMetadata): Promise<void> => {\n        // If the asset contains any regions without tags, don't proceed.\n        const regionsWithoutTags = assetMetadata.regions.filter((region) => region.tags.length === 0);\n\n        if (regionsWithoutTags.length > 0) {\n            this.setState({ isValid: false });\n            return;\n        }\n\n        const initialState = assetMetadata.asset.state;\n\n        // The root asset can either be the actual asset being edited (ex: VideoFrame) or the top level / root\n        // asset selected from the side bar (image/video).\n        const rootAsset = { ...(assetMetadata.asset.parent || assetMetadata.asset) };\n\n        if (this.isTaggableAssetType(assetMetadata.asset)) {\n            assetMetadata.asset.state = assetMetadata.regions.length > 0 ? AssetState.Tagged : AssetState.Visited;\n        } else if (assetMetadata.asset.state === AssetState.NotVisited) {\n            assetMetadata.asset.state = AssetState.Visited;\n        }\n\n        // Update root asset if not already in the \"Tagged\" state\n        // This is primarily used in the case where a Video Frame is being edited.\n        // We want to ensure that in this case the root video asset state is accurately\n        // updated to match that state of the asset.\n        if (rootAsset.id === assetMetadata.asset.id) {\n            rootAsset.state = assetMetadata.asset.state;\n        } else {\n            const rootAssetMetadata = await this.props.actions.loadAssetMetadata(this.props.project, rootAsset);\n\n            if (rootAssetMetadata.asset.state !== AssetState.Tagged) {\n                rootAssetMetadata.asset.state = assetMetadata.asset.state;\n                await this.props.actions.saveAssetMetadata(this.props.project, rootAssetMetadata);\n            }\n\n            rootAsset.state = rootAssetMetadata.asset.state;\n        }\n\n        // Only update asset metadata if state changes or is different\n        if (initialState !== assetMetadata.asset.state || this.state.selectedAsset !== assetMetadata) {\n            await this.props.actions.saveAssetMetadata(this.props.project, assetMetadata);\n        }\n\n        await this.props.actions.saveProject(this.props.project);\n\n        const assetService = new AssetService(this.props.project);\n        const childAssets = assetService.getChildAssets(rootAsset);\n\n        // Find and update the root asset in the internal state\n        // This forces the root assets that are displayed in the sidebar to\n        // accurately show their correct state (not-visited, visited or tagged)\n        const assets = [...this.state.assets];\n        const assetIndex = assets.findIndex((asset) => asset.id === rootAsset.id);\n        if (assetIndex > -1) {\n            assets[assetIndex] = {\n                ...rootAsset,\n            };\n        }\n\n        this.setState({ childAssets, assets, isValid: true });\n    }\n\n    /**\n     * Raised when the asset binary has been painted onto the canvas tools rendering canvas\n     */\n    private onCanvasRendered = async (canvas: HTMLCanvasElement) => {\n        // When active learning auto-detect is enabled\n        // run predictions when asset changes\n        if (this.props.project.activeLearningSettings.autoDetect && !this.state.selectedAsset.asset.predicted) {\n            await this.predictRegions(canvas);\n        }\n    }\n\n    private onSelectedRegionsChanged = (selectedRegions: IRegion[]) => {\n        this.setState({ selectedRegions });\n    }\n\n    private onTagsChanged = async (tags) => {\n        const project = {\n            ...this.props.project,\n            tags,\n        };\n\n        await this.props.actions.saveProject(project);\n    }\n\n    private onLockedTagsChanged = (lockedTags: string[]) => {\n        this.setState({ lockedTags });\n    }\n\n    private onToolbarItemSelected = async (toolbarItem: ToolbarItem): Promise<void> => {\n        switch (toolbarItem.props.name) {\n            case ToolbarItemName.DrawRectangle:\n                this.setState({\n                    selectionMode: SelectionMode.RECT,\n                    editorMode: EditorMode.Rectangle,\n                });\n                break;\n            case ToolbarItemName.DrawPolygon:\n                this.setState({\n                    selectionMode: SelectionMode.POLYGON,\n                    editorMode: EditorMode.Polygon,\n                });\n                break;\n            case ToolbarItemName.CopyRectangle:\n                this.setState({\n                    selectionMode: SelectionMode.COPYRECT,\n                    editorMode: EditorMode.CopyRect,\n                });\n                break;\n            case ToolbarItemName.SelectCanvas:\n                this.setState({\n                    selectionMode: SelectionMode.NONE,\n                    editorMode: EditorMode.Select,\n                });\n                break;\n            case ToolbarItemName.PreviousAsset:\n                await this.goToRootAsset(-1);\n                break;\n            case ToolbarItemName.NextAsset:\n                await this.goToRootAsset(1);\n                break;\n            case ToolbarItemName.CopyRegions:\n                this.canvas.current.copyRegions();\n                break;\n            case ToolbarItemName.CutRegions:\n                this.canvas.current.cutRegions();\n                break;\n            case ToolbarItemName.PasteRegions:\n                this.canvas.current.pasteRegions();\n                break;\n            case ToolbarItemName.RemoveAllRegions:\n                this.canvas.current.confirmRemoveAllRegions();\n                break;\n            case ToolbarItemName.ActiveLearning:\n                await this.predictRegions();\n                break;\n        }\n    }\n\n    private predictRegions = async (canvas?: HTMLCanvasElement) => {\n        canvas = canvas || document.querySelector(\"canvas\");\n        if (!canvas) {\n            return;\n        }\n\n        // Load the configured ML model\n        if (!this.activeLearningService.isModelLoaded()) {\n            let toastId: number = null;\n            try {\n                toastId = toast.info(strings.activeLearning.messages.loadingModel, { autoClose: false });\n                await this.activeLearningService.ensureModelLoaded();\n            } catch (e) {\n                toast.error(strings.activeLearning.messages.errorLoadModel);\n                return;\n            } finally {\n                toast.dismiss(toastId);\n            }\n        }\n\n        // Predict and add regions to current asset\n        try {\n            const updatedAssetMetadata = await this.activeLearningService\n                .predictRegions(canvas, this.state.selectedAsset);\n\n            await this.onAssetMetadataChanged(updatedAssetMetadata);\n            this.setState({ selectedAsset: updatedAssetMetadata });\n        } catch (e) {\n            throw new AppError(ErrorCode.ActiveLearningPredictionError, \"Error predicting regions\");\n        }\n    }\n\n    /**\n     * Navigates to the previous / next root asset on the sidebar\n     * @param direction Number specifying asset navigation\n     */\n    private goToRootAsset = async (direction: number) => {\n        const selectedRootAsset = this.state.selectedAsset.asset.parent || this.state.selectedAsset.asset;\n        const currentIndex = this.state.assets\n            .findIndex((asset) => asset.id === selectedRootAsset.id);\n\n        if (direction > 0) {\n            await this.selectAsset(this.state.assets[Math.min(this.state.assets.length - 1, currentIndex + 1)]);\n        } else {\n            await this.selectAsset(this.state.assets[Math.max(0, currentIndex - 1)]);\n        }\n    }\n\n    private onBeforeAssetSelected = (): boolean => {\n        if (!this.state.isValid) {\n            this.setState({ showInvalidRegionWarning: true });\n        }\n\n        return this.state.isValid;\n    }\n\n    private selectAsset = async (asset: IAsset): Promise<void> => {\n        // Nothing to do if we are already on the same asset.\n        if (this.state.selectedAsset && this.state.selectedAsset.asset.id === asset.id) {\n            return;\n        }\n\n        if (!this.state.isValid) {\n            this.setState({ showInvalidRegionWarning: true });\n            return;\n        }\n\n        const assetMetadata = await this.props.actions.loadAssetMetadata(this.props.project, asset);\n\n        try {\n            if (!assetMetadata.asset.size) {\n                const assetProps = await HtmlFileReader.readAssetAttributes(asset);\n                assetMetadata.asset.size = { width: assetProps.width, height: assetProps.height };\n            }\n        } catch (err) {\n            console.warn(\"Error computing asset size\");\n        }\n\n        this.setState({\n            selectedAsset: assetMetadata,\n        }, async () => {\n            await this.onAssetMetadataChanged(assetMetadata);\n        });\n    }\n\n    private loadProjectAssets = async (): Promise<void> => {\n        if (this.loadingProjectAssets || this.state.assets.length > 0) {\n            return;\n        }\n\n        this.loadingProjectAssets = true;\n\n        // Get all root project assets\n        const rootProjectAssets = _.values(this.props.project.assets)\n            .filter((asset) => !asset.parent);\n\n        // Get all root assets from source asset provider\n        const sourceAssets = await this.props.actions.loadAssets(this.props.project);\n\n        // Merge and uniquify\n        const rootAssets = _(rootProjectAssets)\n            .concat(sourceAssets)\n            .uniqBy((asset) => asset.id)\n            .value();\n\n        const lastVisited = rootAssets.find((asset) => asset.id === this.props.project.lastVisitedAssetId);\n\n        this.setState({\n            assets: rootAssets,\n        }, async () => {\n            if (rootAssets.length > 0) {\n                await this.selectAsset(lastVisited ? lastVisited : rootAssets[0]);\n            }\n            this.loadingProjectAssets = false;\n        });\n    }\n\n    /**\n     * Updates the root asset list from the project assets\n     */\n    private updateRootAssets = () => {\n        const updatedAssets = [...this.state.assets];\n        updatedAssets.forEach((asset) => {\n            const projectAsset = this.props.project.assets[asset.id];\n            if (projectAsset) {\n                asset.state = projectAsset.state;\n            }\n        });\n\n        this.setState({ assets: updatedAssets });\n    }\n}\n","import React from \"react\";\r\nimport _ from \"lodash\";\r\nimport { ExportProviderFactory } from \"../../../../providers/export/exportProviderFactory\";\r\n\r\n/**\r\n * Properties for Export Provider Picker\r\n * @member onChange - Function to call on change of selected value\r\n * @member id - ID for HTML select element\r\n * @member value - Selected value in picker\r\n */\r\nexport interface IExportProviderPickerProps {\r\n    onChange: (value: string) => void;\r\n    id: string;\r\n    value: string;\r\n}\r\n\r\n/**\r\n * Creates HTML select object for selecting an asset or storage provider\r\n * @param props Properties for picker\r\n */\r\nexport default function ExportProviderPicker(props: IExportProviderPickerProps) {\r\n    const exportProviders = _.values(ExportProviderFactory.providers);\r\n\r\n    const allProviders = _([])\r\n        .concat(exportProviders)\r\n        .orderBy(\"displayName\")\r\n        .value();\r\n\r\n    function onChange(e) {\r\n        props.onChange(e.target.value);\r\n    }\r\n\r\n    return (\r\n        <select id={props.id}\r\n            className=\"form-control\"\r\n            value={props.value}\r\n            onChange={onChange}>\r\n            {\r\n                allProviders.map((provider) =>\r\n                    <option key={provider.name} value={provider.name}>\r\n                        {provider.displayName}\r\n                    </option>)\r\n            }\r\n        </select>\r\n    );\r\n}\r\n","import React from \"react\";\nimport RcSlider from \"rc-slider\";\nimport \"rc-slider/assets/index.css\";\n\nexport interface ISliderProps {\n    value: number;\n    min?: number;\n    max?: number;\n    onChange: (value) => void;\n    disabled?: boolean;\n}\n\n/**\n * Slider component to select a value between a min / max range\n */\nexport class Slider extends React.Component<ISliderProps> {\n    public render() {\n        return (\n            <div className=\"slider\">\n                <span className=\"slider-value\">{this.props.value}</span>\n                <RcSlider {...this.props} />\n            </div>\n        );\n    }\n}\n","import React from \"react\";\nimport _ from \"lodash\";\nimport Form, { Widget, FormValidation, IChangeEvent, ISubmitEvent } from \"react-jsonschema-form\";\nimport { getDefaultFormState } from \"react-jsonschema-form/lib/utils\";\nimport { addLocValues, strings } from \"../../../../common/strings\";\nimport { IExportFormat, IExportProviderOptions } from \"../../../../models/applicationState\";\nimport { ExportProviderFactory } from \"../../../../providers/export/exportProviderFactory\";\nimport ExportProviderPicker from \"../../common/exportProviderPicker/exportProviderPicker\";\nimport CustomFieldTemplate from \"../../common/customField/customFieldTemplate\";\nimport ExternalPicker from \"../../common/externalPicker/externalPicker\";\nimport { ProtectedInput } from \"../../common/protectedInput/protectedInput\";\nimport Checkbox from \"rc-checkbox\";\nimport \"rc-checkbox/assets/index.css\";\nimport { CustomWidget } from \"../../common/customField/customField\";\nimport { Slider } from \"../../common/slider/slider\";\n\n// tslint:disable-next-line:no-var-requires\nconst formSchema = addLocValues(require(\"./exportForm.json\"));\n// tslint:disable-next-line:no-var-requires\nconst uiSchema = addLocValues(require(\"./exportForm.ui.json\"));\n\n/**\n * Properties for Export Form\n * @member settings - Current settings for Export\n * @member onSubmit - Function to call on form submission\n * @member onCancel - Function to call on form cancellation\n */\nexport interface IExportFormProps extends React.Props<ExportForm> {\n    settings: IExportFormat;\n    onSubmit: (exportFormat: IExportFormat) => void;\n    onCancel?: () => void;\n}\n\n/**\n * State for Export Form\n * @member classNames - Class names for HTML form component\n * @member providerName - Name of export provider\n * @member formSchema - JSON Form Schema for export form\n * @member uiSchema - JSON Form UI Schema for export form\n * @member formData - Current state of form data as Export Format\n */\nexport interface IExportFormState {\n    classNames: string[];\n    providerName: string;\n    formSchema: any;\n    uiSchema: any;\n    formData: IExportFormat;\n}\n\n/**\n * @name - Export Form\n * @description - Form to view/edit settings for exporting of project\n */\nexport default class ExportForm extends React.Component<IExportFormProps, IExportFormState> {\n    public state: IExportFormState = {\n        classNames: [\"needs-validation\"],\n        providerName: this.props.settings ? this.props.settings.providerType : null,\n        formSchema: { ...formSchema },\n        uiSchema: { ...uiSchema },\n        formData: this.props.settings,\n    };\n\n    private widgets = {\n        externalPicker: (ExternalPicker as any) as Widget,\n        exportProviderPicker: (ExportProviderPicker as any) as Widget,\n        protectedInput: (ProtectedInput as any) as Widget,\n        slider: (Slider as any) as Widget,\n        checkbox: CustomWidget(Checkbox, (props) => ({\n            checked: props.value,\n            onChange: (value) => props.onChange(value.target.checked),\n            disabled: props.disabled,\n        })),\n    };\n\n    public componentDidMount() {\n        if (this.props.settings) {\n            this.bindForm(this.props.settings);\n        }\n    }\n\n    public componentDidUpdate(prevProps: IExportFormProps) {\n        if (prevProps.settings !== this.props.settings) {\n            this.bindForm(this.props.settings);\n        }\n    }\n\n    public render() {\n        return (\n            <Form\n                className={this.state.classNames.join(\" \")}\n                showErrorList={false}\n                liveValidate={true}\n                noHtml5Validate={true}\n                FieldTemplate={CustomFieldTemplate}\n                validate={this.onFormValidate}\n                widgets={this.widgets}\n                formContext={this.state.formData}\n                schema={this.state.formSchema}\n                uiSchema={this.state.uiSchema}\n                formData={this.state.formData}\n                onChange={this.onFormChange}\n                onSubmit={this.onFormSubmit}>\n                <div>\n                    <button className=\"btn btn-success mr-1\" type=\"submit\">{strings.export.saveSettings}</button>\n                    <button className=\"btn btn-secondary btn-cancel\"\n                        type=\"button\"\n                        onClick={this.onFormCancel}>{strings.common.cancel}</button>\n                </div>\n            </Form>\n        );\n    }\n\n    private onFormChange = (args: IChangeEvent<IExportFormat>) => {\n        const providerType = args.formData.providerType;\n\n        if (providerType !== this.state.providerName) {\n            this.bindForm(args.formData, true);\n        } else {\n            this.bindForm(args.formData, false);\n        }\n    }\n\n    private onFormValidate = (exportFormat: IExportFormat, errors: FormValidation): FormValidation => {\n        if (this.state.classNames.indexOf(\"was-validated\") === -1) {\n            this.setState({\n                classNames: [...this.state.classNames, \"was-validated\"],\n            });\n        }\n\n        return errors;\n    }\n\n    private onFormSubmit = (args: ISubmitEvent<IExportFormat>): void => {\n        this.props.onSubmit(args.formData);\n    }\n\n    private onFormCancel = (): void => {\n        if (this.props.onCancel) {\n            this.props.onCancel();\n        }\n    }\n\n    private bindForm = (exportFormat: IExportFormat, resetProviderOptions: boolean = false): void => {\n        // If no provider type was specified on bind, pick the default provider\n        const providerType = (exportFormat && exportFormat.providerType)\n            ? exportFormat.providerType\n            : ExportProviderFactory.defaultProvider.name;\n\n        let newFormSchema: any = this.state.formSchema;\n        let newUiSchema: any = this.state.uiSchema;\n\n        if (providerType) {\n            const providerSchema = addLocValues(require(`../../../../providers/export/${providerType}.json`));\n            const providerUiSchema = require(`../../../../providers/export/${providerType}.ui.json`);\n\n            newFormSchema = { ...formSchema };\n            newFormSchema.properties[\"providerOptions\"] = providerSchema;\n\n            newUiSchema = { ...uiSchema };\n            newUiSchema[\"providerOptions\"] = providerUiSchema;\n        }\n\n        const formData = { ...exportFormat };\n        const providerOptions = resetProviderOptions ? {} : exportFormat.providerOptions;\n        const providerDefaults = getDefaultFormState(newFormSchema.properties.providerOptions, providerOptions);\n\n        formData.providerType = providerType;\n        formData.providerOptions = providerDefaults as IExportProviderOptions;\n\n        this.setState({\n            providerName: providerType,\n            formSchema: newFormSchema,\n            uiSchema: newUiSchema,\n            formData,\n        });\n    }\n}\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { bindActionCreators } from \"redux\";\nimport { RouteComponentProps } from \"react-router-dom\";\nimport IProjectActions, * as projectActions from \"../../../../redux/actions/projectActions\";\nimport ExportForm from \"./exportForm\";\nimport { IProject, IApplicationState, IExportFormat } from \"../../../../models/applicationState\";\nimport { strings } from \"../../../../common/strings\";\nimport { ExportAssetState } from \"../../../../providers/export/exportProvider\";\nimport { toast } from \"react-toastify\";\n\n/**\n * Properties for Export Page\n * @member project - Project being edited\n * @member recentProjects - Array of projects recently viewed/edited\n * @member actions - Project actions\n */\nexport interface IExportPageProps extends RouteComponentProps, React.Props<ExportPage> {\n    project: IProject;\n    recentProjects: IProject[];\n    actions: IProjectActions;\n}\n\nfunction mapStateToProps(state: IApplicationState) {\n    return {\n        project: state.currentProject,\n        recentProjects: state.recentProjects,\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators(projectActions, dispatch),\n    };\n}\n\n/**\n * @name - Export Page\n * @description - Page for adding/editing/removing export configurations\n */\n@connect(mapStateToProps, mapDispatchToProps)\nexport default class ExportPage extends React.Component<IExportPageProps> {\n    private emptyExportFormat: IExportFormat = {\n        providerType: \"\",\n        providerOptions: {\n            assetState: ExportAssetState.All,\n        },\n    };\n\n    constructor(props, context) {\n        super(props, context);\n\n        const projectId = this.props.match.params[\"projectId\"];\n        if (!this.props.project && projectId) {\n            const project = this.props.recentProjects.find((project) => project.id === projectId);\n            this.props.actions.loadProject(project);\n        }\n\n        this.onFormSubmit = this.onFormSubmit.bind(this);\n        this.onFormCancel = this.onFormCancel.bind(this);\n    }\n\n    public render() {\n        const exportFormat = this.props.project && this.props.project.exportFormat\n            ? this.props.project.exportFormat\n            : { ...this.emptyExportFormat };\n\n        return (\n            <div className=\"m-3\">\n                <h3>\n                    <i className=\"fas fa-sliders-h fa-1x\"></i>\n                    <span className=\"px-2\">\n                        {strings.export.settings}\n                    </span>\n                </h3>\n                <div className=\"m-3\">\n                    <ExportForm\n                        settings={exportFormat}\n                        onSubmit={this.onFormSubmit}\n                        onCancel={this.onFormCancel} />\n                </div>\n            </div>\n        );\n    }\n\n    private onFormSubmit = async (exportFormat: IExportFormat) => {\n        const projectToUpdate: IProject = {\n            ...this.props.project,\n            exportFormat,\n        };\n\n        await this.props.actions.saveProject(projectToUpdate);\n        toast.success(strings.export.messages.saveSuccess);\n        this.props.history.goBack();\n    }\n\n    private onFormCancel() {\n        this.props.history.goBack();\n    }\n}\n","import React from \"react\";\nimport { IConnection } from \"../../../../models/applicationState\";\nimport { RouteComponentProps, withRouter } from \"react-router-dom\";\n\n/**\n * Properties for Connection Picker\n * @member id - ID for HTML select element\n * @member value - Selected value of picker\n * @member connections - Array of connections for choosing\n * @member onChange - Function to call on change of selection\n */\nexport interface IConnectionPickerProps extends RouteComponentProps {\n    id?: string;\n    value: any;\n    connections: IConnection[];\n    onChange: (value) => void;\n}\n\n/**\n * State for Connection Picker\n * @member value - Selected value\n */\nexport interface IConnectionPickerState {\n    value: any;\n}\n\n/**\n * @name - Connection Picker\n * @description - Enhanced dropdown for selecting a Connection\n */\nexport class ConnectionPicker extends React.Component<IConnectionPickerProps, IConnectionPickerState> {\n    constructor(props, context) {\n        super(props, context);\n        this.state = {\n            value: this.props.value,\n        };\n\n        this.onChange = this.onChange.bind(this);\n    }\n\n    public componentDidUpdate(prevProps) {\n        if (prevProps.value !== this.props.value) {\n            this.setState({\n                value: this.props.value || null,\n            });\n        }\n    }\n\n    public render() {\n        const { id, connections } = this.props;\n        const selectedValue = this.state.value ? this.state.value.id : \"\";\n\n        return (\n            <div className=\"input-group\">\n                <select id={id} value={selectedValue} onChange={this.onChange} className=\"form-control\">\n                    <option>Select Connection</option>\n                    {connections.map((connection) =>\n                        <option\n                            className=\"connection-option\"\n                            key={connection.id}\n                            value={connection.id}>{connection.name}\n                        </option>)\n                    }\n                </select>\n                <div className=\"input-group-append\">\n                    <button className=\"btn btn-primary add-connection\"\n                        type=\"button\"\n                        onClick={this.createConnection}>Add Connection</button>\n                </div>\n            </div>\n        );\n    }\n\n    private onChange = (e) => {\n        const selectedConnection = this.props.connections\n            .find((connection) => connection.id === e.target.value) || {};\n\n        this.setState({\n            value: selectedConnection,\n        }, () => this.props.onChange(selectedConnection));\n    }\n\n    private createConnection = () => {\n        this.props.history.push(\"/connections/create\");\n    }\n}\n\nexport const ConnectionPickerWithRouter = withRouter<IConnectionPickerProps>(ConnectionPicker);\n","import React, { SyntheticEvent } from \"react\";\nimport { ISecurityToken } from \"../../../../models/applicationState\";\n\n/**\n * Security Token Picker Properties\n * @member id - The id to bind to the input element\n * @member value - The value to bind to the input element\n * @member securityTokens - The list of security tokens to display\n * @member onChange - The event handler to call when the input value changes\n */\nexport interface ISecurityTokenPickerProps {\n    id?: string;\n    value: string;\n    securityTokens: ISecurityToken[];\n    onChange: (value: string) => void;\n}\n\n/**\n * Security Token Picker\n * @description - Used to display a list of security tokens\n */\nexport class SecurityTokenPicker extends React.Component<ISecurityTokenPickerProps> {\n    constructor(props) {\n        super(props);\n\n        this.onChange = this.onChange.bind(this);\n    }\n\n    public render() {\n        return (\n            <select id={this.props.id}\n                className=\"form-control\"\n                value={this.props.value}\n                onChange={this.onChange}>\n                <option value=\"\">Generate New Security Token</option>\n                {this.props.securityTokens.map((item) => <option key={item.key} value={item.name}>{item.name}</option>)}\n            </select>\n        );\n    }\n\n    private onChange(e: SyntheticEvent) {\n        const inputElement = e.target as HTMLSelectElement;\n        this.props.onChange(inputElement.value ? inputElement.value : undefined);\n    }\n}\n","import React from \"react\";\nimport Form, { FormValidation, ISubmitEvent, IChangeEvent, Widget } from \"react-jsonschema-form\";\nimport { ITagsInputProps, TagEditorModal, TagsInput } from \"vott-react\";\nimport { addLocValues, strings } from \"../../../../common/strings\";\nimport { IConnection, IProject, ITag, IAppSettings } from \"../../../../models/applicationState\";\nimport { StorageProviderFactory } from \"../../../../providers/storage/storageProviderFactory\";\nimport { ConnectionPickerWithRouter } from \"../../common/connectionPicker/connectionPicker\";\nimport { CustomField } from \"../../common/customField/customField\";\nimport CustomFieldTemplate from \"../../common/customField/customFieldTemplate\";\nimport { ISecurityTokenPickerProps, SecurityTokenPicker } from \"../../common/securityTokenPicker/securityTokenPicker\";\nimport \"vott-react/dist/css/tagsInput.css\";\nimport { IConnectionProviderPickerProps } from \"../../common/connectionProviderPicker/connectionProviderPicker\";\nimport LocalFolderPicker from \"../../common/localFolderPicker/localFolderPicker\";\n\n// tslint:disable-next-line:no-var-requires\nconst formSchema = addLocValues(require(\"./projectForm.json\"));\n// tslint:disable-next-line:no-var-requires\nconst uiSchema = addLocValues(require(\"./projectForm.ui.json\"));\n\n/**\n * Required properties for Project Settings form\n * @member project - Current project to fill form\n * @member connections - Array of connections to use in project\n * @member onSubmit - Function to call on form submission\n * @member onCancel - Function to call on form cancellation\n */\nexport interface IProjectFormProps extends React.Props<ProjectForm> {\n    project: IProject;\n    connections: IConnection[];\n    appSettings: IAppSettings;\n    onSubmit: (project: IProject) => void;\n    onChange?: (project: IProject) => void;\n    onCancel?: () => void;\n}\n\n/**\n * Project Form State\n * @member classNames - Class names for HTML form element\n * @member formData - data containing details of project\n * @member formSchema - json schema of form\n * @member uiSchema - json UI schema of form\n */\nexport interface IProjectFormState {\n    classNames: string[];\n    formData: IProject;\n    formSchema: any;\n    uiSchema: any;\n}\n\n/**\n * @name - Project Form\n * @description - Form for editing or creating VoTT projects\n */\nexport default class ProjectForm extends React.Component<IProjectFormProps, IProjectFormState> {\n    private widgets = {\n        localFolderPicker: (LocalFolderPicker as any) as Widget,\n    };\n\n    private tagsInput: React.RefObject<TagsInput>;\n    private tagEditorModal: React.RefObject<TagEditorModal>;\n\n    constructor(props, context) {\n        super(props, context);\n        this.state = {\n            classNames: [\"needs-validation\"],\n            uiSchema: { ...uiSchema },\n            formSchema: { ...formSchema },\n            formData: {\n                ...this.props.project,\n            },\n        };\n        this.tagsInput = React.createRef<TagsInput>();\n        this.tagEditorModal = React.createRef<TagEditorModal>();\n\n        this.onFormSubmit = this.onFormSubmit.bind(this);\n        this.onFormCancel = this.onFormCancel.bind(this);\n        this.onFormValidate = this.onFormValidate.bind(this);\n        this.onTagShiftClick = this.onTagShiftClick.bind(this);\n        this.onTagModalOk = this.onTagModalOk.bind(this);\n    }\n    /**\n     * Updates state if project from properties has changed\n     * @param prevProps - previously set properties\n     */\n    public componentDidUpdate(prevProps: IProjectFormProps) {\n        if (prevProps.project !== this.props.project) {\n            this.setState({\n                formData: { ...this.props.project },\n            });\n        }\n    }\n\n    public render() {\n        return (\n            <Form\n                className={this.state.classNames.join(\" \")}\n                showErrorList={false}\n                liveValidate={true}\n                noHtml5Validate={true}\n                FieldTemplate={CustomFieldTemplate}\n                validate={this.onFormValidate}\n                fields={this.fields()}\n                widgets={this.widgets}\n                schema={this.state.formSchema}\n                uiSchema={this.state.uiSchema}\n                formData={this.state.formData}\n                onChange={this.onFormChange}\n                onSubmit={this.onFormSubmit}>\n                <div>\n                    <button className=\"btn btn-success mr-1\" type=\"submit\">{strings.projectSettings.save}</button>\n                    <button className=\"btn btn-secondary btn-cancel\"\n                        type=\"button\"\n                        onClick={this.onFormCancel}>{strings.common.cancel}</button>\n                </div>\n                <TagEditorModal\n                    ref={this.tagEditorModal}\n                    onOk={this.onTagModalOk}\n\n                    tagNameText={strings.tags.modal.name}\n                    tagColorText={strings.tags.modal.color}\n                    saveText={strings.common.save}\n                    cancelText={strings.common.cancel}\n                />\n            </Form>\n        );\n    }\n\n    private fields() {\n        return {\n            securityToken: CustomField<ISecurityTokenPickerProps>(SecurityTokenPicker, (props) => ({\n                id: props.idSchema.$id,\n                schema: props.schema,\n                value: props.formData,\n                securityTokens: this.props.appSettings.securityTokens,\n                onChange: props.onChange,\n            })),\n            sourceConnection: CustomField<IConnectionProviderPickerProps>(ConnectionPickerWithRouter, (props) => {\n                return {\n                    id: props.idSchema.$id,\n                    value: props.formData,\n                    connections: this.props.connections,\n                    onChange: props.onChange,\n                };\n            }),\n            targetConnection: CustomField<IConnectionProviderPickerProps>(ConnectionPickerWithRouter, (props) => {\n                const targetConnections = this.props.connections\n                    .filter((connection) => StorageProviderFactory.isRegistered(connection.providerType));\n\n                return {\n                    id: props.idSchema.$id,\n                    value: props.formData,\n                    connections: targetConnections,\n                    onChange: props.onChange,\n                };\n            }),\n            tagsInput: CustomField<ITagsInputProps>(TagsInput, (props) => {\n                return {\n                    tags: props.formData,\n                    onChange: props.onChange,\n                    placeHolder: strings.tags.placeholder,\n                    onShiftTagClick: this.onTagShiftClick,\n                    ref: this.tagsInput,\n                };\n            }),\n        };\n    }\n\n    private onTagShiftClick(tag: ITag) {\n        this.tagEditorModal.current.open(tag);\n    }\n\n    private onTagModalOk(oldTag: ITag, newTag: ITag) {\n        this.tagsInput.current.updateTag(oldTag, newTag);\n        this.tagEditorModal.current.close();\n    }\n\n    private onFormValidate(project: IProject, errors: FormValidation) {\n        if (Object.keys(project.sourceConnection).length === 0) {\n            errors.sourceConnection.addError(\"is a required property\");\n        }\n\n        if (Object.keys(project.targetConnection).length === 0) {\n            errors.targetConnection.addError(\"is a required property\");\n        }\n\n        if (this.state.classNames.indexOf(\"was-validated\") === -1) {\n            this.setState({\n                classNames: [...this.state.classNames, \"was-validated\"],\n            });\n        }\n\n        return errors;\n    }\n\n    private onFormChange = (changeEvent: IChangeEvent<IProject>) => {\n        if (this.props.onChange) {\n            this.props.onChange(changeEvent.formData);\n        }\n    }\n\n    private onFormSubmit(args: ISubmitEvent<IProject>) {\n        const project: IProject = {\n            ...args.formData,\n        };\n        this.props.onSubmit(project);\n    }\n\n    private onFormCancel() {\n        if (this.props.onCancel) {\n            this.props.onCancel();\n        }\n    }\n}\n","import React from \"react\";\nimport _ from \"lodash\";\nimport {\n    AssetState, IAsset, IAssetMetadata,\n    IProject, IRegion, ITag, IPoint, AssetType,\n} from \"../../../../models/applicationState\";\nimport { AssetService } from \"../../../../services/assetService\";\nimport { strings, interpolate } from \"../../../../common/strings\";\nimport {\n    RadialChart, XYPlot, ArcSeries, Sunburst, Hint, DiscreteColorLegend,\n    HorizontalGridLines, XAxis, YAxis, VerticalBarSeries,\n} from \"react-vis\";\nimport \"react-vis/dist/styles/radial-chart.scss\";\nimport \"react-vis/dist/styles/plot.scss\";\nimport \"./projectSettingsPage.scss\";\n\n/**\n * Required properties for Project Metrics\n * @member project - Current project to fill metrics table\n */\nexport interface IProjectMetricsProps {\n    project: IProject;\n}\n\nexport interface IProjectMetricsState {\n    loading: boolean;\n    hoveredCell: any;\n    sourceAssets: IAsset[];\n    projectAssetsMetadata: IAssetMetadata[];\n}\n\n/**\n * @name - Project Form\n * @description -\n */\nexport default class ProjectMetrics extends React.Component<IProjectMetricsProps, IProjectMetricsState> {\n    public state = {\n        loading: true,\n        hoveredCell: null,\n        sourceAssets: [],\n        projectAssetsMetadata: [],\n    };\n\n    public async componentDidMount() {\n        this.setState({\n            loading: true,\n        });\n\n        await this.getAssetsAndMetadata();\n        window.addEventListener(\"resize\", this.refresh);\n    }\n\n    public componentWillUnmount() {\n        window.removeEventListener(\"resize\", this.refresh);\n    }\n\n    public render() {\n        return (\n            <div className=\"condensed-list\">\n                <h6 className=\"condensed-list-header bg-darker-2 p-2\">\n                    <i className=\"fas fa-chart-bar\" />\n                    <span>{strings.projectMetrics.title}</span>\n                </h6>\n                <div className=\"condensed-list-body\">\n                    {this.state.loading &&\n                        <div className=\"loading\">\n                            <i className=\"fas fa-circle-notch fa-spin fa-2x\" />\n                        </div>\n                    }\n                    {!this.state.loading &&\n                        this.renderMetrics()\n                    }\n                </div>\n            </div>\n        );\n    }\n\n    private refresh = () => {\n        this.forceUpdate();\n    }\n\n    private buildValue(hoveredCell) {\n        const { radius, angle, angle0 } = hoveredCell;\n        const truedAngle = (angle + angle0) / 2;\n        return {\n            x: radius * Math.cos(truedAngle),\n            y: radius * Math.sin(truedAngle),\n        };\n    }\n\n    private renderMetrics() {\n        const sourceAssetCount = this.getSourceAssetCount();\n        const taggedAssetCount = this.getTaggedAssetCount();\n        const visitedAssetCount = this.getVisitedAssetsCount();\n        const assetChartSize = window.innerWidth >= 1920 ? 250 : 200;\n\n        const assetChartData = {\n            animation: true,\n            title: \"asset-count\",\n            children: [\n                {\n                    title: interpolate(strings.projectMetrics.visitedAssets, { count: visitedAssetCount }),\n                    children: [\n                        {\n                            title: interpolate(strings.projectMetrics.taggedAssets, { count: taggedAssetCount }),\n                            bigness: 1,\n                            children: [],\n                            clr: \"#70c400\",\n                            size: taggedAssetCount,\n                            dontRotateLabel: true,\n                        },\n                        {\n                            bigness: 1,\n                            children: [],\n                            clr: \"#ff8c00\",\n                            title: interpolate(strings.projectMetrics.nonTaggedAssets,\n                                { count: visitedAssetCount - taggedAssetCount }),\n                            size: visitedAssetCount - taggedAssetCount,\n                            dontRotateLabel: true,\n                        },\n                    ],\n                    clr: \"#4894fe\",\n                    dontRotateLabel: true,\n                },\n                {\n                    title: interpolate(strings.projectMetrics.nonVisitedAssets,\n                        { count: sourceAssetCount - visitedAssetCount }),\n                    bigness: 1,\n                    children: [],\n                    clr: \"#e81123\",\n                    dontRotateLabel: true,\n                    labelStyle: {\n                        fontSize: 15,\n                        fontWeight: \"bold\",\n                    },\n                    size: sourceAssetCount - visitedAssetCount,\n                },\n            ],\n        };\n\n        const tagChartData = [];\n        this.getTagsCounts().forEach((value) => {\n            tagChartData.push({\n                x: value.tag.name,\n                y: value.count,\n                color: value.tag.color,\n            });\n        });\n\n        const { hoveredCell } = this.state;\n\n        const legend = [\n            {\n                title: interpolate(strings.projectMetrics.visitedAssets,\n                    { count: visitedAssetCount }),\n                color: \"#4894fe\",\n            },\n            {\n                title: interpolate(strings.projectMetrics.nonVisitedAssets,\n                    { count: sourceAssetCount - visitedAssetCount }),\n                color: \"#e81123\",\n            },\n            {\n                title: interpolate(strings.projectMetrics.taggedAssets, { count: taggedAssetCount }),\n                color: \"#70c400\",\n            },\n            {\n                title: interpolate(strings.projectMetrics.nonTaggedAssets,\n                    { count: visitedAssetCount - taggedAssetCount }),\n                color: \"#ff8c00\",\n            }];\n\n        return (\n            <div className=\"m-3\">\n                <h4>{strings.projectMetrics.assetsSectionTitle}</h4>\n                <p className=\"my-1\">\n                    {strings.projectMetrics.totalAssetCount}:\n                        <strong className=\"px-1 metric-total-asset-count\">{sourceAssetCount}</strong><br />\n                </p>\n                <div className=\"asset-chart\">\n                    <Sunburst\n                        data={assetChartData}\n                        style={{ stroke: \"#fff\" }}\n                        onValueMouseOver={(v) =>\n                            this.setState({ hoveredCell: v.x && v.y ? v : null })\n                        }\n                        onValueMouseOut={(v) => this.setState({ hoveredCell: null })}\n                        height={assetChartSize}\n                        margin={{ top: 50, bottom: 50, left: 50, right: 50 }}\n                        getLabel={(d) => d.name}\n                        getSize={(d) => d.size}\n                        getColor={(d) => d.clr}\n                        width={assetChartSize}\n                        padAngle={() => 0.05}\n                        hideRootNode={true}\n                    >\n                        {hoveredCell ? (\n                            <Hint value={this.buildValue(hoveredCell)}>\n                                <div className=\"hint-content\">\n                                    <div className=\"hint-content-box\" style={{ background: hoveredCell.clr }} />\n                                    <span className=\"px-2\">{hoveredCell.title}</span>\n                                </div>\n                            </Hint>\n                        ) : null}\n                    </Sunburst>\n                    <DiscreteColorLegend items={legend} />\n                </div>\n                <div className=\"my-4\">\n                    <h4>{strings.projectMetrics.tagsSectionTitle}</h4>\n                    <p className=\"my-1\">\n                        {strings.projectMetrics.totalTagCount}:\n                        <strong className=\"px-1 metric-total-tag-count\">{this.props.project.tags.length}</strong>\n                    </p>\n                    <p className=\"my-1\">\n                        {strings.projectMetrics.totalRegionCount}:\n                        <strong className=\"px-1 metric-total-region-count\">{this.getRegionsCount()}</strong>\n                    </p>\n                    <p className=\"my-1\">\n                        {strings.projectMetrics.avgTagCountPerAsset}:\n                        <strong className=\"px-1 metric-avg-tag-count\">{this.getAverageTagCount()}</strong>\n                    </p>\n                    <XYPlot className=\"tag-chart\"\n                        margin={{ bottom: 150 }}\n                        xType=\"ordinal\"\n                        colorType=\"literal\"\n                        width={300}\n                        height={400}>\n                        <HorizontalGridLines />\n                        <XAxis tickLabelAngle={-45} />\n                        <YAxis />\n                        <VerticalBarSeries\n                            data={tagChartData}\n                        />\n                    </XYPlot>\n                </div>\n            </div>\n        );\n    }\n\n    private async getAssetsAndMetadata() {\n        const assetService = new AssetService(this.props.project);\n        const sourceAssets = await assetService.getAssets();\n\n        const assetsMap = this.props.project.assets;\n        const assets = _.values(assetsMap);\n        const projectAssetsMetadata = await assets.mapAsync((asset) => assetService.getAssetMetadata(asset));\n\n        this.setState({\n            loading: false,\n            sourceAssets,\n            projectAssetsMetadata,\n        });\n    }\n\n    /**\n     * Count the number of tagged images or video frames\n     */\n    private getTaggedAssetCount = () => {\n        const metadata = this.state.projectAssetsMetadata;\n\n        const taggedAssets = _.filter(metadata,\n            (m) => {\n                // ignore video asset root container\n                return m.asset.state === AssetState.Tagged && m.regions.length > 0;\n            });\n\n        return taggedAssets.length;\n    }\n\n    /**\n     * Count the avg number of tags per image or video frame\n     */\n    private getAverageTagCount = () => {\n        const taggedAssetCount = this.getTaggedAssetCount();\n\n        if (taggedAssetCount === 0) {\n            return 0;\n        }\n\n        const tags = this.getAllTagReferences();\n        return (tags.length / taggedAssetCount).toFixed(2);\n    }\n\n    /**\n     * The number of visited image or video frames\n     */\n    private getVisitedAssetsCount = () => {\n        const metadata = this.state.projectAssetsMetadata;\n        const visitedAssets = _.filter(metadata, (m) => {\n            return m.asset.state === AssetState.Visited || m.asset.state === AssetState.Tagged;\n        });\n\n        return visitedAssets.length;\n    }\n\n    /**\n     * Total regions drawn on all assets\n     */\n    private getRegionsCount = () => {\n        const regions = this.getRegions();\n        return regions.length;\n    }\n\n    /**\n     * Total number of source assets in the project\n     *   Note: video frames are not counted, only the video container\n     */\n    private getSourceAssetCount = () => {\n        const assets = this.state.projectAssetsMetadata.map((e) => e.asset.name);\n        const projectAssetSet = new Set(this.state.sourceAssets.map((e) => e.name).concat(assets));\n\n        return projectAssetSet.size;\n    }\n\n    /**\n     * a map of asset count per tag\n     */\n    private getTagsCounts = (): Map<string, { tag: ITag, count: number }> => {\n        const projectTags = _.keyBy(this.props.project.tags, (tag) => tag.name);\n        const tagReferences = this.getAllTagReferences();\n\n        const map = new Map<string, { tag: ITag, count: number }>();\n        tagReferences.forEach((t) => {\n            const projectTag = projectTags[t];\n            if (!projectTag) {\n                return;\n            }\n\n            const tagMetric = map.get(t) || { tag: projectTag, count: 0 };\n            tagMetric.count++;\n            map.set(t, tagMetric);\n        });\n\n        this.props.project.tags.forEach((tag) => {\n            if (!map.get(tag.name)) {\n                map.set(tag.name, { tag, count: 0 });\n            }\n        });\n\n        return map;\n    }\n\n    /**\n     * retrieve the list of regions drawn\n     */\n    private getRegions = (): IRegion[] => {\n        const assetsMetadata = this.state.projectAssetsMetadata;\n\n        // find all assets with non-zero regions, extract regions\n        const regions = [];\n        assetsMetadata.forEach((m) => {\n            if (m.regions.length > 0) {\n                regions.push((m.regions));\n            }\n        });\n\n        return _.flatten(regions);\n    }\n\n    /**\n     * retrieve the list of tags assigned\n     */\n    private getAllTagReferences = (): string[] => {\n        const regions = this.getRegions();\n\n        const tags = [];\n        regions.forEach((r) => {\n            tags.push(r.tags);\n        });\n\n        return _.flatten<string>(tags);\n    }\n}\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { bindActionCreators } from \"redux\";\nimport { RouteComponentProps } from \"react-router-dom\";\nimport ProjectForm from \"./projectForm\";\nimport { strings, interpolate } from \"../../../../common/strings\";\nimport IProjectActions, * as projectActions from \"../../../../redux/actions/projectActions\";\nimport { IApplicationState, IProject, IConnection, IAppSettings } from \"../../../../models/applicationState\";\nimport IApplicationActions, * as applicationActions from \"../../../../redux/actions/applicationActions\";\nimport { toast } from \"react-toastify\";\nimport \"./projectSettingsPage.scss\";\nimport ProjectMetrics from \"./projectMetrics\";\n\n/**\n * Properties for Project Settings Page\n * @member project - Project being edited\n * @member recentProjects - Array of projects recently viewed/edited\n * @member actions - Project actions\n * @member connections - Array of connections available for projects\n */\nexport interface IProjectSettingsPageProps extends RouteComponentProps, React.Props<ProjectSettingsPage> {\n    project: IProject;\n    recentProjects: IProject[];\n    projectActions: IProjectActions;\n    applicationActions: IApplicationActions;\n    connections: IConnection[];\n    appSettings: IAppSettings;\n}\n\nexport interface IProjectSettingsPageState {\n    project: IProject;\n}\n\nfunction mapStateToProps(state: IApplicationState) {\n    return {\n        project: state.currentProject,\n        connections: state.connections,\n        recentProjects: state.recentProjects,\n        appSettings: state.appSettings,\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        projectActions: bindActionCreators(projectActions, dispatch),\n        applicationActions: bindActionCreators(applicationActions, dispatch),\n    };\n}\n\nconst projectFormTempKey = \"projectForm\";\n\n/**\n * @name - Project Settings Page\n * @description - Page for adding/editing/removing projects\n */\n@connect(mapStateToProps, mapDispatchToProps)\nexport default class ProjectSettingsPage extends React.Component<IProjectSettingsPageProps, IProjectSettingsPageState> {\n    public state: IProjectSettingsPageState = {\n        project: this.props.project,\n    };\n\n    public async componentDidMount() {\n        const projectId = this.props.match.params[\"projectId\"];\n        // If we are creating a new project check to see if there is a partial\n        // project already created in local storage\n        if (this.props.match.url === \"/projects/create\") {\n            const projectJson = localStorage.getItem(projectFormTempKey);\n            if (projectJson) {\n                this.setState({ project: JSON.parse(projectJson) });\n            }\n        } else if (!this.props.project && projectId) {\n            const projectToLoad = this.props.recentProjects.find((project) => project.id === projectId);\n            if (projectToLoad) {\n                await this.props.applicationActions.ensureSecurityToken(projectToLoad);\n                await this.props.projectActions.loadProject(projectToLoad);\n            }\n        }\n    }\n\n    public componentDidUpdate(prevProps: Readonly<IProjectSettingsPageProps>) {\n        if (prevProps.project !== this.props.project) {\n            this.setState({ project: this.props.project });\n        }\n    }\n\n    public render() {\n        return (\n            <div className=\"project-settings-page\">\n                <div className=\"project-settings-page-settings m-3\">\n                    <h3>\n                        <i className=\"fas fa-sliders-h\" />\n                        <span className=\"px-2\">\n                            {strings.projectSettings.title}\n                        </span>\n                    </h3>\n                    <div className=\"m-3\">\n                        <ProjectForm\n                            project={this.state.project}\n                            connections={this.props.connections}\n                            appSettings={this.props.appSettings}\n                            onChange={this.onFormChange}\n                            onSubmit={this.onFormSubmit}\n                            onCancel={this.onFormCancel} />\n                    </div>\n                </div>\n                {this.props.project &&\n                    <div className=\"project-settings-page-metrics bg-lighter-1\">\n                        <ProjectMetrics project={this.props.project} />\n                    </div>\n                }\n            </div>\n        );\n    }\n\n    /**\n     * When the project form is changed verifies if the project contains enough information\n     * to persist into temp local storage to support better new project flow when\n     * creating new connections inline\n     */\n    private onFormChange = (project: IProject) => {\n        if (this.isPartialProject(project)) {\n            localStorage.setItem(projectFormTempKey, JSON.stringify(project));\n        }\n    }\n\n    private onFormSubmit = async (project: IProject) => {\n        const isNew = !(!!project.id);\n\n        await this.props.applicationActions.ensureSecurityToken(project);\n        await this.props.projectActions.saveProject(project);\n        localStorage.removeItem(projectFormTempKey);\n\n        toast.success(interpolate(strings.projectSettings.messages.saveSuccess, { project }));\n\n        if (isNew) {\n            this.props.history.push(`/projects/${this.props.project.id}/edit`);\n        } else {\n            this.props.history.goBack();\n        }\n    }\n\n    private onFormCancel = () => {\n        localStorage.removeItem(projectFormTempKey);\n        this.props.history.goBack();\n    }\n\n    /**\n     * Checks whether a project is partially populated\n     */\n    private isPartialProject = (project: IProject): boolean => {\n        return project && !(!!project.id) &&\n            (\n                !!project.name\n                || !!project.description\n                || (project.sourceConnection && Object.keys(project.sourceConnection).length > 0)\n                || (project.targetConnection && Object.keys(project.targetConnection).length > 0)\n                || (project.exportFormat && Object.keys(project.exportFormat).length > 0)\n                || (project.tags && project.tags.length > 0)\n            );\n    }\n}\n","import React from \"react\";\nimport { Switch, Route } from \"react-router-dom\";\nimport HomePage from \"../pages/homepage/homePage\";\nimport ActiveLearningPage from \"../pages/activeLearning/activeLearningPage\";\nimport AppSettingsPage from \"../pages/appSettings/appSettingsPage\";\nimport ConnectionPage from \"../pages/connections/connectionsPage\";\nimport EditorPage from \"../pages/editorPage/editorPage\";\nimport ExportPage from \"../pages/export/exportPage\";\nimport ProjectSettingsPage from \"../pages/projectSettings/projectSettingsPage\";\n\n/**\n * @name - Main Content Router\n * @description - Controls main content pane based on route\n */\nexport default function MainContentRouter() {\n    return (\n        <div className=\"app-content text-light\">\n            <Switch>\n                <Route path=\"/\" exact component={HomePage} />\n                <Route path=\"/settings\" component={AppSettingsPage} />\n                <Route path=\"/connections/:connectionId\" component={ConnectionPage} />\n                <Route path=\"/connections\" exact component={ConnectionPage} />\n                <Route path=\"/projects/:projectId/edit\" component={EditorPage} />\n                <Route path=\"/projects/create\" component={ProjectSettingsPage} />\n                <Route path=\"/projects/:projectId/settings\" component={ProjectSettingsPage} />\n                <Route path=\"/projects/:projectId/export\" component={ExportPage} />\n                <Route path=\"/projects/:projectId/active-learning\" component={ActiveLearningPage} />\n                <Route component={HomePage} />\n            </Switch>\n        </div>\n    );\n}\n","import MD5 from \"md5.js\";\nimport _ from \"lodash\";\nimport * as shortid from \"shortid\";\nimport Guard from \"../common/guard\";\nimport {\n    IAsset, AssetType, IProject, IAssetMetadata, AssetState,\n    IRegion, RegionType, ITFRecordMetadata,\n} from \"../models/applicationState\";\nimport { AssetProviderFactory, IAssetProvider } from \"../providers/storage/assetProviderFactory\";\nimport { StorageProviderFactory, IStorageProvider } from \"../providers/storage/storageProviderFactory\";\nimport { constants } from \"../common/constants\";\nimport HtmlFileReader from \"../common/htmlFileReader\";\nimport { TFRecordsReader } from \"../providers/export/tensorFlowRecords/tensorFlowReader\";\nimport { FeatureType } from \"../providers/export/tensorFlowRecords/tensorFlowBuilder\";\nimport { appInfo } from \"../common/appInfo\";\nimport { encodeFileURI } from \"../common/utils\";\n\n/**\n * @name - Asset Service\n * @description - Functions for dealing with project assets\n */\nexport class AssetService {\n\n    /**\n     * Create IAsset from filePath\n     * @param filePath - filepath of asset\n     * @param fileName - name of asset\n     */\n    public static createAssetFromFilePath(filePath: string, fileName?: string): IAsset {\n        Guard.empty(filePath);\n\n        const normalizedPath = filePath.toLowerCase();\n\n        // If the path is not already prefixed with a protocol\n        // then assume it comes from the local file system\n        if (!normalizedPath.startsWith(\"http://\") &&\n            !normalizedPath.startsWith(\"https://\") &&\n            !normalizedPath.startsWith(\"file:\")) {\n            // First replace \\ character with / the do the standard url encoding then encode unsupported characters\n            filePath = encodeFileURI(filePath, true);\n        }\n\n        const md5Hash = new MD5().update(filePath).digest(\"hex\");\n        const pathParts = filePath.split(/[\\\\\\/]/);\n        // Example filename: video.mp4#t=5\n        // fileNameParts[0] = \"video\"\n        // fileNameParts[1] = \"mp4\"\n        // fileNameParts[2] = \"t=5\"\n        fileName = fileName || pathParts[pathParts.length - 1];\n        const fileNameParts = fileName.split(\".\");\n        const extensionParts = fileNameParts[fileNameParts.length - 1].split(/[\\?#]/);\n        const assetFormat = extensionParts[0];\n\n        const assetType = this.getAssetType(assetFormat);\n\n        return {\n            id: md5Hash,\n            format: assetFormat,\n            state: AssetState.NotVisited,\n            type: assetType,\n            name: fileName,\n            path: filePath,\n            size: null,\n        };\n    }\n\n    /**\n     * Get Asset Type from format (file extension)\n     * @param format - File extension of asset\n     */\n    public static getAssetType(format: string): AssetType {\n        switch (format.toLowerCase()) {\n            case \"gif\":\n            case \"jpg\":\n            case \"jpeg\":\n            case \"tif\":\n            case \"tiff\":\n            case \"png\":\n            case \"bmp\":\n                return AssetType.Image;\n            case \"mp4\":\n            case \"mov\":\n            case \"avi\":\n            case \"m4v\":\n            case \"mpg\":\n            case \"wmv\":\n                return AssetType.Video;\n            case \"tfrecord\":\n                return AssetType.TFRecord;\n            default:\n                return AssetType.Unknown;\n        }\n    }\n\n    private assetProviderInstance: IAssetProvider;\n    private storageProviderInstance: IStorageProvider;\n\n    constructor(private project: IProject) {\n        Guard.null(project);\n    }\n\n    /**\n     * Get Asset Provider from project's source connction\n     */\n    protected get assetProvider(): IAssetProvider {\n        if (!this.assetProviderInstance) {\n            this.assetProviderInstance = AssetProviderFactory.create(\n                this.project.sourceConnection.providerType,\n                this.project.sourceConnection.providerOptions,\n            );\n\n            return this.assetProviderInstance;\n        }\n    }\n\n    /**\n     * Get Storage Provider from project's target connection\n     */\n    protected get storageProvider(): IStorageProvider {\n        if (!this.storageProviderInstance) {\n            this.storageProviderInstance = StorageProviderFactory.create(\n                this.project.targetConnection.providerType,\n                this.project.targetConnection.providerOptions,\n            );\n        }\n\n        return this.storageProviderInstance;\n    }\n\n    /**\n     * Get assets from provider\n     */\n    public async getAssets(): Promise<IAsset[]> {\n        return await this.assetProvider.getAssets();\n    }\n\n    /**\n     * Get a list of child assets associated with the current asset\n     * @param rootAsset The parent asset to search\n     */\n    public getChildAssets(rootAsset: IAsset): IAsset[] {\n        Guard.null(rootAsset);\n\n        if (rootAsset.type !== AssetType.Video) {\n            return [];\n        }\n\n        return _\n            .values(this.project.assets)\n            .filter((asset) => asset.parent && asset.parent.id === rootAsset.id)\n            .sort((a, b) => a.timestamp - b.timestamp);\n    }\n\n    /**\n     * Save metadata for asset\n     * @param metadata - Metadata for asset\n     */\n    public async save(metadata: IAssetMetadata): Promise<IAssetMetadata> {\n        Guard.null(metadata);\n\n        const fileName = `${metadata.asset.id}${constants.assetMetadataFileExtension}`;\n\n        // Only save asset metadata if asset is in a tagged state\n        // Otherwise primary asset information is already persisted in the project file.\n        if (metadata.asset.state === AssetState.Tagged) {\n            await this.storageProvider.writeText(fileName, JSON.stringify(metadata, null, 4));\n        } else {\n            // If the asset is no longer tagged, then it doesn't contain any regions\n            // and the file is not required.\n            try {\n                await this.storageProvider.deleteFile(fileName);\n            } catch (err) {\n                // The file may not exist - that's OK\n            }\n        }\n        return metadata;\n    }\n\n    /**\n     * Get metadata for asset\n     * @param asset - Asset for which to retrieve metadata\n     */\n    public async getAssetMetadata(asset: IAsset): Promise<IAssetMetadata> {\n        Guard.null(asset);\n\n        const fileName = `${asset.id}${constants.assetMetadataFileExtension}`;\n        try {\n            const json = await this.storageProvider.readText(fileName);\n            return JSON.parse(json) as IAssetMetadata;\n        } catch (err) {\n            if (asset.type === AssetType.TFRecord) {\n                return {\n                    asset: { ...asset },\n                    regions: await this.getRegionsFromTFRecord(asset),\n                    version: appInfo.version,\n                };\n            } else {\n                return {\n                    asset: { ...asset },\n                    regions: [],\n                    version: appInfo.version,\n                };\n            }\n        }\n    }\n\n    /**\n     * Delete a tag from asset metadata files\n     * @param tagName Name of tag to delete\n     */\n    public async deleteTag(tagName: string): Promise<IAssetMetadata[]> {\n        const transformer = (tags) => tags.filter((t) => t !== tagName);\n        return await this.getUpdatedAssets(tagName, transformer);\n    }\n\n    /**\n     * Rename a tag within asset metadata files\n     * @param tagName Name of tag to rename\n     */\n    public async renameTag(tagName: string, newTagName: string): Promise<IAssetMetadata[]> {\n        const transformer = (tags) => tags.map((t) => (t === tagName) ? newTagName : t);\n        return await this.getUpdatedAssets(tagName, transformer);\n    }\n\n    /**\n     * Update tags within asset metadata files\n     * @param tagName Name of tag to update within project\n     * @param transformer Function that accepts array of tags from a region and returns a modified array of tags\n     */\n    private async getUpdatedAssets(tagName: string, transformer: (tags: string[]) => string[])\n        : Promise<IAssetMetadata[]> {\n        // Loop over assets and update if necessary\n        const updates = await _.values(this.project.assets).mapAsync(async (asset) => {\n            const assetMetadata = await this.getAssetMetadata(asset);\n            const isUpdated = this.updateTagInAssetMetadata(assetMetadata, tagName, transformer);\n\n            return isUpdated ? assetMetadata : null;\n        });\n\n        return updates.filter((assetMetadata) => !!assetMetadata);\n    }\n\n    /**\n     * Update tag within asset metadata object\n     * @param assetMetadata Asset metadata to update\n     * @param tagName Name of tag being updated\n     * @param transformer Function that accepts array of tags from a region and returns a modified array of tags\n     * @returns Modified asset metadata object or null if object does not need to be modified\n     */\n    private updateTagInAssetMetadata(\n        assetMetadata: IAssetMetadata,\n        tagName: string,\n        transformer: (tags: string[]) => string[]): boolean {\n        let foundTag = false;\n\n        for (const region of assetMetadata.regions) {\n            if (region.tags.find((t) => t === tagName)) {\n                foundTag = true;\n                region.tags = transformer(region.tags);\n            }\n        }\n        if (foundTag) {\n            assetMetadata.regions = assetMetadata.regions.filter((region) => region.tags.length > 0);\n            assetMetadata.asset.state = (assetMetadata.regions.length) ? AssetState.Tagged : AssetState.Visited;\n            return true;\n        }\n\n        return false;\n    }\n\n    private async getRegionsFromTFRecord(asset: IAsset): Promise<IRegion[]> {\n        const objectArray = await this.getTFRecordMetadata(asset);\n        const regions: IRegion[] = [];\n\n        // Add Regions from TFRecord in Regions\n        for (let index = 0; index < objectArray.textArray.length; index++) {\n            regions.push({\n                id: shortid.generate(),\n                type: RegionType.Rectangle,\n                tags: [objectArray.textArray[index]],\n                boundingBox: {\n                    left: objectArray.xminArray[index] * objectArray.width,\n                    top: objectArray.yminArray[index] * objectArray.height,\n                    width: (objectArray.xmaxArray[index] - objectArray.xminArray[index]) * objectArray.width,\n                    height: (objectArray.ymaxArray[index] - objectArray.yminArray[index]) * objectArray.height,\n                },\n                points: [{\n                    x: objectArray.xminArray[index] * objectArray.width,\n                    y: objectArray.yminArray[index] * objectArray.height,\n                },\n                {\n                    x: objectArray.xmaxArray[index] * objectArray.width,\n                    y: objectArray.ymaxArray[index] * objectArray.height,\n                }],\n            });\n        }\n\n        return regions;\n    }\n\n    private async getTFRecordMetadata(asset: IAsset): Promise<ITFRecordMetadata> {\n        const tfrecords = new Buffer(await HtmlFileReader.getAssetArray(asset));\n        const reader = new TFRecordsReader(tfrecords);\n\n        const width = reader.getFeature(0, \"image/width\", FeatureType.Int64) as number;\n        const height = reader.getFeature(0, \"image/height\", FeatureType.Int64) as number;\n\n        const xminArray = reader.getArrayFeature(0, \"image/object/bbox/xmin\", FeatureType.Float) as number[];\n        const yminArray = reader.getArrayFeature(0, \"image/object/bbox/ymin\", FeatureType.Float) as number[];\n        const xmaxArray = reader.getArrayFeature(0, \"image/object/bbox/xmax\", FeatureType.Float) as number[];\n        const ymaxArray = reader.getArrayFeature(0, \"image/object/bbox/ymax\", FeatureType.Float) as number[];\n        const textArray = reader.getArrayFeature(0, \"image/object/class/text\", FeatureType.String) as string[];\n\n        return { width, height, xminArray, yminArray, xmaxArray, ymaxArray, textArray };\n    }\n}\n","import React from \"react\";\nimport { NavLink } from \"react-router-dom\";\n\n/**\n * Link able to be enabled/disabled\n * @param param0 - {\n *      to: \"link for item\"\n *      disabled: true if link is disabled\n *      props: {\n *          title: Title of item,\n *          children: Child items to include in span\n *      }\n * }\n */\nexport default function ConditionalNavLink({ to, disabled, ...props }) {\n    if (disabled) {\n        return (<span className=\"disabled\" title={props.title} >{props.children}</span>);\n    } else {\n        return (<NavLink title={props.title} to={to}>{props.children}</NavLink>);\n    }\n}\n","import React from \"react\";\nimport { NavLink } from \"react-router-dom\";\nimport ConditionalNavLink from \"../common/conditionalNavLink/conditionalNavLink\";\nimport { strings } from \"../../../common/strings\";\n\n/**\n * Side bar that remains visible throughout app experience\n * Contains links to editor, settings, export, etc.\n * @param param0 - {\n *      project - IProject\n * }\n */\nexport default function Sidebar({ project }) {\n    const projectId = project ? project.id : null;\n\n    return (\n        <div className=\"bg-lighter-2 app-sidebar\">\n            <ul>\n                <li>\n                    <NavLink title={\"Home\"} to={`/`}>\n                        <i className=\"fas fa-home\"></i>\n                    </NavLink>\n                </li>\n                <li>\n                    <ConditionalNavLink disabled={!projectId}\n                        title={strings.tags.editor}\n                        to={`/projects/${projectId}/edit`}>\n                        <i className=\"fas fa-bookmark\"></i>\n                    </ConditionalNavLink>\n                </li>\n                <li>\n                    <ConditionalNavLink disabled={!projectId}\n                        title={strings.projectSettings.title}\n                        to={`/projects/${projectId}/settings`}>\n                        <i className=\"fas fa-sliders-h\"></i>\n                    </ConditionalNavLink>\n                </li>\n                <li>\n                    <ConditionalNavLink disabled={!projectId}\n                        title={strings.export.title}\n                        to={`/projects/${projectId}/export`}>\n                        <i className=\"fas fa-external-link-square-alt\"></i>\n                    </ConditionalNavLink>\n                </li>\n                <li>\n                    <ConditionalNavLink disabled={!projectId}\n                        title={strings.activeLearning.title}\n                        to={`/projects/${projectId}/active-learning`}>\n                        <i className=\"fas fa-graduation-cap\"></i>\n                    </ConditionalNavLink>\n                </li>\n                <li>\n                    <NavLink title={strings.connections.title}\n                        to={`/connections`}><i className=\"fas fa-plug\"></i></NavLink>\n                </li>\n            </ul>\n            <div className=\"app-sidebar-fill\"></div>\n            <ul>\n                <li><NavLink title={strings.appSettings.title}\n                    to={`/settings`}><i className=\"fas fa-cog\"></i></NavLink></li>\n            </ul>\n        </div>\n    );\n}\n","import { Action } from \"redux\";\nimport { IToggleDevToolsAction,\n         IRefreshApplicationAction,\n         ISaveAppSettingsAction,\n         IEnsureSecurityTokenAction,\n} from \"./applicationActions\";\nimport { ActionTypes } from \"./actionTypes\";\nimport {\n    ILoadConnectionAction,\n    ISaveConnectionAction,\n    IDeleteConnectionAction,\n} from \"./connectionActions\";\nimport {\n    ILoadProjectAction,\n    ICloseProjectAction,\n    ISaveProjectAction,\n    ILoadProjectAssetsAction,\n    ISaveAssetMetadataAction,\n    ILoadAssetMetadataAction,\n    IExportProjectAction,\n    IDeleteProjectAction,\n} from \"./projectActions\";\nimport {\n    IShowAppErrorAction,\n    IClearErrorAction,\n} from \"./appErrorActions\";\n\n/**\n * Data payload dispatched from the action and delivered to reducer\n */\nexport interface IPayloadAction<TType, TPayload> extends Action<TType> {\n    payload: TPayload;\n}\n\n/**\n * Creates action and validates type of action type name\n * @param type Name for action being created\n */\n// tslint:disable-next-line:max-line-length\nexport function createAction<TAction extends Action<TAction[\"type\"]>>(type: TAction[\"type\"]): () => Action<TAction[\"type\"]> {\n    return () => ({\n        type,\n    });\n}\n\n/**\n * Create action with payload\n * @param type Name for action being created\n */\n// tslint:disable-next-line:max-line-length\nexport function createPayloadAction<TAction extends IPayloadAction<TAction[\"type\"], TAction[\"payload\"]>>(type: TAction[\"type\"]): (payload: TAction[\"payload\"]) => IPayloadAction<TAction[\"type\"], TAction[\"payload\"]> {\n    return (payload: TAction[\"payload\"]) => ({\n        type,\n        payload,\n    });\n}\n\n/**\n * Catch-all for unregistered actions\n */\nexport interface IOtherAction extends Action<string> {\n    type: ActionTypes.ANY_OTHER_ACTION;\n}\n\n/**\n * Helper instance of catch-all\n */\nexport const anyOtherAction = createAction<IOtherAction>(ActionTypes.ANY_OTHER_ACTION);\n\n/**\n * Used by reducers to type-check all actions\n */\nexport type AnyAction = IOtherAction |\n    IToggleDevToolsAction |\n    IRefreshApplicationAction |\n    ISaveAppSettingsAction |\n    IEnsureSecurityTokenAction |\n    ILoadConnectionAction |\n    ISaveConnectionAction |\n    IDeleteConnectionAction |\n    ILoadProjectAction |\n    ICloseProjectAction |\n    ISaveProjectAction |\n    IDeleteProjectAction |\n    ILoadProjectAssetsAction |\n    ISaveAssetMetadataAction |\n    ILoadAssetMetadataAction |\n    IExportProjectAction |\n    IShowAppErrorAction |\n    IClearErrorAction;\n","import React, { Fragment, SyntheticEvent } from \"react\";\nimport { IProject } from \"../../../models/applicationState\";\nimport IProjectActions from \"../../../redux/actions/projectActions\";\nimport { IKeyboardContext, KeyboardContext, KeyEventType } from \"../common/keyboardManager/keyboardManager\";\nimport { KeyboardBinding } from \"../common/keyboardBinding/keyboardBinding\";\nimport { ToolbarItemName, ToolbarItemGroup } from \"../../../registerToolbar\";\n\n/**\n * Toolbar Item Metadata\n * @member name - Name of Toolbar Item\n * @member icon - Icon for toolbar item\n * @member tooltip - Tooltip to apply upon selection\n * @member group - Name of item group in which to include item\n * @member type - Type of toolbar item (Action or State)\n * @member accelerators - collection of accelerator that map to same action\n */\nexport interface IToolbarItemMetadata {\n    name: ToolbarItemName;\n    icon: string;\n    tooltip: string;\n    group: ToolbarItemGroup;\n    type: ToolbarItemType;\n    accelerators?: string[];\n}\n\n/**\n * Types of Toolbar items\n * @member Action - Toolbar item executes an action (export)\n * @member State - Toolbar item changes something about the state of the component (Draw Polygon)\n */\nexport enum ToolbarItemType {\n    Action = 0,\n    State = 1,\n}\n\n/**\n * Properties for Toolbar Item\n * @member actions - Project actions\n * @member project - Current project being edited\n * @member active - Toolbar is active\n * @member onClick - Function to be called on click of Toolbar Item\n */\nexport interface IToolbarItemProps extends IToolbarItemMetadata {\n    actions: IProjectActions;\n    project: IProject;\n    active: boolean;\n    onClick: (item: ToolbarItem) => void;\n}\n\n/**\n * @name - Toolbar Item\n * @description - Controls for Editor Page Toolbar\n */\nexport abstract class ToolbarItem extends React.Component<IToolbarItemProps> {\n    public static contextType = KeyboardContext;\n    public context!: IKeyboardContext;\n    private unregisterKeyboardHandler: () => void;\n\n    public componentWillUnmount() {\n        if (this.unregisterKeyboardHandler) {\n            this.unregisterKeyboardHandler();\n        }\n    }\n\n    public render() {\n        const className = [`toolbar-btn ${this.props.name}`];\n        if (this.props.active) {\n            className.push(\"active\");\n        }\n\n        const accelerators = this.props.accelerators;\n\n        return (\n            <Fragment>\n                {\n                    accelerators &&\n                    <KeyboardBinding\n                        displayName={this.props.tooltip}\n                        accelerators={accelerators}\n                        handler={this.onClick}\n                        icon={this.props.icon}\n                        keyEventType={KeyEventType.KeyDown}\n                    />\n                }\n                <button type=\"button\"\n                    className={className.join(\" \")}\n                    title={this.getTitle()}\n                    onClick={this.onClick}>\n                    <i className={\"fas \" + this.props.icon} />\n                </button>\n            </Fragment>\n        );\n    }\n\n    protected abstract onItemClick();\n\n    private getTitle = () => {\n        return `${this.props.tooltip}${this.getShortcut()}`;\n    }\n\n    private getShortcut = () => {\n        return ` (${this.consolidateKeyCasings(this.props.accelerators).join(\", \")})`;\n    }\n\n    private consolidateKeyCasings = (accelerators: string[]): string[] => {\n        const consolidated: string[] = [];\n        if (accelerators) {\n            for (const a of accelerators) {\n                if (!consolidated.find((item) => item.toLowerCase() === a.toLowerCase())) {\n                    consolidated.push(a);\n                }\n            }\n        }\n        return consolidated;\n    }\n\n    private onClick = (e: SyntheticEvent | KeyboardEvent) => {\n        e.stopPropagation();\n\n        if (this.onItemClick) {\n            this.onItemClick();\n        }\n        this.props.onClick(this);\n    }\n}\n","import LocalizedStrings, { LocalizedStringsMethods } from \"react-localization\";\nimport { english } from \"./localization/en-us\";\nimport { spanish } from \"./localization/es-cl\";\n\n/**\n * Interface for all required strings in application\n * Language must add all strings to be compliant for localization\n */\nexport interface IAppStrings {\n    appName: string;\n    common: {\n        displayName: string;\n        description: string;\n        submit: string;\n        cancel: string;\n        save: string;\n        delete: string;\n        provider: string;\n        homePage: string;\n    };\n    titleBar: {\n        help: string;\n        minimize: string;\n        maximize: string;\n        restore: string;\n        close: string;\n    };\n    homePage: {\n        newProject: string;\n        openLocalProject: {\n            title: string;\n        },\n        openCloudProject: {\n            title: string;\n            selectConnection: string;\n        },\n        deleteProject: {\n            title: string;\n            confirmation: string;\n        },\n        importProject: {\n            title: string;\n            confirmation: string;\n        },\n        recentProjects: string,\n        messages: {\n            deleteSuccess: string,\n        },\n    };\n    appSettings: {\n        title: string;\n        storageTitle: string;\n        uiHelp: string;\n        save: string;\n        securityToken: {\n            name: {\n                title: string;\n            },\n            key: {\n                title: string;\n            },\n        },\n        securityTokens: {\n            title: string;\n            description: string;\n        },\n        version: {\n            description: string;\n        },\n        commit: string,\n        devTools: {\n            description: string;\n            button: string;\n        },\n        reload: {\n            description: string;\n            button: string;\n        },\n        messages: {\n            saveSuccess: string;\n        },\n    };\n    projectSettings: {\n        title: string;\n        securityToken: {\n            title: string;\n            description: string;\n        },\n        save: string;\n        sourceConnection: {\n            title: string;\n            description: string;\n        },\n        targetConnection: {\n            title: string;\n            description: string;\n        },\n        videoSettings: {\n            title: string;\n            description: string;\n            frameExtractionRate: string;\n        },\n        addConnection: string,\n        messages: {\n            saveSuccess: string;\n        },\n    };\n    projectMetrics: {\n        title: string;\n        assetsSectionTitle: string\n        totalAssetCount: string;\n        visitedAssets: string;\n        taggedAssets: string;\n        nonVisitedAssets: string;\n        nonTaggedAssets: string;\n        tagsSectionTitle: string;\n        totalRegionCount: string;\n        totalTagCount: string;\n        avgTagCountPerAsset: string;\n    };\n    tags: {\n        title: string;\n        placeholder: string;\n        editor: string;\n        modal: {\n            name: string;\n            color: string;\n        }\n        toolbar: {\n            add: string;\n            search: string;\n            lock: string;\n            edit: string;\n            moveUp: string;\n            moveDown: string;\n            delete: string;\n        }\n        colors: {\n            white: string;\n            gray: string;\n            red: string;\n            maroon: string;\n            yellow: string;\n            olive: string;\n            lime: string;\n            green: string;\n            aqua: string;\n            teal: string;\n            blue: string;\n            navy: string;\n            fuschia: string;\n            purple: string;\n        }\n        warnings: {\n            existingName: string;\n            emptyName: string;\n            unknownTagName: string;\n        }\n    };\n    connections: {\n        title: string;\n        details: string;\n        settings: string;\n        instructions: string;\n        save: string;\n        messages: {\n            saveSuccess: string;\n            deleteSuccess: string;\n        },\n        imageCorsWarning: string;\n        blobCorsWarning: string;\n        azDocLinkText: string;\n        providers: {\n            azureBlob: {\n                title: string;\n                description: string,\n                accountName: {\n                    title: string,\n                    description: string,\n                },\n                containerName: {\n                    title: string,\n                    description: string,\n                },\n                sas: {\n                    title: string,\n                    description: string,\n                },\n                createContainer: {\n                    title: string,\n                    description: string,\n                }\n            },\n            bing: {\n                title: string;\n                options: string;\n                apiKey: string;\n                query: string;\n                aspectRatio: {\n                    title: string;\n                    all: string;\n                    square: string;\n                    wide: string;\n                    tall: string;\n                }\n            },\n            local: {\n                title: string;\n                folderPath: string;\n                selectFolder: string;\n                chooseFolder: string;\n            },\n        }\n    };\n    editorPage: {\n        width: string;\n        height: string;\n        tagged: string;\n        visited: string;\n        toolbar: {\n            select: string;\n            pan: string;\n            drawRectangle: string;\n            drawPolygon: string;\n            copyRectangle: string;\n            copy: string;\n            cut: string;\n            paste: string;\n            removeAllRegions: string;\n            previousAsset: string;\n            nextAsset: string;\n            saveProject: string;\n            exportProject: string;\n            activeLearning: string;\n        }\n        videoPlayer: {\n            nextTaggedFrame: {\n                tooltip: string,\n            },\n            previousTaggedFrame: {\n                tooltip: string,\n            },\n            nextExpectedFrame: {\n                tooltip: string,\n            },\n            previousExpectedFrame: {\n                tooltip: string,\n            },\n        }\n        help: {\n            title: string;\n            escape: string;\n        }\n        assetError: string;\n        tags: {\n            hotKey: {\n                apply: string;\n                lock: string;\n            },\n            rename: {\n                title: string;\n                confirmation: string;\n            },\n            delete: {\n                title: string;\n                confirmation: string;\n            },\n        }\n        canvas: {\n            removeAllRegions: {\n                title: string;\n                confirmation: string;\n            },\n        },\n        messages: {\n            enforceTaggedRegions: {\n                title: string,\n                description: string,\n            },\n        }\n    };\n    export: {\n        title: string;\n        settings: string;\n        saveSettings: string;\n        providers: {\n            common: {\n                properties: {\n                    assetState: {\n                        title: string,\n                        description: string,\n                        options: {\n                            all: string,\n                            visited: string,\n                            tagged: string,\n                        },\n                    },\n                    testTrainSplit: {\n                        title: string,\n                        description: string,\n                    },\n                    includeImages: {\n                        title: string,\n                        description: string,\n                    },\n                },\n            },\n            vottJson: {\n                displayName: string,\n            },\n            azureCV: {\n                displayName: string,\n                regions: {\n                    eastUs: string,\n                    eastUs2: string,\n                    northCentralUs: string,\n                    southCentralUs: string,\n                    westUs2: string,\n                    westEurope: string,\n                    northEurope: string,\n                    southeastAsia: string,\n                    australiaEast: string,\n                    centralIndia: string,\n                    ukSouth: string,\n                    japanEast: string,\n                },\n                properties: {\n                    apiKey: {\n                        title: string,\n                    },\n                    region: {\n                        title: string,\n                        description: string,\n                    },\n                    newOrExisting: {\n                        title: string,\n                        options: {\n                            new: string,\n                            existing: string,\n                        },\n                    },\n                    name: {\n                        title: string,\n                    },\n                    description: {\n                        title: string,\n                    },\n                    projectType: {\n                        title: string,\n                        options: {\n                            classification: string,\n                            objectDetection: string,\n                        },\n                    },\n                    classificationType: {\n                        title: string,\n                        options: {\n                            multiLabel: string,\n                            multiClass: string,\n                        },\n                    },\n                    domainId: {\n                        title: string,\n                    },\n                    projectId: {\n                        title: string,\n                    },\n                },\n            },\n            tfRecords: {\n                displayName: string,\n            },\n            pascalVoc: {\n                displayName: string,\n                exportUnassigned: {\n                    title: string,\n                    description: string,\n                },\n            },\n            cntk: {\n                displayName: string,\n            },\n            csv: {\n                displayName: string,\n            },\n        },\n        messages: {\n            saveSuccess: string;\n        },\n    };\n    activeLearning: {\n        title: string;\n        form: {\n            properties: {\n                modelPathType: {\n                    title: string,\n                    description: string,\n                    options: {\n                        preTrained: string,\n                        customFilePath: string,\n                        customWebUrl: string,\n                    },\n                },\n                autoDetect: {\n                    title: string,\n                    description: string,\n                },\n                predictTag: {\n                    title: string,\n                    description: string,\n                },\n                modelPath: {\n                    title: string,\n                    description: string,\n                },\n                modelUrl: {\n                    title: string,\n                    description: string,\n                },\n            },\n        }\n        messages: {\n            loadingModel: string;\n            errorLoadModel: string;\n            saveSuccess: string;\n        }\n    };\n    profile: {\n        settings: string;\n    };\n    errors: {\n        unknown: IErrorMetadata,\n        projectInvalidJson: IErrorMetadata,\n        projectInvalidSecurityToken: IErrorMetadata,\n        projectUploadError: IErrorMetadata,\n        projectDeleteError: IErrorMetadata,\n        genericRenderError: IErrorMetadata,\n        securityTokenNotFound: IErrorMetadata,\n        canvasError: IErrorMetadata,\n        importError: IErrorMetadata,\n        pasteRegionTooBigError: IErrorMetadata,\n        exportFormatNotFound: IErrorMetadata,\n        activeLearningPredictionError: IErrorMetadata,\n    };\n}\n\ninterface IErrorMetadata {\n    title: string;\n    message: string;\n}\n\ninterface IStrings extends LocalizedStringsMethods, IAppStrings { }\n\nexport const strings: IStrings = new LocalizedStrings({\n    en: english,\n    es: spanish,\n});\n\n/**\n * Add localization values to JSON object. Substitutes value\n * of variable placeholders with value of currently set language\n * Example variable: ${strings.profile.settings}\n * @param json JSON object containing variable placeholders\n */\nexport function addLocValues(json: any) {\n    return interpolateJson(json, { strings });\n}\n\n/**\n * Stringifies the JSON and substitutes values from params\n * @param json JSON object\n * @param params Parameters for substitution\n */\nexport function interpolateJson(json: any, params: any) {\n    const template = JSON.stringify(json);\n    const outputJson = interpolate(template, params);\n    return JSON.parse(outputJson);\n}\n\n/**\n * Makes substitution of values in string\n * @param template String containing variables\n * @param params Params containing substitution values\n */\nexport function interpolate(template: string, params: any) {\n    const names = Object.keys(params);\n    const vals = Object[\"values\"](params);\n    return new Function(...names, `return \\`${template}\\`;`)(...vals);\n}\n","import { IAppStrings } from \"../strings\";\n\n/**\n * App Strings for English language\n */\nexport const english: IAppStrings = {\n    appName: \"Visual Object Tagging Tool\",\n    common: {\n        displayName: \"Display Name\",\n        description: \"Description\",\n        submit: \"Submit\",\n        cancel: \"Cancel\",\n        save: \"Save\",\n        delete: \"Delete\",\n        provider: \"Provider\",\n        homePage: \"Home Page\",\n    },\n    titleBar: {\n        help: \"Help\",\n        minimize: \"Minimize\",\n        maximize: \"Maximize\",\n        restore: \"Restore\",\n        close: \"Close\",\n    },\n    homePage: {\n        newProject: \"New Project\",\n        openLocalProject: {\n            title: \"Open Local Project\",\n        },\n        openCloudProject: {\n            title: \"Open Cloud Project\",\n            selectConnection: \"Select a Connection\",\n        },\n        recentProjects: \"Recent Projects\",\n        deleteProject: {\n            title: \"Delete Project\",\n            confirmation: \"Are you sure you want to delete project\",\n        },\n        importProject: {\n            title: \"Import Project\",\n            confirmation: \"Are you sure you want to convert project ${project.file.name} project settings \" +\n                \"to v2 format? We recommend you backup the project file first.\",\n        },\n        messages: {\n            deleteSuccess: \"Successfully deleted ${project.name}\",\n        },\n    },\n    appSettings: {\n        title: \"Application Settings\",\n        storageTitle: \"Storage Settings\",\n        uiHelp: \"Where your settings are stored\",\n        save: \"Save Settings\",\n        securityToken: {\n            name: {\n                title: \"Name\",\n            },\n            key: {\n                title: \"Key\",\n            },\n        },\n        securityTokens: {\n            title: \"Security Tokens\",\n            description: \"Security tokens are used to encrypt sensitive data within your project configuration\",\n        },\n        version: {\n            description: \"Version:\",\n        },\n        commit: \"Commit SHA\",\n        devTools: {\n            description: \"Open application developer tools to help diagnose issues\",\n            button: \"Toggle Developer Tools\",\n        },\n        reload: {\n            description: \"Reload the app discarding all current changes\",\n            button: \"Refresh Application\",\n        },\n        messages: {\n            saveSuccess: \"Successfully saved application settings\",\n        },\n    },\n    projectSettings: {\n        title: \"Project Settings\",\n        securityToken: {\n            title: \"Security Token\",\n            description: \"Used to encrypt sensitive data within project files\",\n        },\n        save: \"Save Project\",\n        sourceConnection: {\n            title: \"Source Connection\",\n            description: \"Where to load assets from\",\n        },\n        targetConnection: {\n            title: \"Target Connection\",\n            description: \"Where to save the project and exported data\",\n        },\n        videoSettings: {\n            title: \"Video Settings\",\n            description: \"The rate at which frames are extracted for tagging.\",\n            frameExtractionRate: \"Frame Extraction Rate (frames per a video second)\",\n        },\n        addConnection: \"Add Connection\",\n        messages: {\n            saveSuccess: \"Successfully saved ${project.name} project settings\",\n        },\n    },\n    projectMetrics: {\n        title: \"Project Metrics\",\n        assetsSectionTitle: \"Assets\",\n        totalAssetCount: \"Total Assets\",\n        visitedAssets: \"Visited Assets (${count})\",\n        taggedAssets: \"Tagged Assets (${count})\",\n        nonTaggedAssets: \"Not Tagged Assets (${count})\",\n        nonVisitedAssets: \"Not Visited Assets (${count})\",\n        tagsSectionTitle: \"Tags & Labels\",\n        totalRegionCount: \"Total Tagged Regions\",\n        totalTagCount: \"Total Tags\",\n        avgTagCountPerAsset: \"Average tags per asset\",\n    },\n    tags: {\n        title: \"Tags\",\n        placeholder: \"Add new tag\",\n        editor: \"Tags Editor\",\n        modal: {\n            name: \"Tag Name\",\n            color: \"Tag Color\",\n        },\n        colors: {\n            white: \"White\",\n            gray: \"Gray\",\n            red: \"Red\",\n            maroon: \"Maroon\",\n            yellow: \"Yellow\",\n            olive: \"Olive\",\n            lime: \"Lime\",\n            green: \"Green\",\n            aqua: \"Aqua\",\n            teal: \"Teal\",\n            blue: \"Blue\",\n            navy: \"Navy\",\n            fuschia: \"Fuschia\",\n            purple: \"Purple\",\n        },\n        warnings: {\n            existingName: \"Tag name already exists. Choose another name\",\n            emptyName: \"Cannot have an empty tag name\",\n            unknownTagName: \"Unknown\",\n        },\n        toolbar: {\n            add: \"Add new tag\",\n            search: \"Search tags\",\n            edit: \"Edit tag\",\n            lock: \"Lock tag\",\n            moveUp: \"Move tag up\",\n            moveDown: \"Move tag down\",\n            delete: \"Delete tag\",\n        },\n    },\n    connections: {\n        title: \"Connections\",\n        details: \"Connection Details\",\n        settings: \"Connection Settings\",\n        instructions: \"Please select a connection to edit\",\n        save: \"Save Connection\",\n        messages: {\n            saveSuccess: \"Successfully saved ${connection.name}\",\n            deleteSuccess: \"Successfully deleted ${connection.name}\",\n        },\n        imageCorsWarning: \"Warning: When using VoTT in a Web browser, some assets from Bing Image \\\n                          Search may not export correctly due to CORS (Cross Origin Resource Sharing) restrictions.\",\n        blobCorsWarning: \"Warning: CORS (Cross Domain Resource Sharing) must be enabled on the Azure Blob Storage \\\n                          account, in order to use it as a source or target connection. More information on \\\n                          enabling CORS can be found in the {0}\",\n        azDocLinkText: \"Azure Documentation.\",\n        providers: {\n            azureBlob: {\n                title: \"Azure Blob Storage\",\n                description: \"\",\n                accountName: {\n                    title: \"Account Name\",\n                    description: \"\",\n                },\n                containerName: {\n                    title: \"Container Name\",\n                    description: \"\",\n                },\n                sas: {\n                    title: \"SAS\",\n                    description: \"Shared access signature used to authenticate to the blob storage account\",\n                },\n                createContainer: {\n                    title: \"Create Container\",\n                    description: \"Creates the blob container if it does not already exist\",\n                },\n            },\n            bing: {\n                title: \"Bing Image Search\",\n                options: \"Bing Image Search Options\",\n                apiKey: \"API Key\",\n                query: \"Query\",\n                aspectRatio: {\n                    title: \"Aspect Ratio\",\n                    all: \"All\",\n                    square: \"Square\",\n                    wide: \"Wide\",\n                    tall: \"Tall\",\n                },\n            },\n            local: {\n                title: \"Local File System\",\n                folderPath: \"Folder Path\",\n                selectFolder: \"Select Folder\",\n                chooseFolder: \"Choose Folder\",\n            },\n        },\n    },\n    editorPage: {\n        width: \"Width\",\n        height: \"Height\",\n        tagged: \"Tagged\",\n        visited: \"Visited\",\n        toolbar: {\n            select: \"Select (V)\",\n            pan: \"Pan\",\n            drawRectangle: \"Draw Rectangle\",\n            drawPolygon: \"Draw Polygon\",\n            copyRectangle: \"Copy Rectangle\",\n            copy: \"Copy Regions\",\n            cut: \"Cut Regions\",\n            paste: \"Paste Regions\",\n            removeAllRegions: \"Remove All Regions\",\n            previousAsset: \"Previous Asset\",\n            nextAsset: \"Next Asset\",\n            saveProject: \"Save Project\",\n            exportProject: \"Export Project\",\n            activeLearning: \"Active Learning\",\n        },\n        videoPlayer: {\n            previousTaggedFrame: {\n                tooltip: \"Previous Tagged Frame\",\n            },\n            nextTaggedFrame: {\n                tooltip: \"Next Tagged Frame\",\n            },\n            previousExpectedFrame: {\n                tooltip: \"Previous Frame\",\n            },\n            nextExpectedFrame: {\n                tooltip: \"Next Frame\",\n            },\n        },\n        help: {\n            title: \"Toggle Help Menu\",\n            escape: \"Escape Help Menu\",\n        },\n        assetError: \"Unable to load asset\",\n        tags: {\n            hotKey: {\n                apply: \"Apply Tag with Hot Key\",\n                lock: \"Lock Tag with Hot Key\",\n            },\n            rename: {\n                title: \"Rename Tag\",\n                confirmation: \"Are you sure you want to rename this tag? It will be renamed throughout all assets\",\n            },\n            delete: {\n                title: \"Delete Tag\",\n                confirmation: \"Are you sure you want to delete this tag? It will be deleted throughout all assets \\\n                and any regions where this is the only tag will also be deleted\",\n            },\n        },\n        canvas: {\n            removeAllRegions: {\n                title: \"Remove All Regions\",\n                confirmation: \"Are you sure you want to remove all regions?\",\n            },\n        },\n        messages: {\n            enforceTaggedRegions: {\n                title: \"Invalid region(s) detected\",\n                description: \"1 or more regions have not been tagged.  Ensure all regions are tagged before \\\n                    continuing to next asset.\",\n            },\n        },\n    },\n    export: {\n        title: \"Export\",\n        settings: \"Export Settings\",\n        saveSettings: \"Save Export Settings\",\n        providers: {\n            common: {\n                properties: {\n                    assetState: {\n                        title: \"Asset State\",\n                        description: \"Which assets to include in the export\",\n                        options: {\n                            all: \"All Assets\",\n                            visited: \"Only Visited Assets\",\n                            tagged: \"Only tagged Assets\",\n                        },\n                    },\n                    testTrainSplit: {\n                        title: \"Test / Train Split\",\n                        description: \"The test train split to use for exported data\",\n                    },\n                    includeImages: {\n                        title: \"Include Images\",\n                        description: \"Whether or not to include binary image assets in target connection\",\n                    },\n                },\n            },\n            vottJson: {\n                displayName: \"VoTT JSON\",\n            },\n            azureCV: {\n                displayName: \"Azure Custom Vision Service\",\n                regions: {\n                    australiaEast: \"Australia East\",\n                    centralIndia: \"Central India\",\n                    eastUs: \"East US\",\n                    eastUs2: \"East US 2\",\n                    japanEast: \"Japan East\",\n                    northCentralUs: \"North Central US\",\n                    northEurope: \"North Europe\",\n                    southCentralUs: \"South Central US\",\n                    southeastAsia: \"Southeast Asia\",\n                    ukSouth: \"UK South\",\n                    westUs2: \"West US 2\",\n                    westEurope: \"West Europe\",\n                },\n                properties: {\n                    apiKey: {\n                        title: \"API Key\",\n                    },\n                    region: {\n                        title: \"Region\",\n                        description: \"The Azure region where your service is deployed\",\n                    },\n                    classificationType: {\n                        title: \"Classification Type\",\n                        options: {\n                            multiLabel: \"Multiple tags per image\",\n                            multiClass: \"Single tag per image\",\n                        },\n                    },\n                    name: {\n                        title: \"Project Name\",\n                    },\n                    description: {\n                        title: \"Project Description\",\n                    },\n                    domainId: {\n                        title: \"Domain\",\n                    },\n                    newOrExisting: {\n                        title: \"New or Existing Project\",\n                        options: {\n                            new: \"New Project\",\n                            existing: \"Existing Project\",\n                        },\n                    },\n                    projectId: {\n                        title: \"Project Name\",\n                    },\n                    projectType: {\n                        title: \"Project Type\",\n                        options: {\n                            classification: \"Classification\",\n                            objectDetection: \"Object Detection\",\n                        },\n                    },\n                },\n            },\n            tfRecords: {\n                displayName: \"Tensorflow Records\",\n            },\n            pascalVoc: {\n                displayName: \"Pascal VOC\",\n                exportUnassigned: {\n                    title: \"Export Unassigned\",\n                    description: \"Whether or not to include unassigned tags in exported data\",\n                },\n            },\n            cntk: {\n                displayName: \"Microsoft Cognitive Toolkit (CNTK)\",\n            },\n            csv: {\n                displayName: \"Comma Separated Values (CSV)\",\n            },\n        },\n        messages: {\n            saveSuccess: \"Successfully saved export settings\",\n        },\n    },\n    activeLearning: {\n        title: \"Active Learning\",\n        form: {\n            properties: {\n                modelPathType: {\n                    title: \"Model Provider\",\n                    description: \"Where to load the training model from\",\n                    options: {\n                        preTrained: \"Pre-trained Coco SSD\",\n                        customFilePath: \"Custom (File path)\",\n                        customWebUrl: \"Custom (Url)\",\n                    },\n                },\n                autoDetect: {\n                    title: \"Auto Detect\",\n                    description: \"Whether or not to automatically make predictions as you navigate between assets\",\n                },\n                modelPath: {\n                    title: \"Model path\",\n                    description: \"Select a model from your local file system\",\n                },\n                modelUrl: {\n                    title: \"Model URL\",\n                    description: \"Load your model from a public web URL\",\n                },\n                predictTag: {\n                    title: \"Predict Tag\",\n                    description: \"Whether or not to automatically include tags in predictions\",\n                },\n            },\n        },\n        messages: {\n            loadingModel: \"Loading active learning model...\",\n            errorLoadModel: \"Error loading active learning model\",\n            saveSuccess: \"Successfully saved active learning settings\",\n        },\n    },\n    profile: {\n        settings: \"Profile Settings\",\n    },\n    errors: {\n        unknown: {\n            title: \"Unknown Error\",\n            message: \"The app encountered an unknown error. Please try again.\",\n        },\n        projectUploadError: {\n            title: \"Error Uploading File\",\n            message: `There was an error uploading the file.\n                Please verify the file is of the correct format and try again.`,\n        },\n        genericRenderError: {\n            title: \"Error Loading Application\",\n            message: \"An error occured while rendering the application. Please try again\",\n        },\n        projectInvalidSecurityToken: {\n            title: \"Error loading project file\",\n            message: `The security token referenced by the project is invalid.\n                Verify that the security token for the project has been set correctly within your application settings`,\n        },\n        projectInvalidJson: {\n            title: \"Error parsing project file\",\n            message: \"The selected project files does not contain valid JSON. Please check the file any try again.\",\n        },\n        projectDeleteError: {\n            title: \"Error deleting project\",\n            message: `An error occured while deleting the project.\n                Validate the project file and security token exist and try again`,\n        },\n        securityTokenNotFound: {\n            title: \"Error loading project file\",\n            message: `The security token referenced by the project cannot be found in your current application settings.\n                Verify the security token exists and try to reload the project.`,\n        },\n        canvasError: {\n            title: \"Error loading canvas\",\n            message: \"There was an error loading the canvas, check the project's assets and try again.\",\n        },\n        importError: {\n            title: \"Error importing V1 project\",\n            message: \"There was an error importing the V1 project. Check the project file and try again\",\n        },\n        pasteRegionTooBigError: {\n            title: \"Error pasting region\",\n            message: \"Region too big for this asset. Try copying another region\",\n        },\n        exportFormatNotFound: {\n            title: \"Error exporting project\",\n            message: \"Project is missing export format.  Please select an export format in the export setting page.\",\n        },\n        activeLearningPredictionError: {\n            title: \"Active Learning Error\",\n            message: \"An error occurred while predicting regions in the current asset. \\\n                Please verify your active learning configuration and try again\",\n        },\n    },\n};\n","import { IAppStrings } from \"../strings\";\n\n/**\n * App Strings for Spanish language\n */\nexport const spanish: IAppStrings = {\n    appName: \"Herramienta Visual de Etiquetado de Objetos\",\n    common: {\n        displayName: \"Nombre para Mostrar\",\n        description: \"Descripción\",\n        submit: \"Enviar\",\n        cancel: \"Cancelar\",\n        save: \"Guardar\",\n        delete: \"Borrar\",\n        provider: \"Proveedor\",\n        homePage: \"Página de Inicio\",\n    },\n    titleBar: {\n        help: \"Ayuda\",\n        minimize: \"Minimizar\",\n        maximize: \"Maximizar\",\n        restore: \"Restaurar\",\n        close: \"Cerrar\",\n    },\n    homePage: {\n        newProject: \"Nuevo Proyecto\",\n        recentProjects: \"Proyectos Recientes\",\n        openLocalProject: {\n            title: \"Abrir Proyecto Local\",\n        },\n        openCloudProject: {\n            title: \"Abrir Proyecto de la Nube\",\n            selectConnection: \"Select a Connection\",\n        },\n        deleteProject: {\n            title: \"Borrar Proyecto\",\n            confirmation: \"¿Está seguro que quiere borrar el proyecto\",\n        },\n        importProject: {\n            title: \"Importar Proyecto\",\n            confirmation: \"¿Está seguro que quiere convertir el proyecto ${project.file.name} \" +\n                \"a formato v2? Le recomendamos que haga una copia de seguridad de su archivo de proyecto.\",\n        },\n        messages: {\n            deleteSuccess: \"${project.name} eliminado correctamente\",\n        },\n    },\n    appSettings: {\n        title: \"Configuración de Aplicación\",\n        storageTitle: \"Configuración de Almacenamiento\",\n        uiHelp: \"Donde se guardan sus configuraciones\",\n        save: \"Guardar configuración\",\n        securityToken: {\n            name: {\n                title: \"Nombre\",\n            },\n            key: {\n                title: \"Clave\",\n            },\n        },\n        securityTokens: {\n            title: \"Tokens de seguridad\",\n            description: \"Los tokens de seguridad se utilizan para cifrar datos confidenciales \\\n                dentro de la configuración del proyecto\",\n        },\n        version: {\n            description: \"Versión:\",\n        },\n        commit: \"Cometer SHA\",\n        devTools: {\n            description: \"Abrir herramientas de desarrollo de aplicaciones para ayudar a diagnosticar problemas.\",\n            button: \"Alternar Herramientas de Desarrollo\",\n        },\n        reload: {\n            description: \"Recargar la aplicación descartando todos los cambios actuales\",\n            button: \"Recargar la aplicación\",\n        },\n        messages: {\n            saveSuccess: \"Configuración de la aplicación guardada correctamente\",\n        },\n    },\n    projectSettings: {\n        title: \"Configuración de Proyecto\",\n        securityToken: {\n            title: \"Token de seguridad\",\n            description: \"Se utiliza para cifrar datos confidenciales dentro de archivos de proyecto\",\n        },\n        save: \"Guardar el Proyecto\",\n        sourceConnection: {\n            title: \"Conexión de Origen\",\n            description: \"De donde se gargan sus activos\",\n        },\n        targetConnection: {\n            title: \"Conexión de Destino\",\n            description: \"Donde se guarda su proyecto y sus datos exportados\",\n        },\n        videoSettings: {\n            title: \"Ajustes de video\",\n            description: \"La velocidad a la que se extraen los marcos para el etiquetado.\",\n            frameExtractionRate: \"Tasa de extracción de cuadros (cuadros por segundo de video)\",\n        },\n        addConnection: \"Agregar Conexión\",\n        messages: {\n            saveSuccess: \"Guardado correctamente ${project.name} configuración del proyecto\",\n        },\n    },\n    projectMetrics: {\n        title: \"Métricas del proyecto\",\n        assetsSectionTitle: \"Activos\",\n        totalAssetCount: \"Total de activos\",\n        visitedAssets: \"Activos visitados (${count})\",\n        taggedAssets: \"Activos etiquetados (${count})\",\n        nonTaggedAssets: \"Activos no etiquetados (${count})\",\n        nonVisitedAssets: \"Activos no visitados (${count})\",\n        tagsSectionTitle: \"Etiquetas & etiquetas\",\n        totalRegionCount: \"Total de regiones\",\n        totalTagCount: \"Total de etiquetas\",\n        avgTagCountPerAsset: \"Recuento promedio de etiquetas por activo\",\n    },\n    tags: {\n        title: \"Etiquetas\",\n        placeholder: \"Agregar nuevo etiqueta\",\n        editor: \"Editor de Etiquetas\",\n        modal: {\n            name: \"Nombre de Etiqueta\",\n            color: \"Color de Etiqueta\",\n        },\n        colors: {\n            white: \"Blanco\",\n            gray: \"Gris\",\n            red: \"Rojo\",\n            maroon: \"Granate\",\n            yellow: \"Amarillo\",\n            olive: \"Olivo\",\n            lime: \"Lima\",\n            green: \"Verde\",\n            aqua: \"Aqua\",\n            teal: \"Trullo\",\n            blue: \"Azul\",\n            navy: \"Azul Marino\",\n            fuschia: \"Fuschia\",\n            purple: \"Púrpura\",\n        },\n        warnings: {\n            existingName: \"Nombre de etiqueta ya existe. Elige otro nombre\",\n            emptyName: \"El nombre de etiqueta no puede ser vacío\",\n            unknownTagName: \"Desconocido\",\n        },\n        toolbar: {\n            add: \"Agregar nueva etiqueta\",\n            search: \"Buscar entre etiquetas\",\n            edit: \"Editar etiqueta\",\n            lock: \"Bloquear etiqueta\",\n            moveDown: \"Mover etiqueta hacia abajo\",\n            moveUp: \"Mover etiqueta hacia arriba\",\n            delete: \"Borrar etiqueta\",\n        },\n    },\n    connections: {\n        title: \"Conexiones\",\n        save: \"Guardar Conexión\",\n        details: \"Detalles de Conexión\",\n        settings: \"Configuración de Conexión\",\n        instructions: \"Por favor seleccione una conexión para editar\",\n        messages: {\n            saveSuccess: \"${connection.name} guardado correctamente\",\n            deleteSuccess: \"${connection.name} eliminado correctamente\",\n        },\n        imageCorsWarning: \"Advertencia: Cuando se usa VoTT en un navegador web, es posible que algunos activos de este \\\n                          Búsqueda de Imágenes Bing no se exporten correctamente debido a las restricciones de CORS \\\n                          (Recursos de Origen Cruzado).\",\n        blobCorsWarning: \"Advertencia: CORS (Recursos de Origen Cruzado) debe estar habilitado en la \\\n                          cuenta de Azure Blob Storage para poder usarlo como una conexión de origen o destino. Puede \\\n                          encontrar más información sobre cómo habilitar CORS en la {0}.\",\n        azDocLinkText: \"documentación de Azure.\",\n        providers: {\n            azureBlob: {\n                title: \"Azure Blob Storage\",\n                description: \"\",\n                accountName: {\n                    title: \"Nombre de cuenta\",\n                    description: \"\",\n                },\n                containerName: {\n                    title: \"Nombre del contenedor\",\n                    description: \"\",\n                },\n                sas: {\n                    title: \"SAS\",\n                    description: \"Firma de acceso compartido utilizada para autenticarse en la cuenta de BLOB Storage\",\n                },\n                createContainer: {\n                    title: \"Crear contenedor\",\n                    description: \"Crea el contenedor de blobs si aún no existe\",\n                },\n            },\n            bing: {\n                title: \"Búsqueda de Imágenes Bing\",\n                options: \"Opciones de Búsqueda de Imágenes Bing\",\n                apiKey: \"Clave API\",\n                query: \"Consulta\",\n                aspectRatio: {\n                    title: \"Relación de Aspecto\",\n                    all: \"Todos\",\n                    square: \"Cuadrado\",\n                    wide: \"Ancho\",\n                    tall: \"Alto\",\n                },\n            },\n            local: {\n                title: \"Sistema de Archivos Local\",\n                folderPath: \"Ruta de la carpeta\",\n                selectFolder: \"Seleccionar la carpeta\",\n                chooseFolder: \"Elijir la carpeta\",\n            },\n        },\n    },\n    editorPage: {\n        width: \"Anchura\",\n        height: \"Altura\",\n        tagged: \"Etiquetado\",\n        visited: \"Visitado\",\n        toolbar: {\n            select: \"Seleccionar\",\n            pan: \"Pan\",\n            drawRectangle: \"Dibujar Rectángulo\",\n            drawPolygon: \"Dibujar Polígono\",\n            copyRectangle: \"Copia rectángulo\",\n            copy: \"Copiar regiones\",\n            cut: \"Cortar regiones\",\n            paste: \"Pegar regiones\",\n            removeAllRegions: \"Eliminar Todas Las Regiones\",\n            previousAsset: \"Activo anterior\",\n            nextAsset: \"Siguiente activo\",\n            saveProject: \"Guardar Proyecto\",\n            exportProject: \"Exprtar Proyecto\",\n            activeLearning: \"Aprendizaje Activo\",\n        },\n        videoPlayer: {\n            previousTaggedFrame: {\n                tooltip: \"Fotograma etiquetado anterior\",\n            },\n            nextTaggedFrame: {\n                tooltip: \"Siguiente marco etiquetado\",\n            },\n            previousExpectedFrame: {\n                tooltip: \"Fotograma anterior\",\n            },\n            nextExpectedFrame: {\n                tooltip: \"Siguiente marco\",\n            },\n        },\n        help: {\n            title: \"Abrir/cerrar el menú de ayuda\",\n            escape: \"Escapar el menú de ayuda\",\n        },\n        assetError: \"No se puede mostrar el activo\",\n        tags: {\n            hotKey: {\n                apply: \"Aplicar etiqueta con tecla de acceso rápido\",\n                lock: \"Bloquear etiqueta con tecla de acceso rápido\",\n            },\n            rename: {\n                title: \"Cambiar el nombre de la etiqueta\",\n                confirmation: \"¿Está seguro que quiere cambiar el nombre de esta etiqueta? \\\n                Será cambiada en todos los activos\",\n            },\n            delete: {\n                title: \"Delete Tag\",\n                confirmation: \"¿Está seguro que quiere borrar esta etiqueta? Será borrada en todos \\\n                los activos y en las regiones donde esta etiqueta sea la única, la region también será borrada\",\n            },\n        },\n        canvas: {\n            removeAllRegions: {\n                title: \"Borrar Regiones\",\n                confirmation: \"¿Está seguro que quiere borrar todas las regiones?\",\n            },\n        },\n        messages: {\n            enforceTaggedRegions: {\n                title: \"Las regiones no válidas detectadas\",\n                description: \"1 o más regiones no se han etiquetado.  \\\n                    Por favor, etiquete todas las regiones antes de continuar con el siguiente activo.\",\n            },\n        },\n    },\n    export: {\n        title: \"Exportar\",\n        settings: \"Configuración de Exportación\",\n        saveSettings: \"Guardar Configuración de Exportación\",\n        providers: {\n            common: {\n                properties: {\n                    assetState: {\n                        title: \"Estado del activo\",\n                        description: \"Qué activos incluir en la exportación\",\n                        options: {\n                            all: \"Todos los activos\",\n                            visited: \"Solo activos visitados\",\n                            tagged: \"Solo activos etiquetados\",\n                        },\n                    },\n                    testTrainSplit: {\n                        title: \"La división para entrenar y comprobar\",\n                        description: \"La división de datos para utilizar entre el entrenamiento y la comprobación\",\n                    },\n                    includeImages: {\n                        title: \"Incluir imágenes\",\n                        description: \"Si desea o no incluir activos de imagen binaria en la conexión de destino\",\n                    },\n                },\n            },\n            vottJson: {\n                displayName: \"VoTT JSON\",\n            },\n            azureCV: {\n                displayName: \"Servicio de Visión Personalizada Azure\",\n                regions: {\n                    australiaEast: \"Australia este\",\n                    centralIndia: \"Centro de la India\",\n                    eastUs: \"Este de EE.\",\n                    eastUs2: \"Este US 2\",\n                    japanEast: \"Japón este\",\n                    northCentralUs: \"Centro norte de EE.\",\n                    northEurope: \"Europa del norte\",\n                    southCentralUs: \"Centro sur de EE.\",\n                    southeastAsia: \"Sudeste asiático\",\n                    ukSouth: \"UK sur\",\n                    westUs2: \"West US 2\",\n                    westEurope: \"Europa occidental\",\n                },\n                properties: {\n                    apiKey: {\n                        title: \"Clave de API\",\n                    },\n                    region: {\n                        title: \"Región\",\n                        description: \"La región de Azure donde se implementa el servicio\",\n                    },\n                    classificationType: {\n                        title: \"Tipo de clasificación\",\n                        options: {\n                            multiLabel: \"Varias etiquetas por imagen\",\n                            multiClass: \"Una sola etiqueta por imagen\",\n                        },\n                    },\n                    name: {\n                        title: \"Nombre del proyecto\",\n                    },\n                    description: {\n                        title: \"Descripción del proyecto\",\n                    },\n                    domainId: {\n                        title: \"Dominio\",\n                    },\n                    newOrExisting: {\n                        title: \"Proyecto nuevo o existente\",\n                        options: {\n                            new: \"Nuevo proyecto\",\n                            existing: \"Proyecto existente\",\n                        },\n                    },\n                    projectId: {\n                        title: \"Nombre del proyecto\",\n                    },\n                    projectType: {\n                        title: \"Tipo de proyecto\",\n                        options: {\n                            classification: \"Clasificación\",\n                            objectDetection: \"Detección de objetos\",\n                        },\n                    },\n                },\n            },\n            tfRecords: {\n                displayName: \"Registros de Tensorflow\",\n            },\n            pascalVoc: {\n                displayName: \"Pascal VOC\",\n                exportUnassigned: {\n                    title: \"Exportar sin asignar\",\n                    description: \"Si se incluyen o no etiquetas no asignadas en los datos exportados\",\n                },\n            },\n            cntk: {\n                displayName: \"Microsoft Cognitive Toolkit (CNTK)\",\n            },\n            csv: {\n                displayName: \"Los valores separados por comas (CSV)\",\n            },\n        },\n        messages: {\n            saveSuccess: \"Configuración de exportación guardada correctamente\",\n        },\n    },\n    activeLearning: {\n        title: \"Aprendizaje Activo\",\n        form: {\n            properties: {\n                modelPathType: {\n                    title: \"Proveedor del modelo\",\n                    description: \"Fuente desde la cual cargar el modelo\",\n                    options: {\n                        preTrained: \"SSD de coco pre-entrenado\",\n                        customFilePath: \"Personalizado (ruta de archivo)\",\n                        customWebUrl: \"Personalizado (URL)\",\n                    },\n                },\n                autoDetect: {\n                    title: \"Detección automática\",\n                    description: \"Si desea o no realizar automáticamente predicciones a \\\n                        medida que navega entre activos\",\n                },\n                modelPath: {\n                    title: \"Ruta de modelo\",\n                    description: \"Seleccione un modelo de su sistema de archivos local\",\n                },\n                modelUrl: {\n                    title: \"URL del modelo\",\n                    description: \"Cargue el modelo desde una URL web pública\",\n                },\n                predictTag: {\n                    title: \"Predecir etiqueta\",\n                    description: \"Si se incluirán o no automáticamente las etiquetas en las predicciones\",\n                },\n            },\n        },\n        messages: {\n            loadingModel: \"Cargando modelo...\",\n            errorLoadModel: \"Error al cargar el modelo\",\n            saveSuccess: \"La configuración de aprendizaje activa se ha guardada correctamente\",\n        },\n    },\n    profile: {\n        settings: \"Configuración de Perfíl\",\n    },\n    errors: {\n        unknown: {\n            title: \"Error desconocido\",\n            message: \"La aplicación contó un error desconocido.  Por favor inténtalo de nuevo.\",\n        },\n        projectUploadError: {\n            title: \"Error al cargar el archivo\",\n            message: `Se ha cargado un error al cargar el archivo.\n                Compruebe que el archivo es del tipo correcto e inténtelo de nuevo.`,\n        },\n        genericRenderError: {\n            title: \"Error desconocido\",\n            message: \"La aplicación contó un error desconocido.  Por favor inténtalo de nuevo.\",\n        },\n        projectInvalidSecurityToken: {\n            title: \"Error al cargar el archivo de proyecto\",\n            message: \"Asegúrese de que el token de seguridad del proyecto existe\",\n        },\n        projectInvalidJson: {\n            title: \"Error al analizar el archivo de proyecto\",\n            message: \"El archivo de proyecto no es válido JSON\",\n        },\n        projectDeleteError: {\n            title: \"Error al eliminar el proyecto\",\n            message: `Se ha producido un error al eliminar el proyecto.\n                Validar el archivo de proyecto y el token de seguridad existen e inténtelo de nuevo`,\n        },\n        securityTokenNotFound: {\n            title: \"Error al cargar el archivo del proyecto\",\n            message: `El token de seguridad al que hace referencia el proyecto no se encuentra en la\n                configuración de la aplicación actual. Compruebe que existe el token de seguridad e intente\n                volver a cargar el proyecto.`,\n        },\n        canvasError: {\n            title: \"Error al cargar el lienzo\",\n            message: `Se produjo un error al cargar el lienzo, verifique los activos del\n                proyecto y vuelva a intentarlo.`,\n        },\n        importError: {\n            title: \"Error al importar el proyecto V1\",\n            message: \"Hubo un error al importar el proyecto V1. Revisa el archivo del proyecto y vuelve a intentarlo\",\n        },\n        pasteRegionTooBigError: {\n            title: \"Error al pegar region al activo\",\n            message: \"Hubo un error al pagar el region al activo. Intenta copiar otra region\",\n        },\n        exportFormatNotFound: {\n            title: \"Error exportando proyecto\",\n            message: `Proyecto falta el formato de exportación. Seleccione un formato de exportación en la página\n            de configuración de exportación.`,\n        },\n        activeLearningPredictionError: {\n            title: \"Error de aprendizaje\",\n            message: \"Se ha producido un error al predecir regiones en el activo actual. \\\n                Compruebe la configuración de aprendizaje activa y vuelva a intentarlo\",\n        },\n    },\n};\n","import { IAssetProvider, IAssetProviderRegistrationOptions } from \"./assetProviderFactory\";\nimport Guard from \"../../common/guard\";\nimport { IConnection, StorageType } from \"../../models/applicationState\";\nimport getHostProcess, { HostProcessType } from \"../../common/hostProcess\";\n\n/**\n * Interface for all VoTT Storage Providers\n * @member storageType - Type of Storage (local, cloud)\n * @member readText - Read text from path\n * @member readBinary - Read Buffer from path\n * @member deleteFile - Delete file from path\n * @member writeText - Write text to file at path\n * @member writeBinary - Write buffer to file at path\n * @member listFiles - List files in container within storage provider\n * @member listContainers - List containers in storage provider\n * @member createContainer - Create container within storage provider\n * @member deleteContainer - Delete a container from a storage provider\n */\nexport interface IStorageProvider extends IAssetProvider {\n\n    storageType: StorageType;\n\n    readText(filePath: string): Promise<string>;\n    readBinary(filePath: string): Promise<Buffer>;\n    deleteFile(filePath: string): Promise<void>;\n\n    writeText(filePath: string, contents: string): Promise<void>;\n    writeBinary(filePath: string, contents: Buffer): Promise<void>;\n\n    listFiles(folderPath?: string, ext?: string): Promise<string[]>;\n    listContainers(folderPath?: string): Promise<string[]>;\n\n    createContainer(folderPath: string): Promise<void>;\n    deleteContainer(folderPath: string): Promise<void>;\n}\n\n/**\n * Interface for registration options of Storage Providers\n * @member factory - Function to instantiate storage provider\n */\nexport interface IStorageProviderRegistrationOptions extends IAssetProviderRegistrationOptions {\n    factory: (options?: any) => IStorageProvider;\n}\n\n/**\n * @name - Storage Provider Factory\n * @description - Creates instance of Storage Providers based on request provider type\n */\nexport class StorageProviderFactory {\n    /**\n     * @returns - Dictionary of registered Storage Providers\n     */\n    public static get providers() {\n        return { ...StorageProviderFactory.providerRegistry };\n    }\n\n    /**\n     * Register a Storage Provider based on options\n     * @param options - Storage Provider options\n     */\n    public static register(options: IStorageProviderRegistrationOptions);\n    /**\n     * Register Storage Provider based on name and a factory\n     * @param name - Name of Storage Provider\n     * @param factory - Function that instantiates Storage Provider\n     */\n    public static register(name: string, factory: (options?: any) => IStorageProvider);\n    /**\n     * Register Storage Provider based on name and a factory\n     * @param name - Name of Storage Provider\n     * @param factory - Function that instantiates Storage Provider\n     */\n    public static register(nameOrOptions: any, factory?: (options?: any) => IStorageProvider) {\n        Guard.null(nameOrOptions);\n\n        let options: IStorageProviderRegistrationOptions = nameOrOptions as IStorageProviderRegistrationOptions;\n\n        if (typeof (nameOrOptions) === \"string\") {\n            Guard.null(factory);\n\n            options = {\n                name: nameOrOptions,\n                displayName: nameOrOptions,\n                factory,\n            };\n        }\n\n        if (!options.platformSupport) {\n            options.platformSupport = HostProcessType.All;\n        }\n\n        if ((options.platformSupport & getHostProcess().type) === 0) {\n            return;\n        }\n\n        StorageProviderFactory.providerRegistry[options.name] = options;\n    }\n\n    /**\n     * Create Storage Provider from provider type and options specified in connection\n     * @param connection Connection for a Storage Provider\n     */\n    public static createFromConnection(connection: IConnection) {\n        return this.create(connection.providerType, connection.providerOptions);\n    }\n\n    /**\n     * Create Storage Provider from registered Storage Provider name and options\n     * @param name - Name of Storage Provider\n     * @param options - Options for Storage Provider\n     */\n    public static create(name: string, options?: any): IStorageProvider {\n        Guard.empty(name);\n\n        const registrationOptions = StorageProviderFactory.providerRegistry[name];\n        if (!registrationOptions) {\n            throw new Error(`No storage provider has been registered with name '${name}'`);\n        }\n\n        return registrationOptions.factory(options);\n    }\n\n    /**\n     * Indicates whether or not a Storage Provider has been registered\n     * @param providerType - Name of Storage Provider\n     */\n    public static isRegistered(providerType: string): boolean {\n        return this.providers[providerType] !== undefined;\n    }\n\n    private static providerRegistry: { [id: string]: IStorageProviderRegistrationOptions } = {};\n}\n","// A TFRecords file contains a sequence of strings with CRC\n// hashes. Each record has the format\n//\n//     uint64 length\n//     uint32 masked_crc32_of_length\n//     byte   data[length]\n//     uint32 masked_crc32_of_data\n//\n// and the records are concatenated together to produce the file. The\n// CRC32s are described here, and the mask of a CRC is\n//\n//     masked_crc = ((crc >> 15) | (crc << 17)) + 0xa282ead8ul\n//\n// For more information, please refer to\n// https://www.tensorflow.org/versions/master/api_docs/python/python_io.html#tfrecords-format-details.\n\n// maskDelta is a magic number taken from\n// https://github.com/tensorflow/tensorflow/blob/754048a0453a04a761e112ae5d99c149eb9910dd/\n//    tensorflow/core/lib/hash/crc32c.h#L33.\n// const maskDelta uint32 = 0xa282ead8\n// mask returns a masked representation of crc.\n\nimport Guard from \"../../../common/guard\";\nimport Int64 from \"node-int64\";\nimport reverse from \"buffer-reverse\";\n\n/**\n * @buffer - Buffer input\n * @description - Calculate 32-bit CRC using the Castagnoli polynomial (0x1EDC6F41)\n */\nexport function crc32c(buffer: Buffer): number {\n    Guard.null(buffer);\n    const polynomial = 0x1EDC6F41;  // 0x04C11DB7 for crc32\n    const initialValue = 0xFFFFFFFF;\n    const finalXORValue = 0xFFFFFFFF;\n    const table = [];\n    let crc = initialValue;\n    let i = 0;\n    let j = 0;\n    let c = 0;\n\n    function reverse(x, n) {\n        let b = 0;\n        while (n) {\n        b = b * 2 + x % 2;\n        x /= 2;\n        x -= x % 1;\n        n--;\n        }\n        return b;\n    }\n\n    for (i = 255; i >= 0; i--) {\n        c = reverse(i, 32);\n\n        for (j = 0; j < 8; j++) {\n        c = ((c * 2) ^ (((c >>> 31) % 2) * polynomial)) >>> 0;\n        }\n\n        table[i] = reverse(c, 32);\n    }\n\n    for (i = 0; i < buffer.length; i++) {\n        c = buffer[i];\n        if (c > 255) {\n        throw new RangeError();\n        }\n        j = (crc % 256) ^ c;\n        crc = ((crc / 256) ^ table[j]) >>> 0;\n    }\n\n    return (crc ^ finalXORValue) >>> 0;\n}\n\n/**\n * @value - Input CRC32 value\n * @description - Mask an input CRC32 value according to the TensorFlow TFRecords specs\n */\nexport function maskCrc(value: number): number {\n    Guard.null(value);\n    const kCrc32MaskDelta = 0xa282ead8;\n    const fourGb = Math.pow(2, 32);\n\n    return (((value >>> 15) | (value << 17)) + kCrc32MaskDelta) % fourGb;\n}\n\n/**\n * @value - Input number value\n * @description - Get a Buffer representation of a Int64 bit value\n */\nexport function getInt64Buffer(value: number): Buffer {\n    Guard.null(value);\n    const metadataBuffer = new ArrayBuffer(8);\n    const intArray = new Uint8Array(metadataBuffer, 0, 8);\n    const dataView = new DataView(metadataBuffer, 0, 8);\n\n    dataView.setUint32(4, 0, true);\n    dataView.setUint32(0, value, true);\n\n    return new Buffer(intArray);\n}\n\n/**\n * @value - Input number value\n * @description - Get a Buffer representation of a Int32 bit value\n */\nexport function getInt32Buffer(value: number): Buffer {\n    Guard.null(value);\n    const fourGb = Math.pow(2, 32);\n    const value32 = value % fourGb;\n\n    const metadataBuffer = new ArrayBuffer(4);\n    const intArray = new Uint8Array(metadataBuffer, 0, 4);\n    const dataView = new DataView(metadataBuffer, 0, 4);\n\n    dataView.setUint32(0, value32, true);\n\n    return new Buffer(intArray);\n}\n\n/**\n * @str - Input string\n * @description - Get a Uint8Array representation of an input string value\n */\nexport function textEncode(str: string): Uint8Array {\n    Guard.null(str);\n    const utf8 = unescape(encodeURIComponent(str));\n    const result = new Uint8Array(utf8.length);\n    for (let i = 0; i < utf8.length; i++) {\n        result[i] = utf8.charCodeAt(i);\n    }\n    return result;\n}\n\n/**\n * @arr - Input Uint8Array byte array\n * @description - Get a UTF8 string value\n */\nexport function textDecode(arr: Uint8Array): string {\n    Guard.null(arr);\n\n    const utf8 = Array.from(arr).map((item) => String.fromCharCode(item)).join(\"\");\n    return decodeURIComponent(escape(utf8));\n}\n\n/**\n * @buffer - Input buffer\n * @description - Read an Int64 value from buffer\n */\nexport function readInt64(buffer: Buffer): number {\n    Guard.null(buffer);\n    Guard.expression(buffer.length, (num) => num >= 8);\n\n    buffer = reverse(buffer.slice(0, 8));\n    const int64 = new Int64(buffer, 0);\n    return int64.toNumber(true);\n}\n","import Guard from \"../../common/guard\";\nimport {\n    IProject, IExportFormat, IAssetMetadata, IAsset,\n    AssetState, AssetType, IExportProviderOptions,\n} from \"../../models/applicationState\";\nimport { IStorageProvider, StorageProviderFactory } from \"../storage/storageProviderFactory\";\nimport { IAssetProvider, AssetProviderFactory } from \"../storage/assetProviderFactory\";\nimport _ from \"lodash\";\nimport { AssetService } from \"../../services/assetService\";\n\n/**\n * @name - TF Pascal VOC Records Export Asset State\n * @description - Defines the asset type export option\n * @member All - Specifies that all assets will be exported\n * @member Visited - Specifies that visited (including tagged) assets will be exported\n * @member Tagged - Specifies that only tagged assets will be exported\n */\nexport enum ExportAssetState {\n    All = \"all\",\n    Visited = \"visited\",\n    Tagged = \"tagged\",\n}\n\nexport interface IExportAssetResult {\n    asset: IAssetMetadata;\n    success: boolean;\n    error?: string;\n}\n\nexport interface IExportResults {\n    completed: IExportAssetResult[];\n    errors: IExportAssetResult[];\n    count: number;\n}\n\n/**\n * @name - IExportProvider\n * @description - Defines the required interface for all VoTT export providers\n */\nexport interface IExportProvider {\n    /**\n     * Gets or set the project to be exported\n     */\n    project: IProject;\n\n    /**\n     * Exports the configured project for specified export configuration\n     */\n    export(): Promise<void> | Promise<IExportResults>;\n    save?(exportFormat: IExportFormat): Promise<any>;\n}\n\n/**\n * Base class implementation for all VoTT export providers\n * Provides quick access to the configured projects asset & storage providers\n */\nexport abstract class ExportProvider\n    <TOptions extends IExportProviderOptions = IExportProviderOptions> implements IExportProvider {\n    private storageProviderInstance: IStorageProvider;\n    private assetProviderInstance: IAssetProvider;\n    private assetService: AssetService;\n\n    constructor(public project: IProject, protected options?: TOptions) {\n        Guard.null(project);\n        this.assetService = new AssetService(this.project);\n    }\n\n    public abstract export(): Promise<void> | Promise<IExportResults>;\n\n    /**\n     * Gets the assets that are configured to be exported based on the configured asset state\n     */\n    public async getAssetsForExport(): Promise<IAssetMetadata[]> {\n        let predicate: (asset: IAsset) => boolean = null;\n\n        const getProjectAssets = () => Promise.resolve(_.values(this.project.assets));\n        const getAllAssets = async () => {\n            const projectAssets = await getProjectAssets();\n\n            return _(projectAssets)\n                .concat((await this.assetProvider.getAssets()))\n                .uniqBy((asset) => asset.id)\n                .value();\n        };\n\n        let getAssetsFunc: () => Promise<IAsset[]> = getProjectAssets;\n\n        switch (this.options.assetState) {\n            case ExportAssetState.Visited:\n                predicate = (asset) => asset.state === AssetState.Visited || asset.state === AssetState.Tagged;\n                break;\n            case ExportAssetState.Tagged:\n                predicate = (asset) => asset.state === AssetState.Tagged;\n                break;\n            case ExportAssetState.All:\n            default:\n                getAssetsFunc = getAllAssets;\n                predicate = () => true;\n                break;\n        }\n\n        return (await getAssetsFunc())\n            .filter((asset) => asset.type !== AssetType.Video)\n            .filter(predicate)\n            .mapAsync(async (asset) => await this.assetService.getAssetMetadata(asset));\n    }\n\n    /**\n     * Gets the storage provider for the current project\n     */\n    protected get storageProvider(): IStorageProvider {\n        if (this.storageProviderInstance) {\n            return this.storageProviderInstance;\n        }\n\n        this.storageProviderInstance = StorageProviderFactory.create(\n            this.project.targetConnection.providerType,\n            this.project.targetConnection.providerOptions,\n        );\n\n        return this.storageProviderInstance;\n    }\n\n    /**\n     * Gets the asset provider for the current project\n     */\n    protected get assetProvider(): IAssetProvider {\n        if (this.assetProviderInstance) {\n            return this.assetProviderInstance;\n        }\n\n        this.assetProviderInstance = AssetProviderFactory.create(\n            this.project.sourceConnection.providerType,\n            this.project.sourceConnection.providerOptions,\n        );\n\n        return this.assetProviderInstance;\n    }\n}\n","import React from \"react\";\nimport { KeyboardRegistrationManager } from \"./keyboardRegistrationManager\";\n\n/**\n * Types of Key events supported by registration manager\n */\nexport enum KeyEventType {\n    KeyDown = \"keydown\",\n    KeyUp = \"keyup\",\n    KeyPress = \"keypress\",\n}\n\nexport const KeyboardContext = React.createContext<IKeyboardContext>(null);\n\nexport interface IKeyboardContext {\n    keyboard: KeyboardRegistrationManager;\n}\n\nexport class KeyboardManager extends React.Component<any, IKeyboardContext> {\n    public static contextType = KeyboardContext;\n\n    public state: IKeyboardContext = {\n        keyboard: new KeyboardRegistrationManager(),\n    };\n\n    private nonSupportedKeys = new Set([\"Meta\", \"Ctrl\", \" Control\", \"Alt\"]);\n    private inputElementTypes = new Set([\"input\", \"select\", \"textarea\"]);\n\n    public componentDidMount() {\n        window.addEventListener(KeyEventType.KeyDown, this.onKeyboardEvent);\n        window.addEventListener(KeyEventType.KeyUp, this.onKeyboardEvent);\n        window.addEventListener(KeyEventType.KeyPress, this.onKeyboardEvent);\n    }\n\n    public componentWillUnmount() {\n        window.removeEventListener(KeyEventType.KeyDown, this.onKeyboardEvent);\n        window.removeEventListener(KeyEventType.KeyUp, this.onKeyboardEvent);\n        window.removeEventListener(KeyEventType.KeyPress, this.onKeyboardEvent);\n    }\n\n    public render() {\n        return (\n            <KeyboardContext.Provider value={this.state}>\n                {this.props.children}\n            </KeyboardContext.Provider>\n        );\n    }\n\n    private getKeyParts(evt: KeyboardEvent) {\n        const keyParts = [];\n        if (evt.ctrlKey || evt.metaKey) {\n            keyParts.push(\"CmdOrCtrl+\");\n        }\n        if (evt.altKey) {\n            keyParts.push(\"Alt+\");\n        }\n        keyParts.push(evt.key);\n        return keyParts.join(\"\");\n    }\n\n    private onKeyboardEvent = (evt: KeyboardEvent) => {\n        if (this.isDisabled() || this.nonSupportedKeys.has(evt.key)) {\n            return;\n        }\n\n        this.state.keyboard.invokeHandler(evt.type as KeyEventType, this.getKeyParts(evt), evt);\n    }\n\n    private isDisabled(): boolean {\n        return document.activeElement && this.inputElementTypes.has(document.activeElement.tagName.toLowerCase());\n    }\n}\n","import Guard from \"../../../../common/guard\";\nimport { KeyboardManager, KeyEventType } from \"./keyboardManager\";\nimport { IKeyboardBindingProps } from \"../keyboardBinding/keyboardBinding\";\nimport { AppError, ErrorCode } from \"../../../../models/applicationState\";\n\n/**\n * A map of keyboard event registrations\n */\nexport interface IKeyboardRegistrations {\n    [keyEventType: string]: {\n        [key: string]: IKeyboardBindingProps,\n    };\n}\n\n/**\n * An event handler that responds to keyboard events\n */\nexport type KeyboardEventHandler = (evt?: KeyboardEvent) => void;\n\n/**\n * Managers keyboard event registrations\n */\nexport class KeyboardRegistrationManager {\n    private registrations: IKeyboardRegistrations = {};\n\n    /**\n     * Registers a keyboard binding and returns a function to deregister that binding\n     * @param binding Properties for keyboard binding (type of key event, keyCodes, handler, etc.)\n     * @returns a function for deregistering the keyboard binding\n     */\n    public registerBinding = (binding: IKeyboardBindingProps) => {\n        const {keyEventType, accelerators, handler, displayName} = binding;\n        Guard.null(keyEventType);\n        Guard.expression(accelerators, (keyCodes) => keyCodes.length > 0);\n        Guard.null(handler);\n\n        let eventTypeRegistrations = this.registrations[keyEventType];\n        if (!eventTypeRegistrations) {\n            eventTypeRegistrations = {};\n            this.registrations[keyEventType] = eventTypeRegistrations;\n        }\n\n        accelerators.forEach((keyCode) => {\n            const currentBinding = this.registrations[keyEventType][keyCode];\n            if (currentBinding) {\n                let error = `Key code ${keyCode} on key event \"${keyEventType}\" `;\n                error += `already has binding registered: \"${currentBinding.displayName}.\" `;\n                error += `Cannot register binding \"${displayName}\" with the same key code and key event type`;\n                throw new AppError(ErrorCode.OverloadedKeyBinding, error);\n            }\n            this.registrations[keyEventType][keyCode] = binding;\n        });\n\n        return () => {\n            binding.accelerators.forEach((keyCode) => {\n                delete this.registrations[binding.keyEventType][keyCode];\n            });\n        };\n    }\n\n    /**\n     * Gets a list of registered event handlers for the specified key code\n     * @param keyEventType Type of key event (keydown, keyup, keypress)\n     * @param keyCode The key code combination, ex) CmdOrCtrl+1\n     */\n    public getHandler(keyEventType: KeyEventType, keyCode: string): (evt?: KeyboardEvent) => void {\n        Guard.null(keyEventType);\n        Guard.null(keyCode);\n\n        const keyEventTypeRegs = this.registrations[keyEventType];\n        return (keyEventTypeRegs && keyEventTypeRegs[keyCode])\n            ?\n            keyEventTypeRegs[keyCode].handler\n            :\n            null;\n    }\n\n    /**\n     * Invokes all registered event handlers for the specified key code\\\n     * @param keyEventType Type of key event (keydown, keyup, keypress)\n     * @param keyCode The key code combination, ex) CmdOrCtrl+1\n     * @param evt The keyboard event that was raised\n     */\n    public invokeHandler(keyEventType: KeyEventType, keyCode: string, evt: KeyboardEvent) {\n        Guard.null(keyCode);\n        Guard.null(evt);\n\n        const handler = this.getHandler(keyEventType, keyCode);\n        if (handler !== null) {\n            handler(evt);\n        }\n    }\n\n    public getRegistrations = () => {\n        return this.registrations;\n    }\n}\n","import { ToolbarItemFactory } from \"./providers/toolbar/toolbarItemFactory\";\nimport { ExportProject } from \"./react/components/toolbar/exportProject\";\nimport { SaveProject } from \"./react/components/toolbar/saveProject\";\nimport { ToolbarItemType } from \"./react/components/toolbar/toolbarItem\";\nimport { strings } from \"./common/strings\";\n\nexport enum ToolbarItemName {\n    SelectCanvas = \"selectCanvas\",\n    DrawRectangle = \"drawRectangle\",\n    DrawPolygon = \"drawPolygon\",\n    CopyRectangle = \"copyRectangle\",\n    CopyRegions = \"copyRegions\",\n    CutRegions = \"cutRegions\",\n    PasteRegions = \"pasteRegions\",\n    RemoveAllRegions = \"removeAllRegions\",\n    PreviousAsset = \"navigatePreviousAsset\",\n    NextAsset = \"navigateNextAsset\",\n    SaveProject = \"saveProject\",\n    ExportProject = \"exportProject\",\n    ActiveLearning = \"activeLearning\",\n}\n\nexport enum ToolbarItemGroup {\n    Canvas = \"canvas\",\n    Regions = \"regions\",\n    Navigation = \"navigation\",\n    Project = \"project\",\n}\n\n/**\n * Registers items for toolbar\n */\nexport default function registerToolbar() {\n    ToolbarItemFactory.register({\n        name: ToolbarItemName.SelectCanvas,\n        tooltip: strings.editorPage.toolbar.select,\n        icon: \"fa-mouse-pointer\",\n        group: ToolbarItemGroup.Canvas,\n        type: ToolbarItemType.State,\n        accelerators: [\"V\", \"v\"],\n    });\n\n    ToolbarItemFactory.register({\n        name: ToolbarItemName.DrawRectangle,\n        tooltip: strings.editorPage.toolbar.drawRectangle,\n        icon: \"fa-vector-square\",\n        group: ToolbarItemGroup.Canvas,\n        type: ToolbarItemType.State,\n        accelerators: [\"R\", \"r\"],\n    });\n\n    ToolbarItemFactory.register({\n        name: ToolbarItemName.DrawPolygon,\n        tooltip: strings.editorPage.toolbar.drawPolygon,\n        icon: \"fa-draw-polygon\",\n        group: ToolbarItemGroup.Canvas,\n        type: ToolbarItemType.State,\n        accelerators: [\"P\", \"p\"],\n    });\n\n    ToolbarItemFactory.register({\n        name: ToolbarItemName.CopyRectangle,\n        tooltip: strings.editorPage.toolbar.copyRectangle,\n        icon: \"far fa-clone\",\n        group: ToolbarItemGroup.Canvas,\n        type: ToolbarItemType.State,\n        accelerators: [\"CmdOrCtrl+W\", \"CmdOrCtrl+w\"],\n    });\n\n    ToolbarItemFactory.register({\n        name: ToolbarItemName.CopyRegions,\n        tooltip: strings.editorPage.toolbar.copy,\n        icon: \"fa-copy\",\n        group: ToolbarItemGroup.Regions,\n        type: ToolbarItemType.Action,\n        accelerators: [\"CmdOrCtrl+C\", \"CmdOrCtrl+c\"],\n    });\n\n    ToolbarItemFactory.register({\n        name: ToolbarItemName.CutRegions,\n        tooltip: strings.editorPage.toolbar.cut,\n        icon: \"fa-cut\",\n        group: ToolbarItemGroup.Regions,\n        type: ToolbarItemType.Action,\n        accelerators: [\"CmdOrCtrl+X\", \"CmdOrCtrl+x\"],\n    });\n\n    ToolbarItemFactory.register({\n        name: ToolbarItemName.PasteRegions,\n        tooltip: strings.editorPage.toolbar.paste,\n        icon: \"fa-paste\",\n        group: ToolbarItemGroup.Regions,\n        type: ToolbarItemType.Action,\n        accelerators: [\"CmdOrCtrl+V\", \"CmdOrCtrl+v\"],\n    });\n\n    ToolbarItemFactory.register({\n        name: ToolbarItemName.RemoveAllRegions,\n        tooltip: strings.editorPage.toolbar.removeAllRegions,\n        icon: \"fa-ban\",\n        group: ToolbarItemGroup.Regions,\n        type: ToolbarItemType.Action,\n        accelerators: [\"CmdOrCtrl+Delete\", \"CmdOrCtrl+Backspace\"],\n    });\n\n    ToolbarItemFactory.register({\n        name: ToolbarItemName.ActiveLearning,\n        tooltip: strings.editorPage.toolbar.activeLearning,\n        icon: \"fas fa-graduation-cap\",\n        group: ToolbarItemGroup.Canvas,\n        type: ToolbarItemType.Action,\n        accelerators: [\"CmdOrCtrl+D\", \"CmdOrCtrl+d\"],\n    });\n\n    ToolbarItemFactory.register({\n        name: ToolbarItemName.PreviousAsset,\n        tooltip: strings.editorPage.toolbar.previousAsset,\n        icon: \"fas fa-arrow-circle-up\",\n        group: ToolbarItemGroup.Navigation,\n        type: ToolbarItemType.Action,\n        accelerators: [\"ArrowUp\", \"W\", \"w\"],\n    });\n\n    ToolbarItemFactory.register({\n        name: ToolbarItemName.NextAsset,\n        tooltip: strings.editorPage.toolbar.nextAsset,\n        icon: \"fas fa-arrow-circle-down\",\n        group: ToolbarItemGroup.Navigation,\n        type: ToolbarItemType.Action,\n        accelerators: [\"ArrowDown\", \"S\", \"s\"],\n    });\n\n    ToolbarItemFactory.register({\n        name: ToolbarItemName.SaveProject,\n        tooltip: strings.editorPage.toolbar.saveProject,\n        icon: \"fa-save\",\n        group: ToolbarItemGroup.Project,\n        type: ToolbarItemType.Action,\n        accelerators: [\"CmdOrCtrl+S\", \"CmdOrCtrl+s\"],\n    }, SaveProject);\n\n    ToolbarItemFactory.register({\n        name: ToolbarItemName.ExportProject,\n        tooltip: strings.editorPage.toolbar.exportProject,\n        icon: \"fa-external-link-square-alt\",\n        group: ToolbarItemGroup.Project,\n        type: ToolbarItemType.Action,\n        accelerators: [\"CmdOrCtrl+E\", \"CmdOrCtrl+e\"],\n    }, ExportProject);\n}\n","import { ToolbarItem } from \"./toolbarItem\";\nimport { toast } from \"react-toastify\";\n\n/**\n * @name - Export Project\n * @description - Toolbar item to export current project\n */\nexport class ExportProject extends ToolbarItem {\n    protected onItemClick = async () => {\n        const infoId = toast.info(`Started export for ${this.props.project.name}...`, { autoClose: false });\n        const results = await this.props.actions.exportProject(this.props.project);\n\n        toast.dismiss(infoId);\n\n        if (!results || (results && results.errors.length === 0)) {\n            toast.success(`Export completed successfully!`);\n        } else if (results && results.errors.length > 0) {\n            toast.warn(`Successfully exported ${results.completed.length}/${results.count} assets`);\n        }\n    }\n}\n","import { ToolbarItem } from \"./toolbarItem\";\nimport { toast } from \"react-toastify\";\n\n/**\n * @name - Save Project\n * @description - Toolbar item to save current project\n */\nexport class SaveProject extends ToolbarItem {\n    protected onItemClick = async () => {\n        try {\n            await this.props.actions.saveProject(this.props.project);\n            toast.success(`${this.props.project.name} saved successfully!`);\n        } catch (e) {\n            toast.error(`Error saving ${this.props.project.name}`);\n        }\n    }\n}\n","import _ from \"lodash\";\nimport { IToolbarItemMetadata, ToolbarItem } from \"../../react/components/toolbar/toolbarItem\";\nimport Guard from \"../../common/guard\";\n\n/**\n * Interface for registering toolbar items\n */\nexport interface IToolbarItemRegistration {\n    component: typeof ToolbarItem;\n    config: IToolbarItemMetadata;\n}\n\n/**\n * @name - Toolbar Item Factory\n * @description - Creates instance of Toolbar Items based on specified options\n */\nexport class ToolbarItemFactory {\n    /**\n     * Register Toolbar Item for use in editor page\n     * @param component - React component ToolbarItem\n     * @param config - Configuration of ToolbarItem\n     */\n    public static register(config: IToolbarItemMetadata, component: typeof ToolbarItem = ToolbarItem) {\n        Guard.null(component);\n        Guard.null(config);\n\n        ToolbarItemFactory.componentRegistry.push({ component, config });\n    }\n\n    /**\n     * Get all registered Toolbar Items\n     */\n    public static getToolbarItems() {\n        return [...ToolbarItemFactory.componentRegistry];\n    }\n\n    /**\n     * Clear ToolbarItem Registry\n     */\n    public static reset(): void {\n        ToolbarItemFactory.componentRegistry = [];\n    }\n\n    private static componentRegistry: IToolbarItemRegistration[] = [];\n}\n","var map = {\n\t\"./azureBlobStorage.json\": 881,\n\t\"./azureBlobStorage.ui.json\": 449,\n\t\"./bingImageSearch.json\": 882,\n\t\"./bingImageSearch.ui.json\": 450,\n\t\"./localFileSystemProxy.json\": 883,\n\t\"./localFileSystemProxy.ui.json\": 451\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tvar id = map[req];\n\tif(!(id + 1)) { // check for number or string\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn id;\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 880;","var map = {\n\t\"./azureBlobStorage.ui.json\": 449,\n\t\"./bingImageSearch.ui.json\": 450,\n\t\"./localFileSystemProxy.ui.json\": 451\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tvar id = map[req];\n\tif(!(id + 1)) { // check for number or string\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn id;\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 884;","import Guard from \"./guard\";\nimport { IProject, ISecurityToken, IProviderOptions, ISecureString } from \"../models/applicationState\";\nimport { encryptObject, decryptObject } from \"./crypto\";\n\n/**\n * Generates a random integer in provided range\n * @param min Lower bound of random number generation - INCLUSIVE\n * @param max Upper bound of random number generation - EXCLUSIVE\n */\nexport function randomIntInRange(min: number, max: number) {\n    if (min > max) {\n        throw new Error(`min (${min}) can't be bigger than max (${max})`);\n    }\n\n    if (min === max) {\n        return min;\n    }\n\n    min = Math.ceil(min);\n    max = Math.floor(max);\n\n    return Math.floor(Math.random() * (max - min)) + min; // The maximum is exclusive and the minimum is inclusive\n}\n\n/**\n * Common key codes used throughout application\n */\nexport const KeyCodes = {\n    comma: 188,\n    enter: 13,\n    backspace: 8,\n    ctrl: 17,\n    shift: 16,\n    tab: 9,\n};\n\n/**\n * Generates a query string from the key/values of a JSON object\n * @param object The json object\n * @returns A value representing a URL compatible query string\n */\nexport function createQueryString(object: any): string {\n    Guard.null(object);\n\n    const parts: any[] = [];\n\n    for (const key of Object.getOwnPropertyNames(object)) {\n        parts.push(`${key}=${encodeURIComponent(object[key])}`);\n    }\n\n    return parts.join(\"&\");\n}\n\nexport function encodeFileURI(path: string, additionalEncodings?: boolean): string {\n    // encodeURI() will not encode: ~!@#$&*()=:/,;?+'\n    // extend it to support all of these except # and ?\n    // all other non encoded characters are implicitly supported with no reason to encoding them\n    const matchString = /(#|\\?)/g;\n    const encodings = {\n        \"\\#\": \"%23\",\n        \"\\?\": \"%3F\",\n        };\n    const encodedURI = `file:${encodeURI(normalizeSlashes(path))}`;\n    if (additionalEncodings) {\n        return encodedURI.replace(matchString, (match) => encodings[match]);\n    }\n    return encodedURI;\n}\n\nexport function normalizeSlashes(path: string): string {\n    return path.replace(/\\\\/g, \"/\");\n}\n\n/**\n * Encrypts sensitive settings for the specified project and returns the result\n * @param project The project to encrypt\n * @param securityToken The security token used to encrypt the project\n */\nexport function encryptProject(project: IProject, securityToken: ISecurityToken): IProject {\n    const encrypted: IProject = {\n        ...project,\n        sourceConnection: { ...project.sourceConnection },\n        targetConnection: { ...project.targetConnection },\n        exportFormat: project.exportFormat ? { ...project.exportFormat } : null,\n    };\n\n    encrypted.sourceConnection.providerOptions =\n        encryptProviderOptions(project.sourceConnection.providerOptions, securityToken.key);\n    encrypted.targetConnection.providerOptions =\n        encryptProviderOptions(project.targetConnection.providerOptions, securityToken.key);\n\n    if (encrypted.exportFormat) {\n        encrypted.exportFormat.providerOptions =\n            encryptProviderOptions(project.exportFormat.providerOptions, securityToken.key);\n    }\n\n    return encrypted;\n}\n\n/**\n * Decrypts sensitive settings for the specified project and return the result\n * @param project The project to decrypt\n * @param securityToken The security token used to decrypt the project\n */\nexport function decryptProject(project: IProject, securityToken: ISecurityToken): IProject {\n    const decrypted: IProject = {\n        ...project,\n        sourceConnection: { ...project.sourceConnection },\n        targetConnection: { ...project.targetConnection },\n        exportFormat: project.exportFormat ? { ...project.exportFormat } : null,\n    };\n\n    decrypted.sourceConnection.providerOptions =\n        decryptProviderOptions(decrypted.sourceConnection.providerOptions, securityToken.key);\n    decrypted.targetConnection.providerOptions =\n        decryptProviderOptions(decrypted.targetConnection.providerOptions, securityToken.key);\n\n    if (decrypted.exportFormat) {\n        decrypted.exportFormat.providerOptions =\n            decryptProviderOptions(decrypted.exportFormat.providerOptions, securityToken.key);\n    }\n\n    return decrypted;\n}\n\nfunction encryptProviderOptions(providerOptions: IProviderOptions | ISecureString, secret: string): ISecureString {\n    if (!providerOptions) {\n        return null;\n    }\n\n    if (providerOptions.encrypted) {\n        return providerOptions as ISecureString;\n    }\n\n    return {\n        encrypted: encryptObject(providerOptions, secret),\n    };\n}\n\nfunction decryptProviderOptions<T = IProviderOptions>(providerOptions: IProviderOptions | ISecureString, secret): T {\n    const secureString = providerOptions as ISecureString;\n    if (!(secureString && secureString.encrypted)) {\n        return providerOptions as T;\n    }\n\n    return decryptObject(providerOptions.encrypted, secret) as T;\n}\n","import Guard from \"../../common/guard\";\nimport { IExportProvider } from \"./exportProvider\";\nimport { IProject } from \"../../models/applicationState\";\n\nexport interface IExportProviderRegistrationOptions {\n    name: string;\n    displayName: string;\n    description?: string;\n    factory: (project: IProject, options?: any) => IExportProvider;\n}\n\n/**\n * @name - Export Provider Factory\n * @description - Creates instance of export providers based on request provider type\n */\nexport class ExportProviderFactory {\n\n    /**\n     * @returns Dictionary of registered providers\n     */\n    public static get providers() {\n        return { ...ExportProviderFactory.providerRegistry };\n    }\n\n    /**\n     * @returns Options from specified default provider\n     */\n    public static get defaultProvider() {\n        return ExportProviderFactory.defaultProviderOptions;\n    }\n\n    /**\n     * Registers a factory method for the specified export provider type\n     * @param options - The options to use when registering an export provider\n     */\n    public static register(options: IExportProviderRegistrationOptions) {\n        Guard.null(options);\n        Guard.empty(options.name);\n        Guard.empty(options.displayName);\n        Guard.null(options.factory);\n\n        // The first provider registered will be the default\n        if (ExportProviderFactory.defaultProviderOptions === null) {\n            ExportProviderFactory.defaultProviderOptions = options;\n        }\n        ExportProviderFactory.providerRegistry[options.name] = options;\n    }\n\n    /**\n     * Creates new instances of the specified export provider\n     * @param name - The name of the export provider to instantiate\n     * @param project - The project to load into the export provider\n     * @param options  - The provider specific options for exporting\n     */\n    public static create(name: string, project: IProject, options?: any): IExportProvider {\n        Guard.empty(name);\n        Guard.null(project);\n\n        const handler = ExportProviderFactory.providerRegistry[name];\n        if (!handler) {\n            throw new Error(`No export provider has been registered with name '${name}'`);\n        }\n\n        return handler.factory(project, options);\n    }\n\n    /**\n     * Create export provider from project\n     * @param project VoTT project\n     */\n    public static createFromProject(project: IProject): IExportProvider {\n        return ExportProviderFactory.create(\n            project.exportFormat.providerType,\n            project,\n            project.exportFormat.providerOptions,\n        );\n    }\n\n    private static providerRegistry: { [id: string]: IExportProviderRegistrationOptions } = {};\n    private static defaultProviderOptions: IExportProviderRegistrationOptions = null;\n}\n","export interface IDeferred<T> {\n    resolve(result?: T): void;\n    reject(err?: any): void;\n    then(value: T): Promise<T>;\n    catch(err: any): Promise<T>;\n}\n\nexport class Deferred<T> implements IDeferred<T> {\n    public promise: Promise<T>;\n\n    constructor() {\n        this.promise = new Promise<T>((resolve, reject) => {\n            this.resolve = resolve;\n            this.reject = reject;\n        });\n\n        this.then = this.promise.then.bind(this.promise);\n        this.catch = this.promise.catch.bind(this.promise);\n    }\n    // tslint:disable-next-line\n    public resolve = (result?: T) => { };\n    // tslint:disable-next-line\n    public reject = (err?: any) => { };\n    public then = (value: T) => { throw new Error(\"Not implemented yet\"); };\n    public catch = (err: any) => { throw new Error(\"Not implemented yet\"); };\n}\n","import * as shortid from \"shortid\";\nimport { IpcProxyMessage } from \"../electron/common/ipcProxy\";\nimport { Deferred } from \"./deferred\";\n\nexport class IpcRendererProxy {\n\n    public static pending: { [id: string]: Deferred<any> } = {};\n\n    public static initialize() {\n        if (IpcRendererProxy.initialized) {\n            return;\n        }\n\n        IpcRendererProxy.ipcRenderer = (window as any).require(\"electron\").ipcRenderer;\n        IpcRendererProxy.ipcRenderer.on(\"ipc-renderer-proxy\", (sender, message: IpcProxyMessage<any>) => {\n            const deferred = IpcRendererProxy.pending[message.id];\n\n            if (!deferred) {\n                throw new Error(`Cannot find deferred with id '${message.id}'`);\n            }\n\n            if (message.error) {\n                deferred.reject(message.error);\n            } else {\n                deferred.resolve(message.result);\n            }\n\n            delete IpcRendererProxy.pending[message.id];\n        });\n\n        IpcRendererProxy.initialized = true;\n    }\n\n    public static send<TResult, TArgs>(type: string, args?: TArgs): Promise<TResult> {\n        IpcRendererProxy.initialize();\n\n        const id = shortid.generate();\n        const deferred = new Deferred<TResult>();\n        IpcRendererProxy.pending[id] = deferred;\n\n        const outgoingArgs: IpcProxyMessage<TArgs> = {\n            id,\n            type,\n            args,\n        };\n\n        IpcRendererProxy.ipcRenderer.send(\"ipc-main-proxy\", outgoingArgs);\n\n        return deferred.promise;\n    }\n    private static ipcRenderer;\n    private static initialized: boolean = false;\n}\n"],"sourceRoot":""}